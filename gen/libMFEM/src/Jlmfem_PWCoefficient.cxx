// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::PWCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::PWCoefficient> : std::false_type { };
template<> struct SuperType<mfem::PWCoefficient> { typedef mfem::Coefficient type; };
}

// Class generating the wrapper for type mfem::PWCoefficient
// signature to use in the veto file: mfem::PWCoefficient
struct Jlmfem_PWCoefficient: public Wrapper {

  Jlmfem_PWCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::PWCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:144:7
    jlcxx::TypeWrapper<mfem::PWCoefficient>  t = jlModule.add_type<mfem::PWCoefficient>("mfem!PWCoefficient",
      jlcxx::julia_base_type<mfem::Coefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::PWCoefficient>>(new jlcxx::TypeWrapper<mfem::PWCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::PWCoefficient::PWCoefficient(const mfem::Array<int> &, const mfem::Array<mfem::Coefficient *> &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:184:4
    t.constructor<const mfem::Array<int> &, const mfem::Array<mfem::Coefficient *> &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::PWCoefficient::SetTime(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWCoefficient::SetTime(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:189:17
    t.method("SetTime", [](mfem::PWCoefficient& a, double arg0)->void { a.SetTime(arg0); });
    t.method("SetTime", [](mfem::PWCoefficient* a, double arg0)->void { a->SetTime(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::PWCoefficient::UpdateCoefficients(const mfem::Array<int> &, const mfem::Array<mfem::Coefficient *> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWCoefficient::UpdateCoefficients(const mfem::Array<int> &, const mfem::Array<mfem::Coefficient *> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:192:9
    t.method("UpdateCoefficients", [](mfem::PWCoefficient& a, const mfem::Array<int> & arg0, const mfem::Array<mfem::Coefficient *> & arg1)->void { a.UpdateCoefficients(arg0, arg1); });
    t.method("UpdateCoefficients", [](mfem::PWCoefficient* a, const mfem::Array<int> & arg0, const mfem::Array<mfem::Coefficient *> & arg1)->void { a->UpdateCoefficients(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::PWCoefficient::UpdateCoefficient(int, mfem::Coefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWCoefficient::UpdateCoefficient(int, mfem::Coefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:197:9
    t.method("UpdateCoefficient", [](mfem::PWCoefficient& a, int arg0, mfem::Coefficient & arg1)->void { a.UpdateCoefficient(arg0, arg1); });
    t.method("UpdateCoefficient", [](mfem::PWCoefficient* a, int arg0, mfem::Coefficient & arg1)->void { a->UpdateCoefficient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::PWCoefficient::ZeroCoefficient(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWCoefficient::ZeroCoefficient(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:201:9
    t.method("ZeroCoefficient", [](mfem::PWCoefficient& a, int arg0)->void { a.ZeroCoefficient(arg0); });
    t.method("ZeroCoefficient", [](mfem::PWCoefficient* a, int arg0)->void { a->ZeroCoefficient(arg0); });

    DEBUG_MSG("Adding wrapper for double mfem::PWCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::PWCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:205:19
    t.method("Eval", [](mfem::PWCoefficient& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a.Eval(arg0, arg1); });
    t.method("Eval", [](mfem::PWCoefficient* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a->Eval(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::PWCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_PWCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_PWCoefficient(module));
}
