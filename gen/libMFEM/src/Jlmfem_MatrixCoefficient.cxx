// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::MatrixCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::MatrixCoefficient> : std::false_type { };
}

// Class generating the wrapper for type mfem::MatrixCoefficient
// signature to use in the veto file: mfem::MatrixCoefficient
struct Jlmfem_MatrixCoefficient: public Wrapper {

  Jlmfem_MatrixCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::MatrixCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:876:7
    jlcxx::TypeWrapper<mfem::MatrixCoefficient>  t = jlModule.add_type<mfem::MatrixCoefficient>("mfem!MatrixCoefficient");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::MatrixCoefficient>>(new jlcxx::TypeWrapper<mfem::MatrixCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;



    DEBUG_MSG("Adding wrapper for void mfem::MatrixCoefficient::SetTime(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::MatrixCoefficient::SetTime(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:893:17
    t.method("SetTime", [](mfem::MatrixCoefficient& a, double arg0)->void { a.SetTime(arg0); });
    t.method("SetTime", [](mfem::MatrixCoefficient* a, double arg0)->void { a->SetTime(arg0); });

    DEBUG_MSG("Adding wrapper for double mfem::MatrixCoefficient::GetTime() (" __HERE__ ")");
    // signature to use in the veto list: double mfem::MatrixCoefficient::GetTime()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:896:11
    t.method("GetTime", [](mfem::MatrixCoefficient& a)->double { return a.GetTime(); });
    t.method("GetTime", [](mfem::MatrixCoefficient* a)->double { return a->GetTime(); });

    DEBUG_MSG("Adding wrapper for int mfem::MatrixCoefficient::GetHeight() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::MatrixCoefficient::GetHeight()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:899:8
    t.method("GetHeight", [](mfem::MatrixCoefficient const& a)->int { return a.GetHeight(); });
    t.method("GetHeight", [](mfem::MatrixCoefficient const* a)->int { return a->GetHeight(); });

    DEBUG_MSG("Adding wrapper for int mfem::MatrixCoefficient::GetWidth() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::MatrixCoefficient::GetWidth()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:902:8
    t.method("GetWidth", [](mfem::MatrixCoefficient const& a)->int { return a.GetWidth(); });
    t.method("GetWidth", [](mfem::MatrixCoefficient const* a)->int { return a->GetWidth(); });

    DEBUG_MSG("Adding wrapper for int mfem::MatrixCoefficient::GetVDim() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::MatrixCoefficient::GetVDim()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:905:8
    t.method("GetVDim", [](mfem::MatrixCoefficient const& a)->int { return a.GetVDim(); });
    t.method("GetVDim", [](mfem::MatrixCoefficient const* a)->int { return a->GetVDim(); });

    DEBUG_MSG("Adding wrapper for bool mfem::MatrixCoefficient::IsSymmetric() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::MatrixCoefficient::IsSymmetric()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:908:9
    t.method("IsSymmetric", [](mfem::MatrixCoefficient const& a)->bool { return a.IsSymmetric(); });
    t.method("IsSymmetric", [](mfem::MatrixCoefficient const* a)->bool { return a->IsSymmetric(); });

    DEBUG_MSG("Adding wrapper for void mfem::MatrixCoefficient::Eval(mfem::DenseMatrix &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::MatrixCoefficient::Eval(mfem::DenseMatrix &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:915:17
    t.method("Eval", [](mfem::MatrixCoefficient& a, mfem::DenseMatrix & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::MatrixCoefficient* a, mfem::DenseMatrix & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->Eval(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::MatrixCoefficient::EvalSymmetric(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::MatrixCoefficient::EvalSymmetric(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:925:17
    t.method("EvalSymmetric", [](mfem::MatrixCoefficient& a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.EvalSymmetric(arg0, arg1, arg2); });
    t.method("EvalSymmetric", [](mfem::MatrixCoefficient* a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->EvalSymmetric(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::MatrixCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_MatrixCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_MatrixCoefficient(module));
}
