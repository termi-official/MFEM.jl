// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::VectorQuadratureFunctionCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::VectorQuadratureFunctionCoefficient> : std::false_type { };
template<> struct SuperType<mfem::VectorQuadratureFunctionCoefficient> { typedef mfem::VectorCoefficient type; };
}

// Class generating the wrapper for type mfem::VectorQuadratureFunctionCoefficient
// signature to use in the veto file: mfem::VectorQuadratureFunctionCoefficient
struct Jlmfem_VectorQuadratureFunctionCoefficient: public Wrapper {

  Jlmfem_VectorQuadratureFunctionCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::VectorQuadratureFunctionCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:2049:7
    jlcxx::TypeWrapper<mfem::VectorQuadratureFunctionCoefficient>  t = jlModule.add_type<mfem::VectorQuadratureFunctionCoefficient>("mfem!VectorQuadratureFunctionCoefficient",
      jlcxx::julia_base_type<mfem::VectorCoefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorQuadratureFunctionCoefficient>>(new jlcxx::TypeWrapper<mfem::VectorQuadratureFunctionCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::VectorQuadratureFunctionCoefficient::VectorQuadratureFunctionCoefficient(mfem::QuadratureFunction &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:2057:4
    t.constructor<mfem::QuadratureFunction &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::VectorQuadratureFunctionCoefficient::SetComponent(int, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorQuadratureFunctionCoefficient::SetComponent(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:2062:9
    t.method("SetComponent", [](mfem::VectorQuadratureFunctionCoefficient& a, int arg0, int arg1)->void { a.SetComponent(arg0, arg1); });
    t.method("SetComponent", [](mfem::VectorQuadratureFunctionCoefficient* a, int arg0, int arg1)->void { a->SetComponent(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for const mfem::QuadratureFunction & mfem::VectorQuadratureFunctionCoefficient::GetQuadFunction() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::QuadratureFunction & mfem::VectorQuadratureFunctionCoefficient::GetQuadFunction()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:2064:30
    t.method("GetQuadFunction", [](mfem::VectorQuadratureFunctionCoefficient const& a)->const mfem::QuadratureFunction & { return a.GetQuadFunction(); });
    t.method("GetQuadFunction", [](mfem::VectorQuadratureFunctionCoefficient const* a)->const mfem::QuadratureFunction & { return a->GetQuadFunction(); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorQuadratureFunctionCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorQuadratureFunctionCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:2067:17
    t.method("Eval", [](mfem::VectorQuadratureFunctionCoefficient& a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::VectorQuadratureFunctionCoefficient* a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->Eval(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorQuadratureFunctionCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_VectorQuadratureFunctionCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_VectorQuadratureFunctionCoefficient(module));
}
