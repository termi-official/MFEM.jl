// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::IntegrationPoint> : std::false_type { };
  template<> struct DefaultConstructible<mfem::IntegrationPoint> : std::false_type { };
}

// Class generating the wrapper for type mfem::IntegrationPoint
// signature to use in the veto file: mfem::IntegrationPoint
struct Jlmfem_IntegrationPoint: public Wrapper {

  Jlmfem_IntegrationPoint(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::IntegrationPoint (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:25:7
    jlcxx::TypeWrapper<mfem::IntegrationPoint>  t = jlModule.add_type<mfem::IntegrationPoint>("mfem!IntegrationPoint");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::IntegrationPoint>>(new jlcxx::TypeWrapper<mfem::IntegrationPoint>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Init(const int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Init(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:31:9
    t.method("Init", [](mfem::IntegrationPoint& a, const int arg0)->void { a.Init(arg0); });
    t.method("Init", [](mfem::IntegrationPoint* a, const int arg0)->void { a->Init(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set(const double *, const int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set(const double *, const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:37:9
    t.method("Set", [](mfem::IntegrationPoint& a, const double * arg0, const int arg1)->void { a.Set(arg0, arg1); });
    t.method("Set", [](mfem::IntegrationPoint* a, const double * arg0, const int arg1)->void { a->Set(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Get(double *, const int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Get(double *, const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:51:9
    t.method("Get", [](mfem::IntegrationPoint const& a, double * arg0, const int arg1)->void { a.Get(arg0, arg1); });
    t.method("Get", [](mfem::IntegrationPoint const* a, double * arg0, const int arg1)->void { a->Get(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set(const double, const double, const double, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set(const double, const double, const double, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:65:9
    t.method("Set", [](mfem::IntegrationPoint& a, const double arg0, const double arg1, const double arg2, const double arg3)->void { a.Set(arg0, arg1, arg2, arg3); });
    t.method("Set", [](mfem::IntegrationPoint* a, const double arg0, const double arg1, const double arg2, const double arg3)->void { a->Set(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set3w(const double *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set3w(const double *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:68:9
    t.method("Set3w", [](mfem::IntegrationPoint& a, const double * arg0)->void { a.Set3w(arg0); });
    t.method("Set3w", [](mfem::IntegrationPoint* a, const double * arg0)->void { a->Set3w(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set3(const double, const double, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set3(const double, const double, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:70:9
    t.method("Set3", [](mfem::IntegrationPoint& a, const double arg0, const double arg1, const double arg2)->void { a.Set3(arg0, arg1, arg2); });
    t.method("Set3", [](mfem::IntegrationPoint* a, const double arg0, const double arg1, const double arg2)->void { a->Set3(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set3(const double *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set3(const double *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:73:9
    t.method("Set3", [](mfem::IntegrationPoint& a, const double * arg0)->void { a.Set3(arg0); });
    t.method("Set3", [](mfem::IntegrationPoint* a, const double * arg0)->void { a->Set3(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set2w(const double, const double, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set2w(const double, const double, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:75:9
    t.method("Set2w", [](mfem::IntegrationPoint& a, const double arg0, const double arg1, const double arg2)->void { a.Set2w(arg0, arg1, arg2); });
    t.method("Set2w", [](mfem::IntegrationPoint* a, const double arg0, const double arg1, const double arg2)->void { a->Set2w(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set2w(const double *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set2w(const double *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:78:9
    t.method("Set2w", [](mfem::IntegrationPoint& a, const double * arg0)->void { a.Set2w(arg0); });
    t.method("Set2w", [](mfem::IntegrationPoint* a, const double * arg0)->void { a->Set2w(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set2(const double, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set2(const double, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:80:9
    t.method("Set2", [](mfem::IntegrationPoint& a, const double arg0, const double arg1)->void { a.Set2(arg0, arg1); });
    t.method("Set2", [](mfem::IntegrationPoint* a, const double arg0, const double arg1)->void { a->Set2(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set2(const double *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set2(const double *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:82:9
    t.method("Set2", [](mfem::IntegrationPoint& a, const double * arg0)->void { a.Set2(arg0); });
    t.method("Set2", [](mfem::IntegrationPoint* a, const double * arg0)->void { a->Set2(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set1w(const double, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set1w(const double, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:84:9
    t.method("Set1w", [](mfem::IntegrationPoint& a, const double arg0, const double arg1)->void { a.Set1w(arg0, arg1); });
    t.method("Set1w", [](mfem::IntegrationPoint* a, const double arg0, const double arg1)->void { a->Set1w(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationPoint::Set1w(const double *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationPoint::Set1w(const double *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:86:9
    t.method("Set1w", [](mfem::IntegrationPoint& a, const double * arg0)->void { a.Set1w(arg0); });
    t.method("Set1w", [](mfem::IntegrationPoint* a, const double * arg0)->void { a->Set1w(arg0); });

    DEBUG_MSG("Adding x methods  to provide read access to the field x (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:28:11
    // signature to use in the veto list: mfem::IntegrationPoint::x
    t.method("x", [](const mfem::IntegrationPoint& a) -> double { return a.x; });
    t.method("x", [](mfem::IntegrationPoint& a) -> double { return a.x; });
    t.method("x", [](const mfem::IntegrationPoint* a) -> double { return a->x; });
    t.method("x", [](mfem::IntegrationPoint* a) -> double { return a->x; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:28:11
    // signature to use in the veto list: mfem::IntegrationPoint::x
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding x! methods to provide write access to the field x (" __HERE__ ")");
    t.method("x!", [](mfem::IntegrationPoint& a, double val) -> double { return a.x = val; });

    DEBUG_MSG("Adding x! methods to provide write access to the field x (" __HERE__ ")");
    t.method("x!", [](mfem::IntegrationPoint* a, double val) -> double { return a->x = val; });

    DEBUG_MSG("Adding y methods  to provide read access to the field y (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:28:14
    // signature to use in the veto list: mfem::IntegrationPoint::y
    t.method("y", [](const mfem::IntegrationPoint& a) -> double { return a.y; });
    t.method("y", [](mfem::IntegrationPoint& a) -> double { return a.y; });
    t.method("y", [](const mfem::IntegrationPoint* a) -> double { return a->y; });
    t.method("y", [](mfem::IntegrationPoint* a) -> double { return a->y; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:28:14
    // signature to use in the veto list: mfem::IntegrationPoint::y
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding y! methods to provide write access to the field y (" __HERE__ ")");
    t.method("y!", [](mfem::IntegrationPoint& a, double val) -> double { return a.y = val; });

    DEBUG_MSG("Adding y! methods to provide write access to the field y (" __HERE__ ")");
    t.method("y!", [](mfem::IntegrationPoint* a, double val) -> double { return a->y = val; });

    DEBUG_MSG("Adding z methods  to provide read access to the field z (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:28:17
    // signature to use in the veto list: mfem::IntegrationPoint::z
    t.method("z", [](const mfem::IntegrationPoint& a) -> double { return a.z; });
    t.method("z", [](mfem::IntegrationPoint& a) -> double { return a.z; });
    t.method("z", [](const mfem::IntegrationPoint* a) -> double { return a->z; });
    t.method("z", [](mfem::IntegrationPoint* a) -> double { return a->z; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:28:17
    // signature to use in the veto list: mfem::IntegrationPoint::z
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding z! methods to provide write access to the field z (" __HERE__ ")");
    t.method("z!", [](mfem::IntegrationPoint& a, double val) -> double { return a.z = val; });

    DEBUG_MSG("Adding z! methods to provide write access to the field z (" __HERE__ ")");
    t.method("z!", [](mfem::IntegrationPoint* a, double val) -> double { return a->z = val; });

    DEBUG_MSG("Adding weight methods  to provide read access to the field weight (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:28:20
    // signature to use in the veto list: mfem::IntegrationPoint::weight
    t.method("weight", [](const mfem::IntegrationPoint& a) -> double { return a.weight; });
    t.method("weight", [](mfem::IntegrationPoint& a) -> double { return a.weight; });
    t.method("weight", [](const mfem::IntegrationPoint* a) -> double { return a->weight; });
    t.method("weight", [](mfem::IntegrationPoint* a) -> double { return a->weight; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:28:20
    // signature to use in the veto list: mfem::IntegrationPoint::weight
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding weight! methods to provide write access to the field weight (" __HERE__ ")");
    t.method("weight!", [](mfem::IntegrationPoint& a, double val) -> double { return a.weight = val; });

    DEBUG_MSG("Adding weight! methods to provide write access to the field weight (" __HERE__ ")");
    t.method("weight!", [](mfem::IntegrationPoint* a, double val) -> double { return a->weight = val; });

    DEBUG_MSG("Adding index methods  to provide read access to the field index (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:29:8
    // signature to use in the veto list: mfem::IntegrationPoint::index
    t.method("index", [](const mfem::IntegrationPoint& a) -> int { return a.index; });
    t.method("index", [](mfem::IntegrationPoint& a) -> int { return a.index; });
    t.method("index", [](const mfem::IntegrationPoint* a) -> int { return a->index; });
    t.method("index", [](mfem::IntegrationPoint* a) -> int { return a->index; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:29:8
    // signature to use in the veto list: mfem::IntegrationPoint::index
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding index! methods to provide write access to the field index (" __HERE__ ")");
    t.method("index!", [](mfem::IntegrationPoint& a, int val) -> int { return a.index = val; });

    DEBUG_MSG("Adding index! methods to provide write access to the field index (" __HERE__ ")");
    t.method("index!", [](mfem::IntegrationPoint* a, int val) -> int { return a->index = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::IntegrationPoint>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_IntegrationPoint(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_IntegrationPoint(module));
}
