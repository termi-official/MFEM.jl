// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::PWConstCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::PWConstCoefficient> : std::false_type { };
template<> struct SuperType<mfem::PWConstCoefficient> { typedef mfem::Coefficient type; };
}

// Class generating the wrapper for type mfem::PWConstCoefficient
// signature to use in the veto file: mfem::PWConstCoefficient
struct Jlmfem_PWConstCoefficient: public Wrapper {

  Jlmfem_PWConstCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::PWConstCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:94:7
    jlcxx::TypeWrapper<mfem::PWConstCoefficient>  t = jlModule.add_type<mfem::PWConstCoefficient>("mfem!PWConstCoefficient",
      jlcxx::julia_base_type<mfem::Coefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::PWConstCoefficient>>(new jlcxx::TypeWrapper<mfem::PWConstCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::PWConstCoefficient::PWConstCoefficient(int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:102:13
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::PWConstCoefficient::PWConstCoefficient(mfem::Vector &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:108:4
    t.constructor<mfem::Vector &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::PWConstCoefficient::UpdateConstants(mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWConstCoefficient::UpdateConstants(mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:112:9
    t.method("UpdateConstants", [](mfem::PWConstCoefficient& a, mfem::Vector & arg0)->void { a.UpdateConstants(arg0); });
    t.method("UpdateConstants", [](mfem::PWConstCoefficient* a, mfem::Vector & arg0)->void { a->UpdateConstants(arg0); });

    DEBUG_MSG("Adding wrapper for double & mfem::PWConstCoefficient::operator()(int) (" __HERE__ ")");
    // signature to use in the veto list: double & mfem::PWConstCoefficient::operator()(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:115:12
    t.method("paren", [](mfem::PWConstCoefficient& a, int arg0)->double & { return a.operator()(arg0); });
    t.method("paren", [](mfem::PWConstCoefficient* a, int arg0)->double & { return a->operator()(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::PWConstCoefficient::operator=(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWConstCoefficient::operator=(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:118:9
    t.method("assign", [](mfem::PWConstCoefficient& a, double arg0)->void { a.operator=(arg0); });
    t.method("assign", [](mfem::PWConstCoefficient* a, double arg0)->void { a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::PWConstCoefficient::GetNConst() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::PWConstCoefficient::GetNConst()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:121:8
    t.method("GetNConst", [](mfem::PWConstCoefficient& a)->int { return a.GetNConst(); });
    t.method("GetNConst", [](mfem::PWConstCoefficient* a)->int { return a->GetNConst(); });

    DEBUG_MSG("Adding wrapper for double mfem::PWConstCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::PWConstCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:124:19
    t.method("Eval", [](mfem::PWConstCoefficient& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a.Eval(arg0, arg1); });
    t.method("Eval", [](mfem::PWConstCoefficient* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a->Eval(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::PWConstCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_PWConstCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_PWConstCoefficient(module));
}
