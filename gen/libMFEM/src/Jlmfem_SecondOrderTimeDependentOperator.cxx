// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::SecondOrderTimeDependentOperator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::SecondOrderTimeDependentOperator> : std::false_type { };
template<> struct SuperType<mfem::SecondOrderTimeDependentOperator> { typedef mfem::TimeDependentOperator type; };
}

// Class generating the wrapper for type mfem::SecondOrderTimeDependentOperator
// signature to use in the veto file: mfem::SecondOrderTimeDependentOperator
struct Jlmfem_SecondOrderTimeDependentOperator: public Wrapper {

  Jlmfem_SecondOrderTimeDependentOperator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::SecondOrderTimeDependentOperator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:603:7
    jlcxx::TypeWrapper<mfem::SecondOrderTimeDependentOperator>  t = jlModule.add_type<mfem::SecondOrderTimeDependentOperator>("mfem!SecondOrderTimeDependentOperator",
      jlcxx::julia_base_type<mfem::TimeDependentOperator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::SecondOrderTimeDependentOperator>>(new jlcxx::TypeWrapper<mfem::SecondOrderTimeDependentOperator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::SecondOrderTimeDependentOperator::SecondOrderTimeDependentOperator(int, double, mfem::TimeDependentOperator::Type) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:608:13
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, double, mfem::TimeDependentOperator::Type>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::SecondOrderTimeDependentOperator::SecondOrderTimeDependentOperator(int, int, double, mfem::TimeDependentOperator::Type) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:614:4
    t.constructor<int, int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, double, mfem::TimeDependentOperator::Type>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::SecondOrderTimeDependentOperator::Mult(const mfem::Vector &, const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SecondOrderTimeDependentOperator::Mult(const mfem::Vector &, const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:623:17
    t.method("Mult", [](mfem::SecondOrderTimeDependentOperator const& a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a.Mult(arg0, arg1, arg2); });
    t.method("Mult", [](mfem::SecondOrderTimeDependentOperator const* a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a->Mult(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SecondOrderTimeDependentOperator::ImplicitSolve(const double, const double, const mfem::Vector &, const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SecondOrderTimeDependentOperator::ImplicitSolve(const double, const double, const mfem::Vector &, const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:642:17
    t.method("ImplicitSolve", [](mfem::SecondOrderTimeDependentOperator& a, const double arg0, const double arg1, const mfem::Vector & arg2, const mfem::Vector & arg3, mfem::Vector & arg4)->void { a.ImplicitSolve(arg0, arg1, arg2, arg3, arg4); });
    t.method("ImplicitSolve", [](mfem::SecondOrderTimeDependentOperator* a, const double arg0, const double arg1, const mfem::Vector & arg2, const mfem::Vector & arg3, mfem::Vector & arg4)->void { a->ImplicitSolve(arg0, arg1, arg2, arg3, arg4); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::SecondOrderTimeDependentOperator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_SecondOrderTimeDependentOperator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_SecondOrderTimeDependentOperator(module));
}
