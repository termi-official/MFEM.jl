// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::IterativeSolverMonitor> : std::false_type { };
  template<> struct DefaultConstructible<mfem::IterativeSolverMonitor> : std::false_type { };
}

// Class generating the wrapper for type mfem::IterativeSolverMonitor
// signature to use in the veto file: mfem::IterativeSolverMonitor
struct Jlmfem_IterativeSolverMonitor: public Wrapper {

  Jlmfem_IterativeSolverMonitor(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::IterativeSolverMonitor (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:36:7
    jlcxx::TypeWrapper<mfem::IterativeSolverMonitor>  t = jlModule.add_type<mfem::IterativeSolverMonitor>("mfem!IterativeSolverMonitor");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::IterativeSolverMonitor>>(new jlcxx::TypeWrapper<mfem::IterativeSolverMonitor>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolverMonitor::MonitorResidual(int, double, const mfem::Vector &, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolverMonitor::MonitorResidual(int, double, const mfem::Vector &, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:48:17
    t.method("MonitorResidual", [](mfem::IterativeSolverMonitor& a, int arg0, double arg1, const mfem::Vector & arg2, bool arg3)->void { a.MonitorResidual(arg0, arg1, arg2, arg3); });
    t.method("MonitorResidual", [](mfem::IterativeSolverMonitor* a, int arg0, double arg1, const mfem::Vector & arg2, bool arg3)->void { a->MonitorResidual(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolverMonitor::MonitorSolution(int, double, const mfem::Vector &, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolverMonitor::MonitorSolution(int, double, const mfem::Vector &, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:54:17
    t.method("MonitorSolution", [](mfem::IterativeSolverMonitor& a, int arg0, double arg1, const mfem::Vector & arg2, bool arg3)->void { a.MonitorSolution(arg0, arg1, arg2, arg3); });
    t.method("MonitorSolution", [](mfem::IterativeSolverMonitor* a, int arg0, double arg1, const mfem::Vector & arg2, bool arg3)->void { a->MonitorSolution(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolverMonitor::SetIterativeSolver(const mfem::IterativeSolver &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolverMonitor::SetIterativeSolver(const mfem::IterativeSolver &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:61:9
    t.method("SetIterativeSolver", [](mfem::IterativeSolverMonitor& a, const mfem::IterativeSolver & arg0)->void { a.SetIterativeSolver(arg0); });
    t.method("SetIterativeSolver", [](mfem::IterativeSolverMonitor* a, const mfem::IterativeSolver & arg0)->void { a->SetIterativeSolver(arg0); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::IterativeSolverMonitor>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_IterativeSolverMonitor(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_IterativeSolverMonitor(module));
}
