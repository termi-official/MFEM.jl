// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::ConstantCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::ConstantCoefficient> : std::false_type { };
template<> struct SuperType<mfem::ConstantCoefficient> { typedef mfem::Coefficient type; };
}

// Class generating the wrapper for type mfem::ConstantCoefficient
// signature to use in the veto file: mfem::ConstantCoefficient
struct Jlmfem_ConstantCoefficient: public Wrapper {

  Jlmfem_ConstantCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::ConstantCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:78:7
    jlcxx::TypeWrapper<mfem::ConstantCoefficient>  t = jlModule.add_type<mfem::ConstantCoefficient>("mfem!ConstantCoefficient",
      jlcxx::julia_base_type<mfem::Coefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::ConstantCoefficient>>(new jlcxx::TypeWrapper<mfem::ConstantCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::ConstantCoefficient::ConstantCoefficient(double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:84:13
    t.constructor<double>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for double mfem::ConstantCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::ConstantCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:87:19
    t.method("Eval", [](mfem::ConstantCoefficient& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a.Eval(arg0, arg1); });
    t.method("Eval", [](mfem::ConstantCoefficient* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a->Eval(arg0, arg1); });

    DEBUG_MSG("Adding constant methods  to provide read access to the field constant (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:81:11
    // signature to use in the veto list: mfem::ConstantCoefficient::constant
    t.method("constant", [](const mfem::ConstantCoefficient& a) -> double { return a.constant; });
    t.method("constant", [](mfem::ConstantCoefficient& a) -> double { return a.constant; });
    t.method("constant", [](const mfem::ConstantCoefficient* a) -> double { return a->constant; });
    t.method("constant", [](mfem::ConstantCoefficient* a) -> double { return a->constant; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:81:11
    // signature to use in the veto list: mfem::ConstantCoefficient::constant
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding constant! methods to provide write access to the field constant (" __HERE__ ")");
    t.method("constant!", [](mfem::ConstantCoefficient& a, double val) -> double { return a.constant = val; });

    DEBUG_MSG("Adding constant! methods to provide write access to the field constant (" __HERE__ ")");
    t.method("constant!", [](mfem::ConstantCoefficient* a, double val) -> double { return a->constant = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::ConstantCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_ConstantCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_ConstantCoefficient(module));
}
