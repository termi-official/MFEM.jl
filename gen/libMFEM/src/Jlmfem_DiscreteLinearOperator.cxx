// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::DiscreteLinearOperator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::DiscreteLinearOperator> : std::false_type { };
template<> struct SuperType<mfem::DiscreteLinearOperator> { typedef mfem::MixedBilinearForm type; };
}

// Class generating the wrapper for type mfem::DiscreteLinearOperator
// signature to use in the veto file: mfem::DiscreteLinearOperator
struct Jlmfem_DiscreteLinearOperator: public Wrapper {

  Jlmfem_DiscreteLinearOperator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::DiscreteLinearOperator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilinearform.hpp:986:7
    jlcxx::TypeWrapper<mfem::DiscreteLinearOperator>  t = jlModule.add_type<mfem::DiscreteLinearOperator>("mfem!DiscreteLinearOperator",
      jlcxx::julia_base_type<mfem::MixedBilinearForm>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::DiscreteLinearOperator>>(new jlcxx::TypeWrapper<mfem::DiscreteLinearOperator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::DiscreteLinearOperator::DiscreteLinearOperator(mfem::FiniteElementSpace *, mfem::FiniteElementSpace *) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilinearform.hpp:1000:4
    t.constructor<mfem::FiniteElementSpace *, mfem::FiniteElementSpace *>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::DiscreteLinearOperator::AddDomainInterpolator(mfem::DiscreteInterpolator *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DiscreteLinearOperator::AddDomainInterpolator(mfem::DiscreteInterpolator *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilinearform.hpp:1005:9
    t.method("AddDomainInterpolator", [](mfem::DiscreteLinearOperator& a, mfem::DiscreteInterpolator * arg0)->void { a.AddDomainInterpolator(arg0); });
    t.method("AddDomainInterpolator", [](mfem::DiscreteLinearOperator* a, mfem::DiscreteInterpolator * arg0)->void { a->AddDomainInterpolator(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::DiscreteLinearOperator::AddTraceFaceInterpolator(mfem::DiscreteInterpolator *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DiscreteLinearOperator::AddTraceFaceInterpolator(mfem::DiscreteInterpolator *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilinearform.hpp:1009:9
    t.method("AddTraceFaceInterpolator", [](mfem::DiscreteLinearOperator& a, mfem::DiscreteInterpolator * arg0)->void { a.AddTraceFaceInterpolator(arg0); });
    t.method("AddTraceFaceInterpolator", [](mfem::DiscreteLinearOperator* a, mfem::DiscreteInterpolator * arg0)->void { a->AddTraceFaceInterpolator(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Array<mfem::BilinearFormIntegrator *> * mfem::DiscreteLinearOperator::GetDI() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Array<mfem::BilinearFormIntegrator *> * mfem::DiscreteLinearOperator::GetDI()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilinearform.hpp:1013:36
    t.method("GetDI", [](mfem::DiscreteLinearOperator& a)->mfem::Array<mfem::BilinearFormIntegrator *> * { return a.GetDI(); });
    t.method("GetDI", [](mfem::DiscreteLinearOperator* a)->mfem::Array<mfem::BilinearFormIntegrator *> * { return a->GetDI(); });

    DEBUG_MSG("Adding wrapper for void mfem::DiscreteLinearOperator::SetAssemblyLevel(mfem::AssemblyLevel) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DiscreteLinearOperator::SetAssemblyLevel(mfem::AssemblyLevel)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilinearform.hpp:1017:9
    t.method("SetAssemblyLevel", [](mfem::DiscreteLinearOperator& a, mfem::AssemblyLevel arg0)->void { a.SetAssemblyLevel(arg0); });
    t.method("SetAssemblyLevel", [](mfem::DiscreteLinearOperator* a, mfem::AssemblyLevel arg0)->void { a->SetAssemblyLevel(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::DiscreteLinearOperator::Assemble(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DiscreteLinearOperator::Assemble(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilinearform.hpp:1021:17
    t.method("Assemble", [](mfem::DiscreteLinearOperator& a)->void { a.Assemble(); });
    t.method("Assemble", [](mfem::DiscreteLinearOperator& a, int arg0)->void { a.Assemble(arg0); });
    t.method("Assemble", [](mfem::DiscreteLinearOperator* a)->void { a->Assemble(); });
    t.method("Assemble", [](mfem::DiscreteLinearOperator* a, int arg0)->void { a->Assemble(arg0); });

    DEBUG_MSG("Adding wrapper for const mfem::Operator * mfem::DiscreteLinearOperator::GetOutputRestrictionTranspose() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Operator * mfem::DiscreteLinearOperator::GetOutputRestrictionTranspose()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilinearform.hpp:1025:28
    t.method("GetOutputRestrictionTranspose", [](mfem::DiscreteLinearOperator const& a)->const mfem::Operator * { return a.GetOutputRestrictionTranspose(); });
    t.method("GetOutputRestrictionTranspose", [](mfem::DiscreteLinearOperator const* a)->const mfem::Operator * { return a->GetOutputRestrictionTranspose(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::DiscreteLinearOperator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_DiscreteLinearOperator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_DiscreteLinearOperator(module));
}
