// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::SparseMatrix> : std::false_type { };
  template<> struct DefaultConstructible<mfem::SparseMatrix> : std::false_type { };
template<> struct SuperType<mfem::SparseMatrix> { typedef mfem::AbstractSparseMatrix type; };
}

// Class generating the wrapper for type mfem::SparseMatrix
// signature to use in the veto file: mfem::SparseMatrix
struct Jlmfem_SparseMatrix: public Wrapper {

  Jlmfem_SparseMatrix(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::SparseMatrix (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:46:7
    jlcxx::TypeWrapper<mfem::SparseMatrix>  t = jlModule.add_type<mfem::SparseMatrix>("mfem!SparseMatrix",
      jlcxx::julia_base_type<mfem::AbstractSparseMatrix>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::SparseMatrix>>(new jlcxx::TypeWrapper<mfem::SparseMatrix>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SparseMatrix(int, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:139:13
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SparseMatrix(int *, int *, double *, int, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:143:4
    t.constructor<int *, int *, double *, int, int>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SparseMatrix(int *, int *, double *, int, int, bool, bool, bool) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:150:4
    t.constructor<int *, int *, double *, int, int, bool, bool, bool>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SparseMatrix(int, int, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:157:4
    t.constructor<int, int, int>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SparseMatrix(const mfem::SparseMatrix &, bool, mfem::MemoryType) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:167:4
    t.constructor<const mfem::SparseMatrix &>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const mfem::SparseMatrix &, bool>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const mfem::SparseMatrix &, bool, mfem::MemoryType>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SparseMatrix(const mfem::Vector &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:171:4
    t.constructor<const mfem::Vector &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::UseGPUSparse(bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::UseGPUSparse(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:178:9
    t.method("UseGPUSparse", [](mfem::SparseMatrix& a)->void { a.UseGPUSparse(); });
    t.method("UseGPUSparse", [](mfem::SparseMatrix& a, bool arg0)->void { a.UseGPUSparse(arg0); });
    t.method("UseGPUSparse", [](mfem::SparseMatrix* a)->void { a->UseGPUSparse(); });
    t.method("UseGPUSparse", [](mfem::SparseMatrix* a, bool arg0)->void { a->UseGPUSparse(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::SparseMatrix & mfem::SparseMatrix::operator=(const mfem::SparseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: mfem::SparseMatrix & mfem::SparseMatrix::operator=(const mfem::SparseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:184:18
    t.method("assign", [](mfem::SparseMatrix& a, const mfem::SparseMatrix & arg0)->mfem::SparseMatrix & { return a.operator=(arg0); });
    t.method("assign", [](mfem::SparseMatrix* a, const mfem::SparseMatrix & arg0)->mfem::SparseMatrix & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::MakeRef(const mfem::SparseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::MakeRef(const mfem::SparseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:190:9
    t.method("MakeRef", [](mfem::SparseMatrix& a, const mfem::SparseMatrix & arg0)->void { a.MakeRef(arg0); });
    t.method("MakeRef", [](mfem::SparseMatrix* a, const mfem::SparseMatrix & arg0)->void { a->MakeRef(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::SparseMatrix::Size() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::SparseMatrix::Size()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:193:8
    t.method("Size", [](mfem::SparseMatrix const& a)->int { return a.Size(); });
    t.method("Size", [](mfem::SparseMatrix const* a)->int { return a->Size(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Clear()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:196:9
    t.method("Clear", [](mfem::SparseMatrix& a)->void { a.Clear(); });
    t.method("Clear", [](mfem::SparseMatrix* a)->void { a->Clear(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::ClearGPUSparse() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::ClearGPUSparse()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:200:9
    t.method("ClearGPUSparse", [](mfem::SparseMatrix& a)->void { a.ClearGPUSparse(); });
    t.method("ClearGPUSparse", [](mfem::SparseMatrix* a)->void { a->ClearGPUSparse(); });

    DEBUG_MSG("Adding wrapper for bool mfem::SparseMatrix::Empty() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::SparseMatrix::Empty()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:206:9
    t.method("Empty", [](mfem::SparseMatrix const& a)->bool { return a.Empty(); });
    t.method("Empty", [](mfem::SparseMatrix const* a)->bool { return a->Empty(); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::GetI() (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::GetI()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:209:16
    t.method("GetI", [](mfem::SparseMatrix& a)->int * { return a.GetI(); });
    t.method("GetI", [](mfem::SparseMatrix* a)->int * { return a->GetI(); });

    DEBUG_MSG("Adding wrapper for const int * mfem::SparseMatrix::GetI() (" __HERE__ ")");
    // signature to use in the veto list: const int * mfem::SparseMatrix::GetI()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:211:22
    t.method("GetI", [](mfem::SparseMatrix const& a)->const int * { return a.GetI(); });
    t.method("GetI", [](mfem::SparseMatrix const* a)->const int * { return a->GetI(); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::GetJ() (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::GetJ()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:214:16
    t.method("GetJ", [](mfem::SparseMatrix& a)->int * { return a.GetJ(); });
    t.method("GetJ", [](mfem::SparseMatrix* a)->int * { return a->GetJ(); });

    DEBUG_MSG("Adding wrapper for const int * mfem::SparseMatrix::GetJ() (" __HERE__ ")");
    // signature to use in the veto list: const int * mfem::SparseMatrix::GetJ()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:216:22
    t.method("GetJ", [](mfem::SparseMatrix const& a)->const int * { return a.GetJ(); });
    t.method("GetJ", [](mfem::SparseMatrix const* a)->const int * { return a->GetJ(); });

    DEBUG_MSG("Adding wrapper for double * mfem::SparseMatrix::GetData() (" __HERE__ ")");
    // signature to use in the veto list: double * mfem::SparseMatrix::GetData()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:219:19
    t.method("GetData", [](mfem::SparseMatrix& a)->double * { return a.GetData(); });
    t.method("GetData", [](mfem::SparseMatrix* a)->double * { return a->GetData(); });

    DEBUG_MSG("Adding wrapper for const double * mfem::SparseMatrix::GetData() (" __HERE__ ")");
    // signature to use in the veto list: const double * mfem::SparseMatrix::GetData()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:221:25
    t.method("GetData", [](mfem::SparseMatrix const& a)->const double * { return a.GetData(); });
    t.method("GetData", [](mfem::SparseMatrix const* a)->const double * { return a->GetData(); });

    DEBUG_MSG("Adding wrapper for mfem::Memory<int> & mfem::SparseMatrix::GetMemoryI() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Memory<int> & mfem::SparseMatrix::GetMemoryI()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:224:17
    t.method("GetMemoryI", [](mfem::SparseMatrix& a)->mfem::Memory<int> & { return a.GetMemoryI(); });
    t.method("GetMemoryI", [](mfem::SparseMatrix* a)->mfem::Memory<int> & { return a->GetMemoryI(); });

    DEBUG_MSG("Adding wrapper for const mfem::Memory<int> & mfem::SparseMatrix::GetMemoryI() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Memory<int> & mfem::SparseMatrix::GetMemoryI()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:225:23
    t.method("GetMemoryI", [](mfem::SparseMatrix const& a)->const mfem::Memory<int> & { return a.GetMemoryI(); });
    t.method("GetMemoryI", [](mfem::SparseMatrix const* a)->const mfem::Memory<int> & { return a->GetMemoryI(); });

    DEBUG_MSG("Adding wrapper for const int * mfem::SparseMatrix::ReadI(bool) (" __HERE__ ")");
    // signature to use in the veto list: const int * mfem::SparseMatrix::ReadI(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:226:15
    t.method("ReadI", [](mfem::SparseMatrix const& a)->const int * { return a.ReadI(); });
    t.method("ReadI", [](mfem::SparseMatrix const& a, bool arg0)->const int * { return a.ReadI(arg0); });
    t.method("ReadI", [](mfem::SparseMatrix const* a)->const int * { return a->ReadI(); });
    t.method("ReadI", [](mfem::SparseMatrix const* a, bool arg0)->const int * { return a->ReadI(arg0); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::WriteI(bool) (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::WriteI(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:228:9
    t.method("WriteI", [](mfem::SparseMatrix& a)->int * { return a.WriteI(); });
    t.method("WriteI", [](mfem::SparseMatrix& a, bool arg0)->int * { return a.WriteI(arg0); });
    t.method("WriteI", [](mfem::SparseMatrix* a)->int * { return a->WriteI(); });
    t.method("WriteI", [](mfem::SparseMatrix* a, bool arg0)->int * { return a->WriteI(arg0); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::ReadWriteI(bool) (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::ReadWriteI(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:230:9
    t.method("ReadWriteI", [](mfem::SparseMatrix& a)->int * { return a.ReadWriteI(); });
    t.method("ReadWriteI", [](mfem::SparseMatrix& a, bool arg0)->int * { return a.ReadWriteI(arg0); });
    t.method("ReadWriteI", [](mfem::SparseMatrix* a)->int * { return a->ReadWriteI(); });
    t.method("ReadWriteI", [](mfem::SparseMatrix* a, bool arg0)->int * { return a->ReadWriteI(arg0); });

    DEBUG_MSG("Adding wrapper for const int * mfem::SparseMatrix::HostReadI() (" __HERE__ ")");
    // signature to use in the veto list: const int * mfem::SparseMatrix::HostReadI()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:232:15
    t.method("HostReadI", [](mfem::SparseMatrix const& a)->const int * { return a.HostReadI(); });
    t.method("HostReadI", [](mfem::SparseMatrix const* a)->const int * { return a->HostReadI(); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::HostWriteI() (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::HostWriteI()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:234:9
    t.method("HostWriteI", [](mfem::SparseMatrix& a)->int * { return a.HostWriteI(); });
    t.method("HostWriteI", [](mfem::SparseMatrix* a)->int * { return a->HostWriteI(); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::HostReadWriteI() (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::HostReadWriteI()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:236:9
    t.method("HostReadWriteI", [](mfem::SparseMatrix& a)->int * { return a.HostReadWriteI(); });
    t.method("HostReadWriteI", [](mfem::SparseMatrix* a)->int * { return a->HostReadWriteI(); });

    DEBUG_MSG("Adding wrapper for mfem::Memory<int> & mfem::SparseMatrix::GetMemoryJ() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Memory<int> & mfem::SparseMatrix::GetMemoryJ()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:240:17
    t.method("GetMemoryJ", [](mfem::SparseMatrix& a)->mfem::Memory<int> & { return a.GetMemoryJ(); });
    t.method("GetMemoryJ", [](mfem::SparseMatrix* a)->mfem::Memory<int> & { return a->GetMemoryJ(); });

    DEBUG_MSG("Adding wrapper for const mfem::Memory<int> & mfem::SparseMatrix::GetMemoryJ() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Memory<int> & mfem::SparseMatrix::GetMemoryJ()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:241:23
    t.method("GetMemoryJ", [](mfem::SparseMatrix const& a)->const mfem::Memory<int> & { return a.GetMemoryJ(); });
    t.method("GetMemoryJ", [](mfem::SparseMatrix const* a)->const mfem::Memory<int> & { return a->GetMemoryJ(); });

    DEBUG_MSG("Adding wrapper for const int * mfem::SparseMatrix::ReadJ(bool) (" __HERE__ ")");
    // signature to use in the veto list: const int * mfem::SparseMatrix::ReadJ(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:242:15
    t.method("ReadJ", [](mfem::SparseMatrix const& a)->const int * { return a.ReadJ(); });
    t.method("ReadJ", [](mfem::SparseMatrix const& a, bool arg0)->const int * { return a.ReadJ(arg0); });
    t.method("ReadJ", [](mfem::SparseMatrix const* a)->const int * { return a->ReadJ(); });
    t.method("ReadJ", [](mfem::SparseMatrix const* a, bool arg0)->const int * { return a->ReadJ(arg0); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::WriteJ(bool) (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::WriteJ(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:244:9
    t.method("WriteJ", [](mfem::SparseMatrix& a)->int * { return a.WriteJ(); });
    t.method("WriteJ", [](mfem::SparseMatrix& a, bool arg0)->int * { return a.WriteJ(arg0); });
    t.method("WriteJ", [](mfem::SparseMatrix* a)->int * { return a->WriteJ(); });
    t.method("WriteJ", [](mfem::SparseMatrix* a, bool arg0)->int * { return a->WriteJ(arg0); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::ReadWriteJ(bool) (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::ReadWriteJ(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:246:9
    t.method("ReadWriteJ", [](mfem::SparseMatrix& a)->int * { return a.ReadWriteJ(); });
    t.method("ReadWriteJ", [](mfem::SparseMatrix& a, bool arg0)->int * { return a.ReadWriteJ(arg0); });
    t.method("ReadWriteJ", [](mfem::SparseMatrix* a)->int * { return a->ReadWriteJ(); });
    t.method("ReadWriteJ", [](mfem::SparseMatrix* a, bool arg0)->int * { return a->ReadWriteJ(arg0); });

    DEBUG_MSG("Adding wrapper for const int * mfem::SparseMatrix::HostReadJ() (" __HERE__ ")");
    // signature to use in the veto list: const int * mfem::SparseMatrix::HostReadJ()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:248:15
    t.method("HostReadJ", [](mfem::SparseMatrix const& a)->const int * { return a.HostReadJ(); });
    t.method("HostReadJ", [](mfem::SparseMatrix const* a)->const int * { return a->HostReadJ(); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::HostWriteJ() (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::HostWriteJ()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:250:9
    t.method("HostWriteJ", [](mfem::SparseMatrix& a)->int * { return a.HostWriteJ(); });
    t.method("HostWriteJ", [](mfem::SparseMatrix* a)->int * { return a->HostWriteJ(); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::HostReadWriteJ() (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::HostReadWriteJ()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:252:9
    t.method("HostReadWriteJ", [](mfem::SparseMatrix& a)->int * { return a.HostReadWriteJ(); });
    t.method("HostReadWriteJ", [](mfem::SparseMatrix* a)->int * { return a->HostReadWriteJ(); });

    DEBUG_MSG("Adding wrapper for mfem::Memory<double> & mfem::SparseMatrix::GetMemoryData() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Memory<double> & mfem::SparseMatrix::GetMemoryData()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:256:20
    t.method("GetMemoryData", [](mfem::SparseMatrix& a)->mfem::Memory<double> & { return a.GetMemoryData(); });
    t.method("GetMemoryData", [](mfem::SparseMatrix* a)->mfem::Memory<double> & { return a->GetMemoryData(); });

    DEBUG_MSG("Adding wrapper for const mfem::Memory<double> & mfem::SparseMatrix::GetMemoryData() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Memory<double> & mfem::SparseMatrix::GetMemoryData()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:257:26
    t.method("GetMemoryData", [](mfem::SparseMatrix const& a)->const mfem::Memory<double> & { return a.GetMemoryData(); });
    t.method("GetMemoryData", [](mfem::SparseMatrix const* a)->const mfem::Memory<double> & { return a->GetMemoryData(); });

    DEBUG_MSG("Adding wrapper for const double * mfem::SparseMatrix::ReadData(bool) (" __HERE__ ")");
    // signature to use in the veto list: const double * mfem::SparseMatrix::ReadData(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:258:18
    t.method("ReadData", [](mfem::SparseMatrix const& a)->const double * { return a.ReadData(); });
    t.method("ReadData", [](mfem::SparseMatrix const& a, bool arg0)->const double * { return a.ReadData(arg0); });
    t.method("ReadData", [](mfem::SparseMatrix const* a)->const double * { return a->ReadData(); });
    t.method("ReadData", [](mfem::SparseMatrix const* a, bool arg0)->const double * { return a->ReadData(arg0); });

    DEBUG_MSG("Adding wrapper for double * mfem::SparseMatrix::WriteData(bool) (" __HERE__ ")");
    // signature to use in the veto list: double * mfem::SparseMatrix::WriteData(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:260:12
    t.method("WriteData", [](mfem::SparseMatrix& a)->double * { return a.WriteData(); });
    t.method("WriteData", [](mfem::SparseMatrix& a, bool arg0)->double * { return a.WriteData(arg0); });
    t.method("WriteData", [](mfem::SparseMatrix* a)->double * { return a->WriteData(); });
    t.method("WriteData", [](mfem::SparseMatrix* a, bool arg0)->double * { return a->WriteData(arg0); });

    DEBUG_MSG("Adding wrapper for double * mfem::SparseMatrix::ReadWriteData(bool) (" __HERE__ ")");
    // signature to use in the veto list: double * mfem::SparseMatrix::ReadWriteData(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:262:12
    t.method("ReadWriteData", [](mfem::SparseMatrix& a)->double * { return a.ReadWriteData(); });
    t.method("ReadWriteData", [](mfem::SparseMatrix& a, bool arg0)->double * { return a.ReadWriteData(arg0); });
    t.method("ReadWriteData", [](mfem::SparseMatrix* a)->double * { return a->ReadWriteData(); });
    t.method("ReadWriteData", [](mfem::SparseMatrix* a, bool arg0)->double * { return a->ReadWriteData(arg0); });

    DEBUG_MSG("Adding wrapper for const double * mfem::SparseMatrix::HostReadData() (" __HERE__ ")");
    // signature to use in the veto list: const double * mfem::SparseMatrix::HostReadData()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:264:18
    t.method("HostReadData", [](mfem::SparseMatrix const& a)->const double * { return a.HostReadData(); });
    t.method("HostReadData", [](mfem::SparseMatrix const* a)->const double * { return a->HostReadData(); });

    DEBUG_MSG("Adding wrapper for double * mfem::SparseMatrix::HostWriteData() (" __HERE__ ")");
    // signature to use in the veto list: double * mfem::SparseMatrix::HostWriteData()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:266:12
    t.method("HostWriteData", [](mfem::SparseMatrix& a)->double * { return a.HostWriteData(); });
    t.method("HostWriteData", [](mfem::SparseMatrix* a)->double * { return a->HostWriteData(); });

    DEBUG_MSG("Adding wrapper for double * mfem::SparseMatrix::HostReadWriteData() (" __HERE__ ")");
    // signature to use in the veto list: double * mfem::SparseMatrix::HostReadWriteData()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:268:12
    t.method("HostReadWriteData", [](mfem::SparseMatrix& a)->double * { return a.HostReadWriteData(); });
    t.method("HostReadWriteData", [](mfem::SparseMatrix* a)->double * { return a->HostReadWriteData(); });

    DEBUG_MSG("Adding wrapper for int mfem::SparseMatrix::RowSize(const int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::SparseMatrix::RowSize(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:272:8
    t.method("RowSize", [](mfem::SparseMatrix const& a, const int arg0)->int { return a.RowSize(arg0); });
    t.method("RowSize", [](mfem::SparseMatrix const* a, const int arg0)->int { return a->RowSize(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::SparseMatrix::MaxRowSize() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::SparseMatrix::MaxRowSize()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:275:8
    t.method("MaxRowSize", [](mfem::SparseMatrix const& a)->int { return a.MaxRowSize(); });
    t.method("MaxRowSize", [](mfem::SparseMatrix const* a)->int { return a->MaxRowSize(); });

    DEBUG_MSG("Adding wrapper for int * mfem::SparseMatrix::GetRowColumns(const int) (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::SparseMatrix::GetRowColumns(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:278:9
    t.method("GetRowColumns", [](mfem::SparseMatrix& a, const int arg0)->int * { return a.GetRowColumns(arg0); });
    t.method("GetRowColumns", [](mfem::SparseMatrix* a, const int arg0)->int * { return a->GetRowColumns(arg0); });

    DEBUG_MSG("Adding wrapper for const int * mfem::SparseMatrix::GetRowColumns(const int) (" __HERE__ ")");
    // signature to use in the veto list: const int * mfem::SparseMatrix::GetRowColumns(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:280:15
    t.method("GetRowColumns", [](mfem::SparseMatrix const& a, const int arg0)->const int * { return a.GetRowColumns(arg0); });
    t.method("GetRowColumns", [](mfem::SparseMatrix const* a, const int arg0)->const int * { return a->GetRowColumns(arg0); });

    DEBUG_MSG("Adding wrapper for double * mfem::SparseMatrix::GetRowEntries(const int) (" __HERE__ ")");
    // signature to use in the veto list: double * mfem::SparseMatrix::GetRowEntries(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:283:12
    t.method("GetRowEntries", [](mfem::SparseMatrix& a, const int arg0)->double * { return a.GetRowEntries(arg0); });
    t.method("GetRowEntries", [](mfem::SparseMatrix* a, const int arg0)->double * { return a->GetRowEntries(arg0); });

    DEBUG_MSG("Adding wrapper for const double * mfem::SparseMatrix::GetRowEntries(const int) (" __HERE__ ")");
    // signature to use in the veto list: const double * mfem::SparseMatrix::GetRowEntries(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:285:18
    t.method("GetRowEntries", [](mfem::SparseMatrix const& a, const int arg0)->const double * { return a.GetRowEntries(arg0); });
    t.method("GetRowEntries", [](mfem::SparseMatrix const* a, const int arg0)->const double * { return a->GetRowEntries(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SetWidth(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::SetWidth(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:295:9
    t.method("SetWidth", [](mfem::SparseMatrix& a)->void { a.SetWidth(); });
    t.method("SetWidth", [](mfem::SparseMatrix& a, int arg0)->void { a.SetWidth(arg0); });
    t.method("SetWidth", [](mfem::SparseMatrix* a)->void { a->SetWidth(); });
    t.method("SetWidth", [](mfem::SparseMatrix* a, int arg0)->void { a->SetWidth(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::SparseMatrix::ActualWidth() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::SparseMatrix::ActualWidth()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:299:8
    t.method("ActualWidth", [](mfem::SparseMatrix const& a)->int { return a.ActualWidth(); });
    t.method("ActualWidth", [](mfem::SparseMatrix const* a)->int { return a->ActualWidth(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SortColumnIndices() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::SortColumnIndices()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:302:9
    t.method("SortColumnIndices", [](mfem::SparseMatrix& a)->void { a.SortColumnIndices(); });
    t.method("SortColumnIndices", [](mfem::SparseMatrix* a)->void { a->SortColumnIndices(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::MoveDiagonalFirst() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::MoveDiagonalFirst()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:306:9
    t.method("MoveDiagonalFirst", [](mfem::SparseMatrix& a)->void { a.MoveDiagonalFirst(); });
    t.method("MoveDiagonalFirst", [](mfem::SparseMatrix* a)->void { a->MoveDiagonalFirst(); });

    DEBUG_MSG("Adding wrapper for double & mfem::SparseMatrix::Elem(int, int) (" __HERE__ ")");
    // signature to use in the veto list: double & mfem::SparseMatrix::Elem(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:309:20
    t.method("Elem", [](mfem::SparseMatrix& a, int arg0, int arg1)->double & { return a.Elem(arg0, arg1); });
    t.method("Elem", [](mfem::SparseMatrix* a, int arg0, int arg1)->double & { return a->Elem(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for const double & mfem::SparseMatrix::Elem(int, int) (" __HERE__ ")");
    // signature to use in the veto list: const double & mfem::SparseMatrix::Elem(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:312:26
    t.method("Elem", [](mfem::SparseMatrix const& a, int arg0, int arg1)->const double & { return a.Elem(arg0, arg1); });
    t.method("Elem", [](mfem::SparseMatrix const* a, int arg0, int arg1)->const double & { return a->Elem(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double & mfem::SparseMatrix::operator()(int, int) (" __HERE__ ")");
    // signature to use in the veto list: double & mfem::SparseMatrix::operator()(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:315:12
    t.method("paren", [](mfem::SparseMatrix& a, int arg0, int arg1)->double & { return a.operator()(arg0, arg1); });
    t.method("paren", [](mfem::SparseMatrix* a, int arg0, int arg1)->double & { return a->operator()(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for const double & mfem::SparseMatrix::operator()(int, int) (" __HERE__ ")");
    // signature to use in the veto list: const double & mfem::SparseMatrix::operator()(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:318:18
    t.method("paren", [](mfem::SparseMatrix const& a, int arg0, int arg1)->const double & { return a.operator()(arg0, arg1); });
    t.method("paren", [](mfem::SparseMatrix const* a, int arg0, int arg1)->const double & { return a->operator()(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::GetDiag(mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::GetDiag(mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:321:9
    t.method("GetDiag", [](mfem::SparseMatrix const& a, mfem::Vector & arg0)->void { a.GetDiag(arg0); });
    t.method("GetDiag", [](mfem::SparseMatrix const* a, mfem::Vector & arg0)->void { a->GetDiag(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::DenseMatrix * mfem::SparseMatrix::ToDenseMatrix() (" __HERE__ ")");
    // signature to use in the veto list: mfem::DenseMatrix * mfem::SparseMatrix::ToDenseMatrix()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:324:17
    t.method("ToDenseMatrix", [](mfem::SparseMatrix const& a)->mfem::DenseMatrix * { return a.ToDenseMatrix(); });
    t.method("ToDenseMatrix", [](mfem::SparseMatrix const* a)->mfem::DenseMatrix * { return a->ToDenseMatrix(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::ToDenseMatrix(mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::ToDenseMatrix(mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:327:9
    t.method("ToDenseMatrix", [](mfem::SparseMatrix const& a, mfem::DenseMatrix & arg0)->void { a.ToDenseMatrix(arg0); });
    t.method("ToDenseMatrix", [](mfem::SparseMatrix const* a, mfem::DenseMatrix & arg0)->void { a->ToDenseMatrix(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::MemoryClass mfem::SparseMatrix::GetMemoryClass() (" __HERE__ ")");
    // signature to use in the veto list: mfem::MemoryClass mfem::SparseMatrix::GetMemoryClass()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:329:24
    t.method("GetMemoryClass", [](mfem::SparseMatrix const& a)->mfem::MemoryClass { return a.GetMemoryClass(); });
    t.method("GetMemoryClass", [](mfem::SparseMatrix const* a)->mfem::MemoryClass { return a->GetMemoryClass(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Mult(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Mult(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:336:17
    t.method("Mult", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.Mult(arg0, arg1); });
    t.method("Mult", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->Mult(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::AddMult(const mfem::Vector &, mfem::Vector &, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::AddMult(const mfem::Vector &, mfem::Vector &, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:339:9
    t.method("AddMult", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMult(arg0, arg1); });
    t.method("AddMult", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1, const double arg2)->void { a.AddMult(arg0, arg1, arg2); });
    t.method("AddMult", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMult(arg0, arg1); });
    t.method("AddMult", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1, const double arg2)->void { a->AddMult(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::MultTranspose(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::MultTranspose(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:342:9
    t.method("MultTranspose", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.MultTranspose(arg0, arg1); });
    t.method("MultTranspose", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->MultTranspose(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::AddMultTranspose(const mfem::Vector &, mfem::Vector &, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::AddMultTranspose(const mfem::Vector &, mfem::Vector &, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:345:9
    t.method("AddMultTranspose", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultTranspose(arg0, arg1); });
    t.method("AddMultTranspose", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1, const double arg2)->void { a.AddMultTranspose(arg0, arg1, arg2); });
    t.method("AddMultTranspose", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultTranspose(arg0, arg1); });
    t.method("AddMultTranspose", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1, const double arg2)->void { a->AddMultTranspose(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::BuildTranspose() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::BuildTranspose()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:370:9
    t.method("BuildTranspose", [](mfem::SparseMatrix const& a)->void { a.BuildTranspose(); });
    t.method("BuildTranspose", [](mfem::SparseMatrix const* a)->void { a->BuildTranspose(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::ResetTranspose() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::ResetTranspose()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:374:9
    t.method("ResetTranspose", [](mfem::SparseMatrix const& a)->void { a.ResetTranspose(); });
    t.method("ResetTranspose", [](mfem::SparseMatrix const* a)->void { a->ResetTranspose(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EnsureMultTranspose() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EnsureMultTranspose()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:386:9
    t.method("EnsureMultTranspose", [](mfem::SparseMatrix const& a)->void { a.EnsureMultTranspose(); });
    t.method("EnsureMultTranspose", [](mfem::SparseMatrix const* a)->void { a->EnsureMultTranspose(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::PartMult(const mfem::Array<int> &, const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::PartMult(const mfem::Array<int> &, const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:388:9
    t.method("PartMult", [](mfem::SparseMatrix const& a, const mfem::Array<int> & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a.PartMult(arg0, arg1, arg2); });
    t.method("PartMult", [](mfem::SparseMatrix const* a, const mfem::Array<int> & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a->PartMult(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::PartAddMult(const mfem::Array<int> &, const mfem::Vector &, mfem::Vector &, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::PartAddMult(const mfem::Array<int> &, const mfem::Vector &, mfem::Vector &, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:389:9
    t.method("PartAddMult", [](mfem::SparseMatrix const& a, const mfem::Array<int> & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a.PartAddMult(arg0, arg1, arg2); });
    t.method("PartAddMult", [](mfem::SparseMatrix const& a, const mfem::Array<int> & arg0, const mfem::Vector & arg1, mfem::Vector & arg2, const double arg3)->void { a.PartAddMult(arg0, arg1, arg2, arg3); });
    t.method("PartAddMult", [](mfem::SparseMatrix const* a, const mfem::Array<int> & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a->PartAddMult(arg0, arg1, arg2); });
    t.method("PartAddMult", [](mfem::SparseMatrix const* a, const mfem::Array<int> & arg0, const mfem::Vector & arg1, mfem::Vector & arg2, const double arg3)->void { a->PartAddMult(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::BooleanMult(const mfem::Array<int> &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::BooleanMult(const mfem::Array<int> &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:396:9
    t.method("BooleanMult", [](mfem::SparseMatrix const& a, const mfem::Array<int> & arg0, mfem::Array<int> & arg1)->void { a.BooleanMult(arg0, arg1); });
    t.method("BooleanMult", [](mfem::SparseMatrix const* a, const mfem::Array<int> & arg0, mfem::Array<int> & arg1)->void { a->BooleanMult(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::BooleanMultTranspose(const mfem::Array<int> &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::BooleanMultTranspose(const mfem::Array<int> &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:402:9
    t.method("BooleanMultTranspose", [](mfem::SparseMatrix const& a, const mfem::Array<int> & arg0, mfem::Array<int> & arg1)->void { a.BooleanMultTranspose(arg0, arg1); });
    t.method("BooleanMultTranspose", [](mfem::SparseMatrix const* a, const mfem::Array<int> & arg0, mfem::Array<int> & arg1)->void { a->BooleanMultTranspose(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::AbsMult(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::AbsMult(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:405:9
    t.method("AbsMult", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AbsMult(arg0, arg1); });
    t.method("AbsMult", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AbsMult(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::AbsMultTranspose(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::AbsMultTranspose(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:408:9
    t.method("AbsMultTranspose", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AbsMultTranspose(arg0, arg1); });
    t.method("AbsMultTranspose", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AbsMultTranspose(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double mfem::SparseMatrix::InnerProduct(const mfem::Vector &, const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::SparseMatrix::InnerProduct(const mfem::Vector &, const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:411:11
    t.method("InnerProduct", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, const mfem::Vector & arg1)->double { return a.InnerProduct(arg0, arg1); });
    t.method("InnerProduct", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, const mfem::Vector & arg1)->double { return a->InnerProduct(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::GetRowSums(mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::GetRowSums(mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:414:9
    t.method("GetRowSums", [](mfem::SparseMatrix const& a, mfem::Vector & arg0)->void { a.GetRowSums(arg0); });
    t.method("GetRowSums", [](mfem::SparseMatrix const* a, mfem::Vector & arg0)->void { a->GetRowSums(arg0); });

    DEBUG_MSG("Adding wrapper for double mfem::SparseMatrix::GetRowNorml1(int) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::SparseMatrix::GetRowNorml1(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:416:11
    t.method("GetRowNorml1", [](mfem::SparseMatrix const& a, int arg0)->double { return a.GetRowNorml1(arg0); });
    t.method("GetRowNorml1", [](mfem::SparseMatrix const* a, int arg0)->double { return a->GetRowNorml1(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::MatrixInverse * mfem::SparseMatrix::Inverse() (" __HERE__ ")");
    // signature to use in the veto list: mfem::MatrixInverse * mfem::SparseMatrix::Inverse()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:419:27
    t.method("Inverse", [](mfem::SparseMatrix const& a)->mfem::MatrixInverse * { return a.Inverse(); });
    t.method("Inverse", [](mfem::SparseMatrix const* a)->mfem::MatrixInverse * { return a->Inverse(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateRow(int, const double, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateRow(int, const double, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:422:9
    t.method("EliminateRow", [](mfem::SparseMatrix& a, int arg0, const double arg1, mfem::Vector & arg2)->void { a.EliminateRow(arg0, arg1, arg2); });
    t.method("EliminateRow", [](mfem::SparseMatrix* a, int arg0, const double arg1, mfem::Vector & arg2)->void { a->EliminateRow(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateRow(int, mfem::Operator::DiagonalPolicy) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateRow(int, mfem::Operator::DiagonalPolicy)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:431:9
    t.method("EliminateRow", [](mfem::SparseMatrix& a, int arg0)->void { a.EliminateRow(arg0); });
    t.method("EliminateRow", [](mfem::SparseMatrix& a, int arg0, mfem::Operator::DiagonalPolicy arg1)->void { a.EliminateRow(arg0, arg1); });
    t.method("EliminateRow", [](mfem::SparseMatrix* a, int arg0)->void { a->EliminateRow(arg0); });
    t.method("EliminateRow", [](mfem::SparseMatrix* a, int arg0, mfem::Operator::DiagonalPolicy arg1)->void { a->EliminateRow(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateCol(int, mfem::Operator::DiagonalPolicy) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateCol(int, mfem::Operator::DiagonalPolicy)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:438:9
    t.method("EliminateCol", [](mfem::SparseMatrix& a, int arg0)->void { a.EliminateCol(arg0); });
    t.method("EliminateCol", [](mfem::SparseMatrix& a, int arg0, mfem::Operator::DiagonalPolicy arg1)->void { a.EliminateCol(arg0, arg1); });
    t.method("EliminateCol", [](mfem::SparseMatrix* a, int arg0)->void { a->EliminateCol(arg0); });
    t.method("EliminateCol", [](mfem::SparseMatrix* a, int arg0, mfem::Operator::DiagonalPolicy arg1)->void { a->EliminateCol(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateCols(const mfem::Array<int> &, const mfem::Vector *, mfem::Vector *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateCols(const mfem::Array<int> &, const mfem::Vector *, mfem::Vector *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:445:9
    t.method("EliminateCols", [](mfem::SparseMatrix& a, const mfem::Array<int> & arg0)->void { a.EliminateCols(arg0); });
    t.method("EliminateCols", [](mfem::SparseMatrix& a, const mfem::Array<int> & arg0, const mfem::Vector * arg1)->void { a.EliminateCols(arg0, arg1); });
    t.method("EliminateCols", [](mfem::SparseMatrix& a, const mfem::Array<int> & arg0, const mfem::Vector * arg1, mfem::Vector * arg2)->void { a.EliminateCols(arg0, arg1, arg2); });
    t.method("EliminateCols", [](mfem::SparseMatrix* a, const mfem::Array<int> & arg0)->void { a->EliminateCols(arg0); });
    t.method("EliminateCols", [](mfem::SparseMatrix* a, const mfem::Array<int> & arg0, const mfem::Vector * arg1)->void { a->EliminateCols(arg0, arg1); });
    t.method("EliminateCols", [](mfem::SparseMatrix* a, const mfem::Array<int> & arg0, const mfem::Vector * arg1, mfem::Vector * arg2)->void { a->EliminateCols(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateCols(const mfem::Array<int> &, mfem::SparseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateCols(const mfem::Array<int> &, mfem::SparseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:450:9
    t.method("EliminateCols", [](mfem::SparseMatrix& a, const mfem::Array<int> & arg0, mfem::SparseMatrix & arg1)->void { a.EliminateCols(arg0, arg1); });
    t.method("EliminateCols", [](mfem::SparseMatrix* a, const mfem::Array<int> & arg0, mfem::SparseMatrix & arg1)->void { a->EliminateCols(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateRowCol(int, const double, mfem::Vector &, mfem::Operator::DiagonalPolicy) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateRowCol(int, const double, mfem::Vector &, mfem::Operator::DiagonalPolicy)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:458:9
    t.method("EliminateRowCol", [](mfem::SparseMatrix& a, int arg0, const double arg1, mfem::Vector & arg2)->void { a.EliminateRowCol(arg0, arg1, arg2); });
    t.method("EliminateRowCol", [](mfem::SparseMatrix& a, int arg0, const double arg1, mfem::Vector & arg2, mfem::Operator::DiagonalPolicy arg3)->void { a.EliminateRowCol(arg0, arg1, arg2, arg3); });
    t.method("EliminateRowCol", [](mfem::SparseMatrix* a, int arg0, const double arg1, mfem::Vector & arg2)->void { a->EliminateRowCol(arg0, arg1, arg2); });
    t.method("EliminateRowCol", [](mfem::SparseMatrix* a, int arg0, const double arg1, mfem::Vector & arg2, mfem::Operator::DiagonalPolicy arg3)->void { a->EliminateRowCol(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateRowColMultipleRHS(int, const mfem::Vector &, mfem::DenseMatrix &, mfem::Operator::DiagonalPolicy) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateRowColMultipleRHS(int, const mfem::Vector &, mfem::DenseMatrix &, mfem::Operator::DiagonalPolicy)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:465:9
    t.method("EliminateRowColMultipleRHS", [](mfem::SparseMatrix& a, int arg0, const mfem::Vector & arg1, mfem::DenseMatrix & arg2)->void { a.EliminateRowColMultipleRHS(arg0, arg1, arg2); });
    t.method("EliminateRowColMultipleRHS", [](mfem::SparseMatrix& a, int arg0, const mfem::Vector & arg1, mfem::DenseMatrix & arg2, mfem::Operator::DiagonalPolicy arg3)->void { a.EliminateRowColMultipleRHS(arg0, arg1, arg2, arg3); });
    t.method("EliminateRowColMultipleRHS", [](mfem::SparseMatrix* a, int arg0, const mfem::Vector & arg1, mfem::DenseMatrix & arg2)->void { a->EliminateRowColMultipleRHS(arg0, arg1, arg2); });
    t.method("EliminateRowColMultipleRHS", [](mfem::SparseMatrix* a, int arg0, const mfem::Vector & arg1, mfem::DenseMatrix & arg2, mfem::Operator::DiagonalPolicy arg3)->void { a->EliminateRowColMultipleRHS(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateRowColDiag(int, double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateRowColDiag(int, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:470:9
    t.method("EliminateRowColDiag", [](mfem::SparseMatrix& a, int arg0, double arg1)->void { a.EliminateRowColDiag(arg0, arg1); });
    t.method("EliminateRowColDiag", [](mfem::SparseMatrix* a, int arg0, double arg1)->void { a->EliminateRowColDiag(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateRowCol(int, mfem::Operator::DiagonalPolicy) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateRowCol(int, mfem::Operator::DiagonalPolicy)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:473:9
    t.method("EliminateRowCol", [](mfem::SparseMatrix& a, int arg0)->void { a.EliminateRowCol(arg0); });
    t.method("EliminateRowCol", [](mfem::SparseMatrix& a, int arg0, mfem::Operator::DiagonalPolicy arg1)->void { a.EliminateRowCol(arg0, arg1); });
    t.method("EliminateRowCol", [](mfem::SparseMatrix* a, int arg0)->void { a->EliminateRowCol(arg0); });
    t.method("EliminateRowCol", [](mfem::SparseMatrix* a, int arg0, mfem::Operator::DiagonalPolicy arg1)->void { a->EliminateRowCol(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateRowCol(int, mfem::SparseMatrix &, mfem::Operator::DiagonalPolicy) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateRowCol(int, mfem::SparseMatrix &, mfem::Operator::DiagonalPolicy)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:478:9
    t.method("EliminateRowCol", [](mfem::SparseMatrix& a, int arg0, mfem::SparseMatrix & arg1)->void { a.EliminateRowCol(arg0, arg1); });
    t.method("EliminateRowCol", [](mfem::SparseMatrix& a, int arg0, mfem::SparseMatrix & arg1, mfem::Operator::DiagonalPolicy arg2)->void { a.EliminateRowCol(arg0, arg1, arg2); });
    t.method("EliminateRowCol", [](mfem::SparseMatrix* a, int arg0, mfem::SparseMatrix & arg1)->void { a->EliminateRowCol(arg0, arg1); });
    t.method("EliminateRowCol", [](mfem::SparseMatrix* a, int arg0, mfem::SparseMatrix & arg1, mfem::Operator::DiagonalPolicy arg2)->void { a->EliminateRowCol(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SetDiagIdentity() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::SetDiagIdentity()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:482:9
    t.method("SetDiagIdentity", [](mfem::SparseMatrix& a)->void { a.SetDiagIdentity(); });
    t.method("SetDiagIdentity", [](mfem::SparseMatrix* a)->void { a->SetDiagIdentity(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::EliminateZeroRows(const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::EliminateZeroRows(const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:484:17
    t.method("EliminateZeroRows", [](mfem::SparseMatrix& a)->void { a.EliminateZeroRows(); });
    t.method("EliminateZeroRows", [](mfem::SparseMatrix& a, const double arg0)->void { a.EliminateZeroRows(arg0); });
    t.method("EliminateZeroRows", [](mfem::SparseMatrix* a)->void { a->EliminateZeroRows(); });
    t.method("EliminateZeroRows", [](mfem::SparseMatrix* a, const double arg0)->void { a->EliminateZeroRows(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Gauss_Seidel_forw(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Gauss_Seidel_forw(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:487:9
    t.method("Gauss_Seidel_forw", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.Gauss_Seidel_forw(arg0, arg1); });
    t.method("Gauss_Seidel_forw", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->Gauss_Seidel_forw(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Gauss_Seidel_back(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Gauss_Seidel_back(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:488:9
    t.method("Gauss_Seidel_back", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.Gauss_Seidel_back(arg0, arg1); });
    t.method("Gauss_Seidel_back", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->Gauss_Seidel_back(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double mfem::SparseMatrix::GetJacobiScaling() (" __HERE__ ")");
    // signature to use in the veto list: double mfem::SparseMatrix::GetJacobiScaling()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:491:11
    t.method("GetJacobiScaling", [](mfem::SparseMatrix const& a)->double { return a.GetJacobiScaling(); });
    t.method("GetJacobiScaling", [](mfem::SparseMatrix const* a)->double { return a->GetJacobiScaling(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Jacobi(const mfem::Vector &, const mfem::Vector &, mfem::Vector &, double, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Jacobi(const mfem::Vector &, const mfem::Vector &, mfem::Vector &, double, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:495:9
    t.method("Jacobi", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2, double arg3)->void { a.Jacobi(arg0, arg1, arg2, arg3); });
    t.method("Jacobi", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2, double arg3, bool arg4)->void { a.Jacobi(arg0, arg1, arg2, arg3, arg4); });
    t.method("Jacobi", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2, double arg3)->void { a->Jacobi(arg0, arg1, arg2, arg3); });
    t.method("Jacobi", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2, double arg3, bool arg4)->void { a->Jacobi(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::DiagScale(const mfem::Vector &, mfem::Vector &, double, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::DiagScale(const mfem::Vector &, mfem::Vector &, double, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:499:9
    t.method("DiagScale", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.DiagScale(arg0, arg1); });
    t.method("DiagScale", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1, double arg2)->void { a.DiagScale(arg0, arg1, arg2); });
    t.method("DiagScale", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, mfem::Vector & arg1, double arg2, bool arg3)->void { a.DiagScale(arg0, arg1, arg2, arg3); });
    t.method("DiagScale", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->DiagScale(arg0, arg1); });
    t.method("DiagScale", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1, double arg2)->void { a->DiagScale(arg0, arg1, arg2); });
    t.method("DiagScale", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, mfem::Vector & arg1, double arg2, bool arg3)->void { a->DiagScale(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Jacobi2(const mfem::Vector &, const mfem::Vector &, mfem::Vector &, double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Jacobi2(const mfem::Vector &, const mfem::Vector &, mfem::Vector &, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:503:9
    t.method("Jacobi2", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a.Jacobi2(arg0, arg1, arg2); });
    t.method("Jacobi2", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2, double arg3)->void { a.Jacobi2(arg0, arg1, arg2, arg3); });
    t.method("Jacobi2", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a->Jacobi2(arg0, arg1, arg2); });
    t.method("Jacobi2", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2, double arg3)->void { a->Jacobi2(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Jacobi3(const mfem::Vector &, const mfem::Vector &, mfem::Vector &, double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Jacobi3(const mfem::Vector &, const mfem::Vector &, mfem::Vector &, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:507:9
    t.method("Jacobi3", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a.Jacobi3(arg0, arg1, arg2); });
    t.method("Jacobi3", [](mfem::SparseMatrix const& a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2, double arg3)->void { a.Jacobi3(arg0, arg1, arg2, arg3); });
    t.method("Jacobi3", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a->Jacobi3(arg0, arg1, arg2); });
    t.method("Jacobi3", [](mfem::SparseMatrix const* a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2, double arg3)->void { a->Jacobi3(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Finalize(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Finalize(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:515:17
    t.method("Finalize", [](mfem::SparseMatrix& a)->void { a.Finalize(); });
    t.method("Finalize", [](mfem::SparseMatrix& a, int arg0)->void { a.Finalize(arg0); });
    t.method("Finalize", [](mfem::SparseMatrix* a)->void { a->Finalize(); });
    t.method("Finalize", [](mfem::SparseMatrix* a, int arg0)->void { a->Finalize(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Finalize(int, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Finalize(int, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:518:9
    t.method("Finalize", [](mfem::SparseMatrix& a, int arg0, bool arg1)->void { a.Finalize(arg0, arg1); });
    t.method("Finalize", [](mfem::SparseMatrix* a, int arg0, bool arg1)->void { a->Finalize(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for bool mfem::SparseMatrix::Finalized() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::SparseMatrix::Finalized()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:521:9
    t.method("Finalized", [](mfem::SparseMatrix const& a)->bool { return a.Finalized(); });
    t.method("Finalized", [](mfem::SparseMatrix const* a)->bool { return a->Finalized(); });

    DEBUG_MSG("Adding wrapper for bool mfem::SparseMatrix::ColumnsAreSorted() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::SparseMatrix::ColumnsAreSorted()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:523:9
    t.method("ColumnsAreSorted", [](mfem::SparseMatrix const& a)->bool { return a.ColumnsAreSorted(); });
    t.method("ColumnsAreSorted", [](mfem::SparseMatrix const* a)->bool { return a->ColumnsAreSorted(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Threshold(double, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Threshold(double, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:528:9
    t.method("Threshold", [](mfem::SparseMatrix& a, double arg0)->void { a.Threshold(arg0); });
    t.method("Threshold", [](mfem::SparseMatrix& a, double arg0, bool arg1)->void { a.Threshold(arg0, arg1); });
    t.method("Threshold", [](mfem::SparseMatrix* a, double arg0)->void { a->Threshold(arg0); });
    t.method("Threshold", [](mfem::SparseMatrix* a, double arg0, bool arg1)->void { a->Threshold(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::GetBlocks(mfem::Array2D<mfem::SparseMatrix *> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::GetBlocks(mfem::Array2D<mfem::SparseMatrix *> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:533:9
    t.method("GetBlocks", [](mfem::SparseMatrix const& a, mfem::Array2D<mfem::SparseMatrix *> & arg0)->void { a.GetBlocks(arg0); });
    t.method("GetBlocks", [](mfem::SparseMatrix const* a, mfem::Array2D<mfem::SparseMatrix *> & arg0)->void { a->GetBlocks(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::GetSubMatrix(const mfem::Array<int> &, const mfem::Array<int> &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::GetSubMatrix(const mfem::Array<int> &, const mfem::Array<int> &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:535:9
    t.method("GetSubMatrix", [](mfem::SparseMatrix const& a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, mfem::DenseMatrix & arg2)->void { a.GetSubMatrix(arg0, arg1, arg2); });
    t.method("GetSubMatrix", [](mfem::SparseMatrix const* a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, mfem::DenseMatrix & arg2)->void { a->GetSubMatrix(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SetColPtr(const int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::SetColPtr(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:543:16
    t.method("SetColPtr", [](mfem::SparseMatrix const& a, const int arg0)->void { a.SetColPtr(arg0); });
    t.method("SetColPtr", [](mfem::SparseMatrix const* a, const int arg0)->void { a->SetColPtr(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::ClearColPtr() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::ClearColPtr()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:546:16
    t.method("ClearColPtr", [](mfem::SparseMatrix const& a)->void { a.ClearColPtr(); });
    t.method("ClearColPtr", [](mfem::SparseMatrix const* a)->void { a->ClearColPtr(); });

    DEBUG_MSG("Adding wrapper for double & mfem::SparseMatrix::SearchRow(const int) (" __HERE__ ")");
    // signature to use in the veto list: double & mfem::SparseMatrix::SearchRow(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:552:19
    t.method("SearchRow", [](mfem::SparseMatrix& a, const int arg0)->double & { return a.SearchRow(arg0); });
    t.method("SearchRow", [](mfem::SparseMatrix* a, const int arg0)->double & { return a->SearchRow(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::_Add_(const int, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::_Add_(const int, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:554:16
    t.method("_Add_", [](mfem::SparseMatrix& a, const int arg0, const double arg1)->void { a._Add_(arg0, arg1); });
    t.method("_Add_", [](mfem::SparseMatrix* a, const int arg0, const double arg1)->void { a->_Add_(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::_Set_(const int, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::_Set_(const int, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:557:16
    t.method("_Set_", [](mfem::SparseMatrix& a, const int arg0, const double arg1)->void { a._Set_(arg0, arg1); });
    t.method("_Set_", [](mfem::SparseMatrix* a, const int arg0, const double arg1)->void { a->_Set_(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double mfem::SparseMatrix::_Get_(const int) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::SparseMatrix::_Get_(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:560:18
    t.method("_Get_", [](mfem::SparseMatrix const& a, const int arg0)->double { return a._Get_(arg0); });
    t.method("_Get_", [](mfem::SparseMatrix const* a, const int arg0)->double { return a->_Get_(arg0); });

    DEBUG_MSG("Adding wrapper for double & mfem::SparseMatrix::SearchRow(const int, const int) (" __HERE__ ")");
    // signature to use in the veto list: double & mfem::SparseMatrix::SearchRow(const int, const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:562:19
    t.method("SearchRow", [](mfem::SparseMatrix& a, const int arg0, const int arg1)->double & { return a.SearchRow(arg0, arg1); });
    t.method("SearchRow", [](mfem::SparseMatrix* a, const int arg0, const int arg1)->double & { return a->SearchRow(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::_Add_(const int, const int, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::_Add_(const int, const int, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:563:16
    t.method("_Add_", [](mfem::SparseMatrix& a, const int arg0, const int arg1, const double arg2)->void { a._Add_(arg0, arg1, arg2); });
    t.method("_Add_", [](mfem::SparseMatrix* a, const int arg0, const int arg1, const double arg2)->void { a->_Add_(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::_Set_(const int, const int, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::_Set_(const int, const int, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:565:16
    t.method("_Set_", [](mfem::SparseMatrix& a, const int arg0, const int arg1, const double arg2)->void { a._Set_(arg0, arg1, arg2); });
    t.method("_Set_", [](mfem::SparseMatrix* a, const int arg0, const int arg1, const double arg2)->void { a->_Set_(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Set(const int, const int, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Set(const int, const int, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:568:9
    t.method("Set", [](mfem::SparseMatrix& a, const int arg0, const int arg1, const double arg2)->void { a.Set(arg0, arg1, arg2); });
    t.method("Set", [](mfem::SparseMatrix* a, const int arg0, const int arg1, const double arg2)->void { a->Set(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Add(const int, const int, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Add(const int, const int, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:569:9
    t.method("Add", [](mfem::SparseMatrix& a, const int arg0, const int arg1, const double arg2)->void { a.Add(arg0, arg1, arg2); });
    t.method("Add", [](mfem::SparseMatrix* a, const int arg0, const int arg1, const double arg2)->void { a->Add(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SetSubMatrix(const mfem::Array<int> &, const mfem::Array<int> &, const mfem::DenseMatrix &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::SetSubMatrix(const mfem::Array<int> &, const mfem::Array<int> &, const mfem::DenseMatrix &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:571:9
    t.method("SetSubMatrix", [](mfem::SparseMatrix& a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2)->void { a.SetSubMatrix(arg0, arg1, arg2); });
    t.method("SetSubMatrix", [](mfem::SparseMatrix& a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2, int arg3)->void { a.SetSubMatrix(arg0, arg1, arg2, arg3); });
    t.method("SetSubMatrix", [](mfem::SparseMatrix* a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2)->void { a->SetSubMatrix(arg0, arg1, arg2); });
    t.method("SetSubMatrix", [](mfem::SparseMatrix* a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2, int arg3)->void { a->SetSubMatrix(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SetSubMatrixTranspose(const mfem::Array<int> &, const mfem::Array<int> &, const mfem::DenseMatrix &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::SetSubMatrixTranspose(const mfem::Array<int> &, const mfem::Array<int> &, const mfem::DenseMatrix &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:574:9
    t.method("SetSubMatrixTranspose", [](mfem::SparseMatrix& a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2)->void { a.SetSubMatrixTranspose(arg0, arg1, arg2); });
    t.method("SetSubMatrixTranspose", [](mfem::SparseMatrix& a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2, int arg3)->void { a.SetSubMatrixTranspose(arg0, arg1, arg2, arg3); });
    t.method("SetSubMatrixTranspose", [](mfem::SparseMatrix* a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2)->void { a->SetSubMatrixTranspose(arg0, arg1, arg2); });
    t.method("SetSubMatrixTranspose", [](mfem::SparseMatrix* a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2, int arg3)->void { a->SetSubMatrixTranspose(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::AddSubMatrix(const mfem::Array<int> &, const mfem::Array<int> &, const mfem::DenseMatrix &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::AddSubMatrix(const mfem::Array<int> &, const mfem::Array<int> &, const mfem::DenseMatrix &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:583:9
    t.method("AddSubMatrix", [](mfem::SparseMatrix& a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2)->void { a.AddSubMatrix(arg0, arg1, arg2); });
    t.method("AddSubMatrix", [](mfem::SparseMatrix& a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2, int arg3)->void { a.AddSubMatrix(arg0, arg1, arg2, arg3); });
    t.method("AddSubMatrix", [](mfem::SparseMatrix* a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2)->void { a->AddSubMatrix(arg0, arg1, arg2); });
    t.method("AddSubMatrix", [](mfem::SparseMatrix* a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, const mfem::DenseMatrix & arg2, int arg3)->void { a->AddSubMatrix(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for bool mfem::SparseMatrix::RowIsEmpty(const int) (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::SparseMatrix::RowIsEmpty(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:586:9
    t.method("RowIsEmpty", [](mfem::SparseMatrix const& a, const int arg0)->bool { return a.RowIsEmpty(arg0); });
    t.method("RowIsEmpty", [](mfem::SparseMatrix const* a, const int arg0)->bool { return a->RowIsEmpty(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::SparseMatrix::GetRow(const int, mfem::Array<int> &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::SparseMatrix::GetRow(const int, mfem::Array<int> &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:598:16
    t.method("GetRow", [](mfem::SparseMatrix const& a, const int arg0, mfem::Array<int> & arg1, mfem::Vector & arg2)->int { return a.GetRow(arg0, arg1, arg2); });
    t.method("GetRow", [](mfem::SparseMatrix const* a, const int arg0, mfem::Array<int> & arg1, mfem::Vector & arg2)->int { return a->GetRow(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SetRow(const int, const mfem::Array<int> &, const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::SetRow(const int, const mfem::Array<int> &, const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:600:9
    t.method("SetRow", [](mfem::SparseMatrix& a, const int arg0, const mfem::Array<int> & arg1, const mfem::Vector & arg2)->void { a.SetRow(arg0, arg1, arg2); });
    t.method("SetRow", [](mfem::SparseMatrix* a, const int arg0, const mfem::Array<int> & arg1, const mfem::Vector & arg2)->void { a->SetRow(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::AddRow(const int, const mfem::Array<int> &, const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::AddRow(const int, const mfem::Array<int> &, const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:601:9
    t.method("AddRow", [](mfem::SparseMatrix& a, const int arg0, const mfem::Array<int> & arg1, const mfem::Vector & arg2)->void { a.AddRow(arg0, arg1, arg2); });
    t.method("AddRow", [](mfem::SparseMatrix* a, const int arg0, const mfem::Array<int> & arg1, const mfem::Vector & arg2)->void { a->AddRow(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::ScaleRow(const int, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::ScaleRow(const int, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:603:9
    t.method("ScaleRow", [](mfem::SparseMatrix& a, const int arg0, const double arg1)->void { a.ScaleRow(arg0, arg1); });
    t.method("ScaleRow", [](mfem::SparseMatrix* a, const int arg0, const double arg1)->void { a->ScaleRow(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::ScaleRows(const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::ScaleRows(const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:605:9
    t.method("ScaleRows", [](mfem::SparseMatrix& a, const mfem::Vector & arg0)->void { a.ScaleRows(arg0); });
    t.method("ScaleRows", [](mfem::SparseMatrix* a, const mfem::Vector & arg0)->void { a->ScaleRows(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::ScaleColumns(const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::ScaleColumns(const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:607:9
    t.method("ScaleColumns", [](mfem::SparseMatrix& a, const mfem::Vector & arg0)->void { a.ScaleColumns(arg0); });
    t.method("ScaleColumns", [](mfem::SparseMatrix* a, const mfem::Vector & arg0)->void { a->ScaleColumns(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::SparseMatrix & mfem::SparseMatrix::operator+=(const mfem::SparseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: mfem::SparseMatrix & mfem::SparseMatrix::operator+=(const mfem::SparseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:611:18
    t.method("add!", [](mfem::SparseMatrix& a, const mfem::SparseMatrix & arg0)->mfem::SparseMatrix & { return a.operator+=(arg0); });
    t.method("add!", [](mfem::SparseMatrix* a, const mfem::SparseMatrix & arg0)->mfem::SparseMatrix & { return a->operator+=(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Add(const double, const mfem::SparseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Add(const double, const mfem::SparseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:615:9
    t.method("Add", [](mfem::SparseMatrix& a, const double arg0, const mfem::SparseMatrix & arg1)->void { a.Add(arg0, arg1); });
    t.method("Add", [](mfem::SparseMatrix* a, const double arg0, const mfem::SparseMatrix & arg1)->void { a->Add(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for mfem::SparseMatrix & mfem::SparseMatrix::operator=(double) (" __HERE__ ")");
    // signature to use in the veto list: mfem::SparseMatrix & mfem::SparseMatrix::operator=(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:617:18
    t.method("assign", [](mfem::SparseMatrix& a, double arg0)->mfem::SparseMatrix & { return a.operator=(arg0); });
    t.method("assign", [](mfem::SparseMatrix* a, double arg0)->mfem::SparseMatrix & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::SparseMatrix & mfem::SparseMatrix::operator*=(double) (" __HERE__ ")");
    // signature to use in the veto list: mfem::SparseMatrix & mfem::SparseMatrix::operator*=(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:619:18
    t.method("mult!", [](mfem::SparseMatrix& a, double arg0)->mfem::SparseMatrix & { return a.operator*=(arg0); });
    t.method("mult!", [](mfem::SparseMatrix* a, double arg0)->mfem::SparseMatrix & { return a->operator*=(arg0); });

    DEBUG_MSG("Adding wrapper for double mfem::SparseMatrix::IsSymmetric() (" __HERE__ ")");
    // signature to use in the veto list: double mfem::SparseMatrix::IsSymmetric()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:640:11
    t.method("IsSymmetric", [](mfem::SparseMatrix const& a)->double { return a.IsSymmetric(); });
    t.method("IsSymmetric", [](mfem::SparseMatrix const* a)->double { return a->IsSymmetric(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Symmetrize() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Symmetrize()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:643:9
    t.method("Symmetrize", [](mfem::SparseMatrix& a)->void { a.Symmetrize(); });
    t.method("Symmetrize", [](mfem::SparseMatrix* a)->void { a->Symmetrize(); });

    DEBUG_MSG("Adding wrapper for int mfem::SparseMatrix::NumNonZeroElems() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::SparseMatrix::NumNonZeroElems()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:646:16
    t.method("NumNonZeroElems", [](mfem::SparseMatrix const& a)->int { return a.NumNonZeroElems(); });
    t.method("NumNonZeroElems", [](mfem::SparseMatrix const* a)->int { return a->NumNonZeroElems(); });

    DEBUG_MSG("Adding wrapper for double mfem::SparseMatrix::MaxNorm() (" __HERE__ ")");
    // signature to use in the veto list: double mfem::SparseMatrix::MaxNorm()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:648:11
    t.method("MaxNorm", [](mfem::SparseMatrix const& a)->double { return a.MaxNorm(); });
    t.method("MaxNorm", [](mfem::SparseMatrix const* a)->double { return a->MaxNorm(); });

    DEBUG_MSG("Adding wrapper for int mfem::SparseMatrix::CountSmallElems(double) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::SparseMatrix::CountSmallElems(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:651:8
    t.method("CountSmallElems", [](mfem::SparseMatrix const& a, double arg0)->int { return a.CountSmallElems(arg0); });
    t.method("CountSmallElems", [](mfem::SparseMatrix const* a, double arg0)->int { return a->CountSmallElems(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::SparseMatrix::CheckFinite() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::SparseMatrix::CheckFinite()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:654:8
    t.method("CheckFinite", [](mfem::SparseMatrix const& a)->int { return a.CheckFinite(); });
    t.method("CheckFinite", [](mfem::SparseMatrix const* a)->int { return a->CheckFinite(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SetGraphOwner(bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::SetGraphOwner(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:657:9
    t.method("SetGraphOwner", [](mfem::SparseMatrix& a, bool arg0)->void { a.SetGraphOwner(arg0); });
    t.method("SetGraphOwner", [](mfem::SparseMatrix* a, bool arg0)->void { a->SetGraphOwner(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::SetDataOwner(bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::SetDataOwner(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:661:9
    t.method("SetDataOwner", [](mfem::SparseMatrix& a, bool arg0)->void { a.SetDataOwner(arg0); });
    t.method("SetDataOwner", [](mfem::SparseMatrix* a, bool arg0)->void { a->SetDataOwner(arg0); });

    DEBUG_MSG("Adding wrapper for bool mfem::SparseMatrix::OwnsGraph() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::SparseMatrix::OwnsGraph()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:664:9
    t.method("OwnsGraph", [](mfem::SparseMatrix const& a)->bool { return a.OwnsGraph(); });
    t.method("OwnsGraph", [](mfem::SparseMatrix const* a)->bool { return a->OwnsGraph(); });

    DEBUG_MSG("Adding wrapper for bool mfem::SparseMatrix::OwnsData() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::SparseMatrix::OwnsData()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:667:9
    t.method("OwnsData", [](mfem::SparseMatrix const& a)->bool { return a.OwnsData(); });
    t.method("OwnsData", [](mfem::SparseMatrix const* a)->bool { return a->OwnsData(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::LoseData() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::LoseData()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:670:9
    t.method("LoseData", [](mfem::SparseMatrix& a)->void { a.LoseData(); });
    t.method("LoseData", [](mfem::SparseMatrix* a)->void { a->LoseData(); });

    DEBUG_MSG("Adding wrapper for void mfem::SparseMatrix::Swap(mfem::SparseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SparseMatrix::Swap(mfem::SparseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:672:9
    t.method("Swap", [](mfem::SparseMatrix& a, mfem::SparseMatrix & arg0)->void { a.Swap(arg0); });
    t.method("Swap", [](mfem::SparseMatrix* a, mfem::SparseMatrix & arg0)->void { a->Swap(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Operator::Type mfem::SparseMatrix::GetType() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Operator::Type mfem::SparseMatrix::GetType()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:677:9
    t.method("GetType", [](mfem::SparseMatrix const& a)->mfem::Operator::Type { return a.GetType(); });
    t.method("GetType", [](mfem::SparseMatrix const* a)->mfem::Operator::Type { return a->GetType(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::SparseMatrix>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_SparseMatrix(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_SparseMatrix(module));
}
