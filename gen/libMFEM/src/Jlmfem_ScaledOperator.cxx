// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::ScaledOperator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::ScaledOperator> : std::false_type { };
template<> struct SuperType<mfem::ScaledOperator> { typedef mfem::Operator type; };
}

// Class generating the wrapper for type mfem::ScaledOperator
// signature to use in the veto file: mfem::ScaledOperator
struct Jlmfem_ScaledOperator: public Wrapper {

  Jlmfem_ScaledOperator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::ScaledOperator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:695:7
    jlcxx::TypeWrapper<mfem::ScaledOperator>  t = jlModule.add_type<mfem::ScaledOperator>("mfem!ScaledOperator",
      jlcxx::julia_base_type<mfem::Operator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::ScaledOperator>>(new jlcxx::TypeWrapper<mfem::ScaledOperator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::ScaledOperator::ScaledOperator(const mfem::Operator *, double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:703:13
    t.constructor<const mfem::Operator *, double>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::ScaledOperator::Mult(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::ScaledOperator::Mult(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:707:17
    t.method("Mult", [](mfem::ScaledOperator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.Mult(arg0, arg1); });
    t.method("Mult", [](mfem::ScaledOperator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->Mult(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::ScaledOperator::MultTranspose(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::ScaledOperator::MultTranspose(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:711:17
    t.method("MultTranspose", [](mfem::ScaledOperator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.MultTranspose(arg0, arg1); });
    t.method("MultTranspose", [](mfem::ScaledOperator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->MultTranspose(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::ScaledOperator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_ScaledOperator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_ScaledOperator(module));
}
