// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::NewtonSolver> : std::false_type { };
  template<> struct DefaultConstructible<mfem::NewtonSolver> : std::false_type { };
template<> struct SuperType<mfem::NewtonSolver> { typedef mfem::IterativeSolver type; };
}

// Class generating the wrapper for type mfem::NewtonSolver
// signature to use in the veto file: mfem::NewtonSolver
struct Jlmfem_NewtonSolver: public Wrapper {

  Jlmfem_NewtonSolver(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::NewtonSolver (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:613:7
    jlcxx::TypeWrapper<mfem::NewtonSolver>  t = jlModule.add_type<mfem::NewtonSolver>("mfem!NewtonSolver",
      jlcxx::julia_base_type<mfem::IterativeSolver>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::NewtonSolver>>(new jlcxx::TypeWrapper<mfem::NewtonSolver>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::NewtonSolver::SetOperator(const mfem::Operator &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::NewtonSolver::SetOperator(const mfem::Operator &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:657:17
    t.method("SetOperator", [](mfem::NewtonSolver& a, const mfem::Operator & arg0)->void { a.SetOperator(arg0); });
    t.method("SetOperator", [](mfem::NewtonSolver* a, const mfem::Operator & arg0)->void { a->SetOperator(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::NewtonSolver::SetSolver(mfem::Solver &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::NewtonSolver::SetSolver(mfem::Solver &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:661:17
    t.method("SetSolver", [](mfem::NewtonSolver& a, mfem::Solver & arg0)->void { a.SetSolver(arg0); });
    t.method("SetSolver", [](mfem::NewtonSolver* a, mfem::Solver & arg0)->void { a->SetSolver(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::NewtonSolver::Mult(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::NewtonSolver::Mult(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:665:17
    t.method("Mult", [](mfem::NewtonSolver const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.Mult(arg0, arg1); });
    t.method("Mult", [](mfem::NewtonSolver const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->Mult(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double mfem::NewtonSolver::ComputeScalingFactor(const mfem::Vector &, const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::NewtonSolver::ComputeScalingFactor(const mfem::Vector &, const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:671:19
    t.method("ComputeScalingFactor", [](mfem::NewtonSolver const& a, const mfem::Vector & arg0, const mfem::Vector & arg1)->double { return a.ComputeScalingFactor(arg0, arg1); });
    t.method("ComputeScalingFactor", [](mfem::NewtonSolver const* a, const mfem::Vector & arg0, const mfem::Vector & arg1)->double { return a->ComputeScalingFactor(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::NewtonSolver::ProcessNewState(const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::NewtonSolver::ProcessNewState(const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:676:17
    t.method("ProcessNewState", [](mfem::NewtonSolver const& a, const mfem::Vector & arg0)->void { a.ProcessNewState(arg0); });
    t.method("ProcessNewState", [](mfem::NewtonSolver const* a, const mfem::Vector & arg0)->void { a->ProcessNewState(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::NewtonSolver::SetAdaptiveLinRtol(const int, const double, const double, const double, const double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::NewtonSolver::SetAdaptiveLinRtol(const int, const double, const double, const double, const double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:689:9
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver& a)->void { a.SetAdaptiveLinRtol(); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver& a, const int arg0)->void { a.SetAdaptiveLinRtol(arg0); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver& a, const int arg0, const double arg1)->void { a.SetAdaptiveLinRtol(arg0, arg1); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver& a, const int arg0, const double arg1, const double arg2)->void { a.SetAdaptiveLinRtol(arg0, arg1, arg2); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver& a, const int arg0, const double arg1, const double arg2, const double arg3)->void { a.SetAdaptiveLinRtol(arg0, arg1, arg2, arg3); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver& a, const int arg0, const double arg1, const double arg2, const double arg3, const double arg4)->void { a.SetAdaptiveLinRtol(arg0, arg1, arg2, arg3, arg4); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver* a)->void { a->SetAdaptiveLinRtol(); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver* a, const int arg0)->void { a->SetAdaptiveLinRtol(arg0); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver* a, const int arg0, const double arg1)->void { a->SetAdaptiveLinRtol(arg0, arg1); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver* a, const int arg0, const double arg1, const double arg2)->void { a->SetAdaptiveLinRtol(arg0, arg1, arg2); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver* a, const int arg0, const double arg1, const double arg2, const double arg3)->void { a->SetAdaptiveLinRtol(arg0, arg1, arg2, arg3); });
    t.method("SetAdaptiveLinRtol", [](mfem::NewtonSolver* a, const int arg0, const double arg1, const double arg2, const double arg3, const double arg4)->void { a->SetAdaptiveLinRtol(arg0, arg1, arg2, arg3, arg4); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::NewtonSolver>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_NewtonSolver(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_NewtonSolver(module));
}
