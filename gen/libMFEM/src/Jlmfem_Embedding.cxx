// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::Embedding> : std::false_type { };
  template<> struct DefaultConstructible<mfem::Embedding> : std::false_type { };
}

// Class generating the wrapper for type mfem::Embedding
// signature to use in the veto file: mfem::Embedding
struct Jlmfem_Embedding: public Wrapper {

  Jlmfem_Embedding(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::Embedding (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:49:8
    jlcxx::TypeWrapper<mfem::Embedding>  t = jlModule.add_type<mfem::Embedding>("mfem!Embedding");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::Embedding>>(new jlcxx::TypeWrapper<mfem::Embedding>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::Embedding::Embedding(int, mfem::Geometry::Type, int, bool) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:64:4
    t.constructor<int, mfem::Geometry::Type>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, mfem::Geometry::Type, int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, mfem::Geometry::Type, int, bool>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding parent methods  to provide read access to the field parent (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:52:8
    // signature to use in the veto list: mfem::Embedding::parent
    t.method("parent", [](const mfem::Embedding& a) -> int { return a.parent; });
    t.method("parent", [](mfem::Embedding& a) -> int { return a.parent; });
    t.method("parent", [](const mfem::Embedding* a) -> int { return a->parent; });
    t.method("parent", [](mfem::Embedding* a) -> int { return a->parent; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:52:8
    // signature to use in the veto list: mfem::Embedding::parent
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding parent! methods to provide write access to the field parent (" __HERE__ ")");
    t.method("parent!", [](mfem::Embedding& a, int val) -> int { return a.parent = val; });

    DEBUG_MSG("Adding parent! methods to provide write access to the field parent (" __HERE__ ")");
    t.method("parent!", [](mfem::Embedding* a, int val) -> int { return a->parent = val; });

    DEBUG_MSG("Adding geom methods  to provide read access to the field geom (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:57:13
    // signature to use in the veto list: mfem::Embedding::geom
    t.method("geom", [](const mfem::Embedding& a) -> unsigned int { return a.geom; });
    t.method("geom", [](mfem::Embedding& a) -> unsigned int { return a.geom; });
    t.method("geom", [](const mfem::Embedding* a) -> unsigned int { return a->geom; });
    t.method("geom", [](mfem::Embedding* a) -> unsigned int { return a->geom; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:57:13
    // signature to use in the veto list: mfem::Embedding::geom
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding geom! methods to provide write access to the field geom (" __HERE__ ")");
    t.method("geom!", [](mfem::Embedding& a, unsigned int val) -> unsigned int { return a.geom = val; });

    DEBUG_MSG("Adding geom! methods to provide write access to the field geom (" __HERE__ ")");
    t.method("geom!", [](mfem::Embedding* a, unsigned int val) -> unsigned int { return a->geom = val; });

    DEBUG_MSG("Adding matrix methods  to provide read access to the field matrix (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:58:13
    // signature to use in the veto list: mfem::Embedding::matrix
    t.method("matrix", [](const mfem::Embedding& a) -> unsigned int { return a.matrix; });
    t.method("matrix", [](mfem::Embedding& a) -> unsigned int { return a.matrix; });
    t.method("matrix", [](const mfem::Embedding* a) -> unsigned int { return a->matrix; });
    t.method("matrix", [](mfem::Embedding* a) -> unsigned int { return a->matrix; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:58:13
    // signature to use in the veto list: mfem::Embedding::matrix
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding matrix! methods to provide write access to the field matrix (" __HERE__ ")");
    t.method("matrix!", [](mfem::Embedding& a, unsigned int val) -> unsigned int { return a.matrix = val; });

    DEBUG_MSG("Adding matrix! methods to provide write access to the field matrix (" __HERE__ ")");
    t.method("matrix!", [](mfem::Embedding* a, unsigned int val) -> unsigned int { return a->matrix = val; });

    DEBUG_MSG("Adding ghost methods  to provide read access to the field ghost (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:61:13
    // signature to use in the veto list: mfem::Embedding::ghost
    t.method("ghost", [](const mfem::Embedding& a) -> unsigned int { return a.ghost; });
    t.method("ghost", [](mfem::Embedding& a) -> unsigned int { return a.ghost; });
    t.method("ghost", [](const mfem::Embedding* a) -> unsigned int { return a->ghost; });
    t.method("ghost", [](mfem::Embedding* a) -> unsigned int { return a->ghost; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:61:13
    // signature to use in the veto list: mfem::Embedding::ghost
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ghost! methods to provide write access to the field ghost (" __HERE__ ")");
    t.method("ghost!", [](mfem::Embedding& a, unsigned int val) -> unsigned int { return a.ghost = val; });

    DEBUG_MSG("Adding ghost! methods to provide write access to the field ghost (" __HERE__ ")");
    t.method("ghost!", [](mfem::Embedding* a, unsigned int val) -> unsigned int { return a->ghost = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::Embedding>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_Embedding(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_Embedding(module));
}
