// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::Refinement> : std::false_type { };
  template<> struct DefaultConstructible<mfem::Refinement> : std::false_type { };
}

// Class generating the wrapper for type mfem::Refinement
// signature to use in the veto file: mfem::Refinement
struct Jlmfem_Refinement: public Wrapper {

  Jlmfem_Refinement(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::Refinement (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:35:8
    jlcxx::TypeWrapper<mfem::Refinement>  t = jlModule.add_type<mfem::Refinement>("mfem!Refinement");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::Refinement>>(new jlcxx::TypeWrapper<mfem::Refinement>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::Refinement::Refinement(int, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:43:4
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding index methods  to provide read access to the field index (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:38:8
    // signature to use in the veto list: mfem::Refinement::index
    t.method("index", [](const mfem::Refinement& a) -> int { return a.index; });
    t.method("index", [](mfem::Refinement& a) -> int { return a.index; });
    t.method("index", [](const mfem::Refinement* a) -> int { return a->index; });
    t.method("index", [](mfem::Refinement* a) -> int { return a->index; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:38:8
    // signature to use in the veto list: mfem::Refinement::index
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding index! methods to provide write access to the field index (" __HERE__ ")");
    t.method("index!", [](mfem::Refinement& a, int val) -> int { return a.index = val; });

    DEBUG_MSG("Adding index! methods to provide write access to the field index (" __HERE__ ")");
    t.method("index!", [](mfem::Refinement* a, int val) -> int { return a->index = val; });

    DEBUG_MSG("Adding ref_type methods  to provide read access to the field ref_type (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:39:9
    // signature to use in the veto list: mfem::Refinement::ref_type
    t.method("ref_type", [](const mfem::Refinement& a) -> char { return a.ref_type; });
    t.method("ref_type", [](mfem::Refinement& a) -> char { return a.ref_type; });
    t.method("ref_type", [](const mfem::Refinement* a) -> char { return a->ref_type; });
    t.method("ref_type", [](mfem::Refinement* a) -> char { return a->ref_type; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/ncmesh.hpp:39:9
    // signature to use in the veto list: mfem::Refinement::ref_type
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ref_type! methods to provide write access to the field ref_type (" __HERE__ ")");
    t.method("ref_type!", [](mfem::Refinement& a, char val) -> char { return a.ref_type = val; });

    DEBUG_MSG("Adding ref_type! methods to provide write access to the field ref_type (" __HERE__ ")");
    t.method("ref_type!", [](mfem::Refinement* a, char val) -> char { return a->ref_type = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::Refinement>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_Refinement(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_Refinement(module));
}
