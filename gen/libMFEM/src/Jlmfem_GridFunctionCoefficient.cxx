// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::GridFunctionCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::GridFunctionCoefficient> : std::false_type { };
template<> struct SuperType<mfem::GridFunctionCoefficient> { typedef mfem::Coefficient type; };
}

// Class generating the wrapper for type mfem::GridFunctionCoefficient
// signature to use in the veto file: mfem::GridFunctionCoefficient
struct Jlmfem_GridFunctionCoefficient: public Wrapper {

  Jlmfem_GridFunctionCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::GridFunctionCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:255:7
    jlcxx::TypeWrapper<mfem::GridFunctionCoefficient>  t = jlModule.add_type<mfem::GridFunctionCoefficient>("mfem!GridFunctionCoefficient",
      jlcxx::julia_base_type<mfem::Coefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::GridFunctionCoefficient>>(new jlcxx::TypeWrapper<mfem::GridFunctionCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::GridFunctionCoefficient::GridFunctionCoefficient(const mfem::GridFunction *, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:265:4
    t.constructor<const mfem::GridFunction *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const mfem::GridFunction *, int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::GridFunctionCoefficient::SetGridFunction(const mfem::GridFunction *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunctionCoefficient::SetGridFunction(const mfem::GridFunction *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:269:9
    t.method("SetGridFunction", [](mfem::GridFunctionCoefficient& a, const mfem::GridFunction * arg0)->void { a.SetGridFunction(arg0); });
    t.method("SetGridFunction", [](mfem::GridFunctionCoefficient* a, const mfem::GridFunction * arg0)->void { a->SetGridFunction(arg0); });

    DEBUG_MSG("Adding wrapper for const mfem::GridFunction * mfem::GridFunctionCoefficient::GetGridFunction() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::GridFunction * mfem::GridFunctionCoefficient::GetGridFunction()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:272:25
    t.method("GetGridFunction", [](mfem::GridFunctionCoefficient const& a)->const mfem::GridFunction * { return a.GetGridFunction(); });
    t.method("GetGridFunction", [](mfem::GridFunctionCoefficient const* a)->const mfem::GridFunction * { return a->GetGridFunction(); });

    DEBUG_MSG("Adding wrapper for double mfem::GridFunctionCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::GridFunctionCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:275:19
    t.method("Eval", [](mfem::GridFunctionCoefficient& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a.Eval(arg0, arg1); });
    t.method("Eval", [](mfem::GridFunctionCoefficient* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a->Eval(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::GridFunctionCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_GridFunctionCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_GridFunctionCoefficient(module));
}
