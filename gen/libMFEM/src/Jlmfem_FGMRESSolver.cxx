// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::FGMRESSolver> : std::false_type { };
  template<> struct DefaultConstructible<mfem::FGMRESSolver> : std::false_type { };
template<> struct SuperType<mfem::FGMRESSolver> { typedef mfem::IterativeSolver type; };
}

// Class generating the wrapper for type mfem::FGMRESSolver
// signature to use in the veto file: mfem::FGMRESSolver
struct Jlmfem_FGMRESSolver: public Wrapper {

  Jlmfem_FGMRESSolver(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::FGMRESSolver (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:516:7
    jlcxx::TypeWrapper<mfem::FGMRESSolver>  t = jlModule.add_type<mfem::FGMRESSolver>("mfem!FGMRESSolver",
      jlcxx::julia_base_type<mfem::IterativeSolver>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::FGMRESSolver>>(new jlcxx::TypeWrapper<mfem::FGMRESSolver>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::FGMRESSolver::SetKDim(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::FGMRESSolver::SetKDim(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:528:9
    t.method("SetKDim", [](mfem::FGMRESSolver& a, int arg0)->void { a.SetKDim(arg0); });
    t.method("SetKDim", [](mfem::FGMRESSolver* a, int arg0)->void { a->SetKDim(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::FGMRESSolver::Mult(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::FGMRESSolver::Mult(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:530:17
    t.method("Mult", [](mfem::FGMRESSolver const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.Mult(arg0, arg1); });
    t.method("Mult", [](mfem::FGMRESSolver const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->Mult(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::FGMRESSolver>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_FGMRESSolver(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_FGMRESSolver(module));
}
