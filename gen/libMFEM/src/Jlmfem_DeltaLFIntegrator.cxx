// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::DeltaLFIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::DeltaLFIntegrator> : std::false_type { };
template<> struct SuperType<mfem::DeltaLFIntegrator> { typedef mfem::LinearFormIntegrator type; };
}

// Class generating the wrapper for type mfem::DeltaLFIntegrator
// signature to use in the veto file: mfem::DeltaLFIntegrator
struct Jlmfem_DeltaLFIntegrator: public Wrapper {

  Jlmfem_DeltaLFIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::DeltaLFIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/lininteg.hpp:51:7
    jlcxx::TypeWrapper<mfem::DeltaLFIntegrator>  t = jlModule.add_type<mfem::DeltaLFIntegrator>("mfem!DeltaLFIntegrator",
      jlcxx::julia_base_type<mfem::LinearFormIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::DeltaLFIntegrator>>(new jlcxx::TypeWrapper<mfem::DeltaLFIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for bool mfem::DeltaLFIntegrator::IsDelta() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::DeltaLFIntegrator::IsDelta()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/lininteg.hpp:74:9
    t.method("IsDelta", [](mfem::DeltaLFIntegrator const& a)->bool { return a.IsDelta(); });
    t.method("IsDelta", [](mfem::DeltaLFIntegrator const* a)->bool { return a->IsDelta(); });

    DEBUG_MSG("Adding wrapper for void mfem::DeltaLFIntegrator::GetDeltaCenter(mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DeltaLFIntegrator::GetDeltaCenter(mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/lininteg.hpp:77:9
    t.method("GetDeltaCenter", [](mfem::DeltaLFIntegrator& a, mfem::Vector & arg0)->void { a.GetDeltaCenter(arg0); });
    t.method("GetDeltaCenter", [](mfem::DeltaLFIntegrator* a, mfem::Vector & arg0)->void { a->GetDeltaCenter(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::DeltaLFIntegrator::AssembleDeltaElementVect(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DeltaLFIntegrator::AssembleDeltaElementVect(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/lininteg.hpp:90:17
    t.method("AssembleDeltaElementVect", [](mfem::DeltaLFIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2)->void { a.AssembleDeltaElementVect(arg0, arg1, arg2); });
    t.method("AssembleDeltaElementVect", [](mfem::DeltaLFIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2)->void { a->AssembleDeltaElementVect(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::DeltaLFIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_DeltaLFIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_DeltaLFIntegrator(module));
}
