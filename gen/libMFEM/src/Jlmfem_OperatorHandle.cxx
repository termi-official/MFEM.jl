// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::OperatorHandle> : std::false_type { };
  template<> struct DefaultConstructible<mfem::OperatorHandle> : std::false_type { };
}

// Class generating the wrapper for type mfem::OperatorHandle
// signature to use in the veto file: mfem::OperatorHandle
struct Jlmfem_OperatorHandle: public Wrapper {

  Jlmfem_OperatorHandle(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::OperatorHandle (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:33:7
    jlcxx::TypeWrapper<mfem::OperatorHandle>  t = jlModule.add_type<mfem::OperatorHandle>("mfem!OperatorHandle");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::OperatorHandle>>(new jlcxx::TypeWrapper<mfem::OperatorHandle>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::OperatorHandle(mfem::Operator::Type) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:60:13
    t.constructor<mfem::Operator::Type>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::OperatorHandle(const mfem::OperatorHandle &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:73:4
    t.constructor<const mfem::OperatorHandle &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for mfem::OperatorHandle & mfem::OperatorHandle::operator=(const mfem::OperatorHandle &) (" __HERE__ ")");
    // signature to use in the veto list: mfem::OperatorHandle & mfem::OperatorHandle::operator=(const mfem::OperatorHandle &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:80:20
    t.method("assign", [](mfem::OperatorHandle& a, const mfem::OperatorHandle & arg0)->mfem::OperatorHandle & { return a.operator=(arg0); });
    t.method("assign", [](mfem::OperatorHandle* a, const mfem::OperatorHandle & arg0)->mfem::OperatorHandle & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Operator * mfem::OperatorHandle::Ptr() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Operator * mfem::OperatorHandle::Ptr()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:87:14
    t.method("Ptr", [](mfem::OperatorHandle const& a)->mfem::Operator * { return a.Ptr(); });
    t.method("Ptr", [](mfem::OperatorHandle const* a)->mfem::Operator * { return a->Ptr(); });

    DEBUG_MSG("Adding wrapper for mfem::Operator * mfem::OperatorHandle::operator->() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Operator * mfem::OperatorHandle::operator->()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:90:14
    t.method("arrow", [](mfem::OperatorHandle const& a)->mfem::Operator * { return a.operator->(); });
    t.method("arrow", [](mfem::OperatorHandle const* a)->mfem::Operator * { return a->operator->(); });
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for mfem::Operator & mfem::OperatorHandle::operator*() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Operator & mfem::OperatorHandle::operator*()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:93:14
    t.method("getindex", [](mfem::OperatorHandle& a)->mfem::Operator & { return a.operator*(); });
    t.method("getindex", [](mfem::OperatorHandle* a)->mfem::Operator & { return a->operator*(); });

    DEBUG_MSG("Adding wrapper for const mfem::Operator & mfem::OperatorHandle::operator*() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Operator & mfem::OperatorHandle::operator*()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:96:20
    t.method("getindex", [](mfem::OperatorHandle const& a)->const mfem::Operator & { return a.operator*(); });
    t.method("getindex", [](mfem::OperatorHandle const* a)->const mfem::Operator & { return a->operator*(); });

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for mfem::Operator::Type mfem::OperatorHandle::Type() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Operator::Type mfem::OperatorHandle::Type()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:99:19
    t.method("Type", [](mfem::OperatorHandle const& a)->mfem::Operator::Type { return a.Type(); });
    t.method("Type", [](mfem::OperatorHandle const* a)->mfem::Operator::Type { return a->Type(); });

    DEBUG_MSG("Adding wrapper for bool mfem::OperatorHandle::OwnsOperator() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::OperatorHandle::OwnsOperator()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:117:9
    t.method("OwnsOperator", [](mfem::OperatorHandle const& a)->bool { return a.OwnsOperator(); });
    t.method("OwnsOperator", [](mfem::OperatorHandle const* a)->bool { return a->OwnsOperator(); });

    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::SetOperatorOwner(bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OperatorHandle::SetOperatorOwner(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:120:9
    t.method("SetOperatorOwner", [](mfem::OperatorHandle& a)->void { a.SetOperatorOwner(); });
    t.method("SetOperatorOwner", [](mfem::OperatorHandle& a, bool arg0)->void { a.SetOperatorOwner(arg0); });
    t.method("SetOperatorOwner", [](mfem::OperatorHandle* a)->void { a->SetOperatorOwner(); });
    t.method("SetOperatorOwner", [](mfem::OperatorHandle* a, bool arg0)->void { a->SetOperatorOwner(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OperatorHandle::Clear()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:124:9
    t.method("Clear", [](mfem::OperatorHandle& a)->void { a.Clear(); });
    t.method("Clear", [](mfem::OperatorHandle* a)->void { a->Clear(); });

    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::SetType(mfem::Operator::Type) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OperatorHandle::SetType(mfem::Operator::Type)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:132:9
    t.method("SetType", [](mfem::OperatorHandle& a, mfem::Operator::Type arg0)->void { a.SetType(arg0); });
    t.method("SetType", [](mfem::OperatorHandle* a, mfem::Operator::Type arg0)->void { a->SetType(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::MakePtAP(mfem::OperatorHandle &, mfem::OperatorHandle &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OperatorHandle::MakePtAP(mfem::OperatorHandle &, mfem::OperatorHandle &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:169:9
    t.method("MakePtAP", [](mfem::OperatorHandle& a, mfem::OperatorHandle & arg0, mfem::OperatorHandle & arg1)->void { a.MakePtAP(arg0, arg1); });
    t.method("MakePtAP", [](mfem::OperatorHandle* a, mfem::OperatorHandle & arg0, mfem::OperatorHandle & arg1)->void { a->MakePtAP(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::MakeRAP(mfem::OperatorHandle &, mfem::OperatorHandle &, mfem::OperatorHandle &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OperatorHandle::MakeRAP(mfem::OperatorHandle &, mfem::OperatorHandle &, mfem::OperatorHandle &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:175:9
    t.method("MakeRAP", [](mfem::OperatorHandle& a, mfem::OperatorHandle & arg0, mfem::OperatorHandle & arg1, mfem::OperatorHandle & arg2)->void { a.MakeRAP(arg0, arg1, arg2); });
    t.method("MakeRAP", [](mfem::OperatorHandle* a, mfem::OperatorHandle & arg0, mfem::OperatorHandle & arg1, mfem::OperatorHandle & arg2)->void { a->MakeRAP(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::ConvertFrom(mfem::OperatorHandle &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OperatorHandle::ConvertFrom(mfem::OperatorHandle &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:181:9
    t.method("ConvertFrom", [](mfem::OperatorHandle& a, mfem::OperatorHandle & arg0)->void { a.ConvertFrom(arg0); });
    t.method("ConvertFrom", [](mfem::OperatorHandle* a, mfem::OperatorHandle & arg0)->void { a->ConvertFrom(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::EliminateRowsCols(mfem::OperatorHandle &, const mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OperatorHandle::EliminateRowsCols(mfem::OperatorHandle &, const mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:195:9
    t.method("EliminateRowsCols", [](mfem::OperatorHandle& a, mfem::OperatorHandle & arg0, const mfem::Array<int> & arg1)->void { a.EliminateRowsCols(arg0, arg1); });
    t.method("EliminateRowsCols", [](mfem::OperatorHandle* a, mfem::OperatorHandle & arg0, const mfem::Array<int> & arg1)->void { a->EliminateRowsCols(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::EliminateRows(const mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OperatorHandle::EliminateRows(const mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:198:9
    t.method("EliminateRows", [](mfem::OperatorHandle& a, const mfem::Array<int> & arg0)->void { a.EliminateRows(arg0); });
    t.method("EliminateRows", [](mfem::OperatorHandle* a, const mfem::Array<int> & arg0)->void { a->EliminateRows(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::EliminateCols(const mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OperatorHandle::EliminateCols(const mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:201:9
    t.method("EliminateCols", [](mfem::OperatorHandle& a, const mfem::Array<int> & arg0)->void { a.EliminateCols(arg0); });
    t.method("EliminateCols", [](mfem::OperatorHandle* a, const mfem::Array<int> & arg0)->void { a->EliminateCols(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::OperatorHandle::EliminateBC(const mfem::OperatorHandle &, const mfem::Array<int> &, const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OperatorHandle::EliminateBC(const mfem::OperatorHandle &, const mfem::Array<int> &, const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/handle.hpp:206:9
    t.method("EliminateBC", [](mfem::OperatorHandle const& a, const mfem::OperatorHandle & arg0, const mfem::Array<int> & arg1, const mfem::Vector & arg2, mfem::Vector & arg3)->void { a.EliminateBC(arg0, arg1, arg2, arg3); });
    t.method("EliminateBC", [](mfem::OperatorHandle const* a, const mfem::OperatorHandle & arg0, const mfem::Array<int> & arg1, const mfem::Vector & arg2, mfem::Vector & arg3)->void { a->EliminateBC(arg0, arg1, arg2, arg3); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::OperatorHandle>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_OperatorHandle(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_OperatorHandle(module));
}
