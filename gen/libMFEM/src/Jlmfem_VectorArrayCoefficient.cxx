// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::VectorArrayCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::VectorArrayCoefficient> : std::false_type { };
template<> struct SuperType<mfem::VectorArrayCoefficient> { typedef mfem::VectorCoefficient type; };
}

// Class generating the wrapper for type mfem::VectorArrayCoefficient
// signature to use in the veto file: mfem::VectorArrayCoefficient
struct Jlmfem_VectorArrayCoefficient: public Wrapper {

  Jlmfem_VectorArrayCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::VectorArrayCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:621:7
    jlcxx::TypeWrapper<mfem::VectorArrayCoefficient>  t = jlModule.add_type<mfem::VectorArrayCoefficient>("mfem!VectorArrayCoefficient",
      jlcxx::julia_base_type<mfem::VectorCoefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorArrayCoefficient>>(new jlcxx::TypeWrapper<mfem::VectorArrayCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::VectorArrayCoefficient::VectorArrayCoefficient(int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:630:13
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::VectorArrayCoefficient::SetTime(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorArrayCoefficient::SetTime(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:633:9
    t.method("SetTime", [](mfem::VectorArrayCoefficient& a, double arg0)->void { a.SetTime(arg0); });
    t.method("SetTime", [](mfem::VectorArrayCoefficient* a, double arg0)->void { a->SetTime(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Coefficient * mfem::VectorArrayCoefficient::GetCoeff(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Coefficient * mfem::VectorArrayCoefficient::GetCoeff(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:636:17
    t.method("GetCoeff", [](mfem::VectorArrayCoefficient& a, int arg0)->mfem::Coefficient * { return a.GetCoeff(arg0); });
    t.method("GetCoeff", [](mfem::VectorArrayCoefficient* a, int arg0)->mfem::Coefficient * { return a->GetCoeff(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Coefficient ** mfem::VectorArrayCoefficient::GetCoeffs() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Coefficient ** mfem::VectorArrayCoefficient::GetCoeffs()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:639:18
    t.method("GetCoeffs", [](mfem::VectorArrayCoefficient& a)->mfem::Coefficient ** { return a.GetCoeffs(); });
    t.method("GetCoeffs", [](mfem::VectorArrayCoefficient* a)->mfem::Coefficient ** { return a->GetCoeffs(); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorArrayCoefficient::Set(int, mfem::Coefficient *, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorArrayCoefficient::Set(int, mfem::Coefficient *, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:642:9
    t.method("Set", [](mfem::VectorArrayCoefficient& a, int arg0, mfem::Coefficient * arg1)->void { a.Set(arg0, arg1); });
    t.method("Set", [](mfem::VectorArrayCoefficient& a, int arg0, mfem::Coefficient * arg1, bool arg2)->void { a.Set(arg0, arg1, arg2); });
    t.method("Set", [](mfem::VectorArrayCoefficient* a, int arg0, mfem::Coefficient * arg1)->void { a->Set(arg0, arg1); });
    t.method("Set", [](mfem::VectorArrayCoefficient* a, int arg0, mfem::Coefficient * arg1, bool arg2)->void { a->Set(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for double mfem::VectorArrayCoefficient::Eval(int, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::VectorArrayCoefficient::Eval(int, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:646:11
    t.method("Eval", [](mfem::VectorArrayCoefficient& a, int arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->double { return a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::VectorArrayCoefficient* a, int arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->double { return a->Eval(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorArrayCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorArrayCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:652:17
    t.method("Eval", [](mfem::VectorArrayCoefficient& a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::VectorArrayCoefficient* a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->Eval(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorArrayCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_VectorArrayCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_VectorArrayCoefficient(module));
}
