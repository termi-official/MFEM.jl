// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::PWVectorCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::PWVectorCoefficient> : std::false_type { };
template<> struct SuperType<mfem::PWVectorCoefficient> { typedef mfem::VectorCoefficient type; };
}

// Class generating the wrapper for type mfem::PWVectorCoefficient
// signature to use in the veto file: mfem::PWVectorCoefficient
struct Jlmfem_PWVectorCoefficient: public Wrapper {

  Jlmfem_PWVectorCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::PWVectorCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:514:7
    jlcxx::TypeWrapper<mfem::PWVectorCoefficient>  t = jlModule.add_type<mfem::PWVectorCoefficient>("mfem!PWVectorCoefficient",
      jlcxx::julia_base_type<mfem::VectorCoefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::PWVectorCoefficient>>(new jlcxx::TypeWrapper<mfem::PWVectorCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::PWVectorCoefficient::PWVectorCoefficient(int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:543:13
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::PWVectorCoefficient::SetTime(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWVectorCoefficient::SetTime(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:560:17
    t.method("SetTime", [](mfem::PWVectorCoefficient& a, double arg0)->void { a.SetTime(arg0); });
    t.method("SetTime", [](mfem::PWVectorCoefficient* a, double arg0)->void { a->SetTime(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::PWVectorCoefficient::UpdateCoefficient(int, mfem::VectorCoefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWVectorCoefficient::UpdateCoefficient(int, mfem::VectorCoefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:568:9
    t.method("UpdateCoefficient", [](mfem::PWVectorCoefficient& a, int arg0, mfem::VectorCoefficient & arg1)->void { a.UpdateCoefficient(arg0, arg1); });
    t.method("UpdateCoefficient", [](mfem::PWVectorCoefficient* a, int arg0, mfem::VectorCoefficient & arg1)->void { a->UpdateCoefficient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::PWVectorCoefficient::ZeroCoefficient(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWVectorCoefficient::ZeroCoefficient(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:571:9
    t.method("ZeroCoefficient", [](mfem::PWVectorCoefficient& a, int arg0)->void { a.ZeroCoefficient(arg0); });
    t.method("ZeroCoefficient", [](mfem::PWVectorCoefficient* a, int arg0)->void { a->ZeroCoefficient(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::PWVectorCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWVectorCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:575:17
    t.method("Eval", [](mfem::PWVectorCoefficient& a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::PWVectorCoefficient* a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->Eval(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::PWVectorCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_PWVectorCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_PWVectorCoefficient(module));
}
