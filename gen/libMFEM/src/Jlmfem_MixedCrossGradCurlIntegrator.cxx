// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::MixedCrossGradCurlIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::MixedCrossGradCurlIntegrator> : std::false_type { };
template<> struct SuperType<mfem::MixedCrossGradCurlIntegrator> { typedef mfem::MixedVectorIntegrator type; };
}

// Class generating the wrapper for type mfem::MixedCrossGradCurlIntegrator
// signature to use in the veto file: mfem::MixedCrossGradCurlIntegrator
struct Jlmfem_MixedCrossGradCurlIntegrator: public Wrapper {

  Jlmfem_MixedCrossGradCurlIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::MixedCrossGradCurlIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1340:7
    jlcxx::TypeWrapper<mfem::MixedCrossGradCurlIntegrator>  t = jlModule.add_type<mfem::MixedCrossGradCurlIntegrator>("mfem!MixedCrossGradCurlIntegrator",
      jlcxx::julia_base_type<mfem::MixedVectorIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::MixedCrossGradCurlIntegrator>>(new jlcxx::TypeWrapper<mfem::MixedCrossGradCurlIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::MixedCrossGradCurlIntegrator::MixedCrossGradCurlIntegrator(mfem::VectorCoefficient &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1343:4
    t.constructor<mfem::VectorCoefficient &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for bool mfem::MixedCrossGradCurlIntegrator::VerifyFiniteElementTypes(const mfem::FiniteElement &, const mfem::FiniteElement &) (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::MixedCrossGradCurlIntegrator::VerifyFiniteElementTypes(const mfem::FiniteElement &, const mfem::FiniteElement &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1346:24
    t.method("VerifyFiniteElementTypes", [](mfem::MixedCrossGradCurlIntegrator const& a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1)->bool { return a.VerifyFiniteElementTypes(arg0, arg1); });
    t.method("VerifyFiniteElementTypes", [](mfem::MixedCrossGradCurlIntegrator const* a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1)->bool { return a->VerifyFiniteElementTypes(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for const char * mfem::MixedCrossGradCurlIntegrator::FiniteElementTypeFailureMessage() (" __HERE__ ")");
    // signature to use in the veto list: const char * mfem::MixedCrossGradCurlIntegrator::FiniteElementTypeFailureMessage()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1357:32
    t.method("FiniteElementTypeFailureMessage", [](mfem::MixedCrossGradCurlIntegrator const& a) { return (std::string)a.FiniteElementTypeFailureMessage(); });
    t.method("FiniteElementTypeFailureMessage", [](mfem::MixedCrossGradCurlIntegrator const* a) { return (std::string)a->FiniteElementTypeFailureMessage(); });

    DEBUG_MSG("Adding wrapper for int mfem::MixedCrossGradCurlIntegrator::GetTrialVDim(const mfem::FiniteElement &) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::MixedCrossGradCurlIntegrator::GetTrialVDim(const mfem::FiniteElement &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1364:23
    t.method("GetTrialVDim", [](mfem::MixedCrossGradCurlIntegrator& a, const mfem::FiniteElement & arg0)->int { return a.GetTrialVDim(arg0); });
    t.method("GetTrialVDim", [](mfem::MixedCrossGradCurlIntegrator* a, const mfem::FiniteElement & arg0)->int { return a->GetTrialVDim(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::MixedCrossGradCurlIntegrator::CalcTrialShape(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::MixedCrossGradCurlIntegrator::CalcTrialShape(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1367:24
    t.method("CalcTrialShape", [](mfem::MixedCrossGradCurlIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a.CalcTrialShape(arg0, arg1, arg2); });
    t.method("CalcTrialShape", [](mfem::MixedCrossGradCurlIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a->CalcTrialShape(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for int mfem::MixedCrossGradCurlIntegrator::GetTestVDim(const mfem::FiniteElement &) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::MixedCrossGradCurlIntegrator::GetTestVDim(const mfem::FiniteElement &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1372:23
    t.method("GetTestVDim", [](mfem::MixedCrossGradCurlIntegrator& a, const mfem::FiniteElement & arg0)->int { return a.GetTestVDim(arg0); });
    t.method("GetTestVDim", [](mfem::MixedCrossGradCurlIntegrator* a, const mfem::FiniteElement & arg0)->int { return a->GetTestVDim(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::MixedCrossGradCurlIntegrator::CalcTestShape(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::MixedCrossGradCurlIntegrator::CalcTestShape(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1375:24
    t.method("CalcTestShape", [](mfem::MixedCrossGradCurlIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a.CalcTestShape(arg0, arg1, arg2); });
    t.method("CalcTestShape", [](mfem::MixedCrossGradCurlIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a->CalcTestShape(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::MixedCrossGradCurlIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_MixedCrossGradCurlIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_MixedCrossGradCurlIntegrator(module));
}
