// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::Operator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::Operator> : std::false_type { };
}

// Class generating the wrapper for type mfem::Operator
// signature to use in the veto file: mfem::Operator
struct Jlmfem_Operator: public Wrapper {

  Jlmfem_Operator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::Operator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:24:7
    jlcxx::TypeWrapper<mfem::Operator>  t = jlModule.add_type<mfem::Operator>("mfem!Operator");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::Operator>>(new jlcxx::TypeWrapper<mfem::Operator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for void mfem::Operator::InitTVectors(const mfem::Operator *, const mfem::Operator *, const mfem::Operator *, mfem::Vector &, mfem::Vector &, mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Operator::InitTVectors(const mfem::Operator *, const mfem::Operator *, const mfem::Operator *, mfem::Vector &, mfem::Vector &, mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:54:9
    t.method("InitTVectors", [](mfem::Operator const& a, const mfem::Operator * arg0, const mfem::Operator * arg1, const mfem::Operator * arg2, mfem::Vector & arg3, mfem::Vector & arg4, mfem::Vector & arg5, mfem::Vector & arg6)->void { a.InitTVectors(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("InitTVectors", [](mfem::Operator const* a, const mfem::Operator * arg0, const mfem::Operator * arg1, const mfem::Operator * arg2, mfem::Vector & arg3, mfem::Vector & arg4, mfem::Vector & arg5, mfem::Vector & arg6)->void { a->InitTVectors(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });



    DEBUG_MSG("Adding wrapper for int mfem::Operator::Height() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Operator::Height()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:66:15
    t.method("Height", [](mfem::Operator const& a)->int { return a.Height(); });
    t.method("Height", [](mfem::Operator const* a)->int { return a->Height(); });

    DEBUG_MSG("Adding wrapper for int mfem::Operator::NumRows() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Operator::NumRows()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:69:15
    t.method("NumRows", [](mfem::Operator const& a)->int { return a.NumRows(); });
    t.method("NumRows", [](mfem::Operator const* a)->int { return a->NumRows(); });

    DEBUG_MSG("Adding wrapper for int mfem::Operator::Width() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Operator::Width()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:72:15
    t.method("Width", [](mfem::Operator const& a)->int { return a.Width(); });
    t.method("Width", [](mfem::Operator const* a)->int { return a->Width(); });

    DEBUG_MSG("Adding wrapper for int mfem::Operator::NumCols() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Operator::NumCols()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:75:15
    t.method("NumCols", [](mfem::Operator const& a)->int { return a.NumCols(); });
    t.method("NumCols", [](mfem::Operator const* a)->int { return a->NumCols(); });

    DEBUG_MSG("Adding wrapper for mfem::MemoryClass mfem::Operator::GetMemoryClass() (" __HERE__ ")");
    // signature to use in the veto list: mfem::MemoryClass mfem::Operator::GetMemoryClass()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:86:24
    t.method("GetMemoryClass", [](mfem::Operator const& a)->mfem::MemoryClass { return a.GetMemoryClass(); });
    t.method("GetMemoryClass", [](mfem::Operator const* a)->mfem::MemoryClass { return a->GetMemoryClass(); });

    DEBUG_MSG("Adding wrapper for void mfem::Operator::Mult(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Operator::Mult(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:89:17
    t.method("Mult", [](mfem::Operator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.Mult(arg0, arg1); });
    t.method("Mult", [](mfem::Operator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->Mult(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Operator::MultTranspose(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Operator::MultTranspose(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:93:17
    t.method("MultTranspose", [](mfem::Operator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.MultTranspose(arg0, arg1); });
    t.method("MultTranspose", [](mfem::Operator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->MultTranspose(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for mfem::Operator & mfem::Operator::GetGradient(const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Operator & mfem::Operator::GetGradient(const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:98:22
    t.method("GetGradient", [](mfem::Operator const& a, const mfem::Vector & arg0)->mfem::Operator & { return a.GetGradient(arg0); });
    t.method("GetGradient", [](mfem::Operator const* a, const mfem::Vector & arg0)->mfem::Operator & { return a->GetGradient(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Operator::AssembleDiagonal(mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Operator::AssembleDiagonal(mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:107:17
    t.method("AssembleDiagonal", [](mfem::Operator const& a, mfem::Vector & arg0)->void { a.AssembleDiagonal(arg0); });
    t.method("AssembleDiagonal", [](mfem::Operator const* a, mfem::Vector & arg0)->void { a->AssembleDiagonal(arg0); });

    DEBUG_MSG("Adding wrapper for const mfem::Operator * mfem::Operator::GetProlongation() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Operator * mfem::Operator::GetProlongation()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:115:28
    t.method("GetProlongation", [](mfem::Operator const& a)->const mfem::Operator * { return a.GetProlongation(); });
    t.method("GetProlongation", [](mfem::Operator const* a)->const mfem::Operator * { return a->GetProlongation(); });

    DEBUG_MSG("Adding wrapper for const mfem::Operator * mfem::Operator::GetRestriction() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Operator * mfem::Operator::GetRestriction()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:118:28
    t.method("GetRestriction", [](mfem::Operator const& a)->const mfem::Operator * { return a.GetRestriction(); });
    t.method("GetRestriction", [](mfem::Operator const* a)->const mfem::Operator * { return a->GetRestriction(); });

    DEBUG_MSG("Adding wrapper for const mfem::Operator * mfem::Operator::GetOutputProlongation() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Operator * mfem::Operator::GetOutputProlongation()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:121:28
    t.method("GetOutputProlongation", [](mfem::Operator const& a)->const mfem::Operator * { return a.GetOutputProlongation(); });
    t.method("GetOutputProlongation", [](mfem::Operator const* a)->const mfem::Operator * { return a->GetOutputProlongation(); });

    DEBUG_MSG("Adding wrapper for const mfem::Operator * mfem::Operator::GetOutputRestrictionTranspose() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Operator * mfem::Operator::GetOutputRestrictionTranspose()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:129:28
    t.method("GetOutputRestrictionTranspose", [](mfem::Operator const& a)->const mfem::Operator * { return a.GetOutputRestrictionTranspose(); });
    t.method("GetOutputRestrictionTranspose", [](mfem::Operator const* a)->const mfem::Operator * { return a->GetOutputRestrictionTranspose(); });

    DEBUG_MSG("Adding wrapper for const mfem::Operator * mfem::Operator::GetOutputRestriction() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Operator * mfem::Operator::GetOutputRestriction()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:132:28
    t.method("GetOutputRestriction", [](mfem::Operator const& a)->const mfem::Operator * { return a.GetOutputRestriction(); });
    t.method("GetOutputRestriction", [](mfem::Operator const* a)->const mfem::Operator * { return a->GetOutputRestriction(); });

    DEBUG_MSG("Adding wrapper for void mfem::Operator::FormLinearSystem(const mfem::Array<int> &, mfem::Vector &, mfem::Vector &, mfem::Operator *&, mfem::Vector &, mfem::Vector &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Operator::FormLinearSystem(const mfem::Array<int> &, mfem::Vector &, mfem::Vector &, mfem::Operator *&, mfem::Vector &, mfem::Vector &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:167:9
    t.method("FormLinearSystem", [](mfem::Operator& a, const mfem::Array<int> & arg0, mfem::Vector & arg1, mfem::Vector & arg2, mfem::Operator *& arg3, mfem::Vector & arg4, mfem::Vector & arg5)->void { a.FormLinearSystem(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("FormLinearSystem", [](mfem::Operator& a, const mfem::Array<int> & arg0, mfem::Vector & arg1, mfem::Vector & arg2, mfem::Operator *& arg3, mfem::Vector & arg4, mfem::Vector & arg5, int arg6)->void { a.FormLinearSystem(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("FormLinearSystem", [](mfem::Operator* a, const mfem::Array<int> & arg0, mfem::Vector & arg1, mfem::Vector & arg2, mfem::Operator *& arg3, mfem::Vector & arg4, mfem::Vector & arg5)->void { a->FormLinearSystem(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("FormLinearSystem", [](mfem::Operator* a, const mfem::Array<int> & arg0, mfem::Vector & arg1, mfem::Vector & arg2, mfem::Operator *& arg3, mfem::Vector & arg4, mfem::Vector & arg5, int arg6)->void { a->FormLinearSystem(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for void mfem::Operator::FormRectangularLinearSystem(const mfem::Array<int> &, const mfem::Array<int> &, mfem::Vector &, mfem::Vector &, mfem::Operator *&, mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Operator::FormRectangularLinearSystem(const mfem::Array<int> &, const mfem::Array<int> &, mfem::Vector &, mfem::Vector &, mfem::Operator *&, mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:198:9
    t.method("FormRectangularLinearSystem", [](mfem::Operator& a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, mfem::Vector & arg2, mfem::Vector & arg3, mfem::Operator *& arg4, mfem::Vector & arg5, mfem::Vector & arg6)->void { a.FormRectangularLinearSystem(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("FormRectangularLinearSystem", [](mfem::Operator* a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, mfem::Vector & arg2, mfem::Vector & arg3, mfem::Operator *& arg4, mfem::Vector & arg5, mfem::Vector & arg6)->void { a->FormRectangularLinearSystem(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for void mfem::Operator::RecoverFEMSolution(const mfem::Vector &, const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Operator::RecoverFEMSolution(const mfem::Vector &, const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:212:17
    t.method("RecoverFEMSolution", [](mfem::Operator& a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a.RecoverFEMSolution(arg0, arg1, arg2); });
    t.method("RecoverFEMSolution", [](mfem::Operator* a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a->RecoverFEMSolution(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Operator::FormSystemOperator(const mfem::Array<int> &, mfem::Operator *&) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Operator::FormSystemOperator(const mfem::Array<int> &, mfem::Operator *&)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:219:9
    t.method("FormSystemOperator", [](mfem::Operator& a, const mfem::Array<int> & arg0, mfem::Operator *& arg1)->void { a.FormSystemOperator(arg0, arg1); });
    t.method("FormSystemOperator", [](mfem::Operator* a, const mfem::Array<int> & arg0, mfem::Operator *& arg1)->void { a->FormSystemOperator(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Operator::FormRectangularSystemOperator(const mfem::Array<int> &, const mfem::Array<int> &, mfem::Operator *&) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Operator::FormRectangularSystemOperator(const mfem::Array<int> &, const mfem::Array<int> &, mfem::Operator *&)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:227:9
    t.method("FormRectangularSystemOperator", [](mfem::Operator& a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, mfem::Operator *& arg2)->void { a.FormRectangularSystemOperator(arg0, arg1, arg2); });
    t.method("FormRectangularSystemOperator", [](mfem::Operator* a, const mfem::Array<int> & arg0, const mfem::Array<int> & arg1, mfem::Operator *& arg2)->void { a->FormRectangularSystemOperator(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Operator::FormDiscreteOperator(mfem::Operator *&) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Operator::FormDiscreteOperator(mfem::Operator *&)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:242:9
    t.method("FormDiscreteOperator", [](mfem::Operator& a, mfem::Operator *& arg0)->void { a.FormDiscreteOperator(arg0); });
    t.method("FormDiscreteOperator", [](mfem::Operator* a, mfem::Operator *& arg0)->void { a->FormDiscreteOperator(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Operator::Type mfem::Operator::GetType() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Operator::Type mfem::Operator::GetType()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:276:9
    t.method("GetType", [](mfem::Operator const& a)->mfem::Operator::Type { return a.GetType(); });
    t.method("GetType", [](mfem::Operator const* a)->mfem::Operator::Type { return a->GetType(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::Operator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_Operator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_Operator(module));
}
