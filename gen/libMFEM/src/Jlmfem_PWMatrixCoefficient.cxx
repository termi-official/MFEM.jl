// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::PWMatrixCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::PWMatrixCoefficient> : std::false_type { };
template<> struct SuperType<mfem::PWMatrixCoefficient> { typedef mfem::MatrixCoefficient type; };
}

// Class generating the wrapper for type mfem::PWMatrixCoefficient
// signature to use in the veto file: mfem::PWMatrixCoefficient
struct Jlmfem_PWMatrixCoefficient: public Wrapper {

  Jlmfem_PWMatrixCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::PWMatrixCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:966:7
    jlcxx::TypeWrapper<mfem::PWMatrixCoefficient>  t = jlModule.add_type<mfem::PWMatrixCoefficient>("mfem!PWMatrixCoefficient",
      jlcxx::julia_base_type<mfem::MatrixCoefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::PWMatrixCoefficient>>(new jlcxx::TypeWrapper<mfem::PWMatrixCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::PWMatrixCoefficient::PWMatrixCoefficient(int, bool) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:995:13
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, bool>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::PWMatrixCoefficient::PWMatrixCoefficient(int, int, bool) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:999:13
    t.constructor<int, int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, bool>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::PWMatrixCoefficient::SetTime(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWMatrixCoefficient::SetTime(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1036:17
    t.method("SetTime", [](mfem::PWMatrixCoefficient& a, double arg0)->void { a.SetTime(arg0); });
    t.method("SetTime", [](mfem::PWMatrixCoefficient* a, double arg0)->void { a->SetTime(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::PWMatrixCoefficient::UpdateCoefficient(int, mfem::MatrixCoefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWMatrixCoefficient::UpdateCoefficient(int, mfem::MatrixCoefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1044:9
    t.method("UpdateCoefficient", [](mfem::PWMatrixCoefficient& a, int arg0, mfem::MatrixCoefficient & arg1)->void { a.UpdateCoefficient(arg0, arg1); });
    t.method("UpdateCoefficient", [](mfem::PWMatrixCoefficient* a, int arg0, mfem::MatrixCoefficient & arg1)->void { a->UpdateCoefficient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::PWMatrixCoefficient::ZeroCoefficient(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWMatrixCoefficient::ZeroCoefficient(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1047:9
    t.method("ZeroCoefficient", [](mfem::PWMatrixCoefficient& a, int arg0)->void { a.ZeroCoefficient(arg0); });
    t.method("ZeroCoefficient", [](mfem::PWMatrixCoefficient* a, int arg0)->void { a->ZeroCoefficient(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::PWMatrixCoefficient::Eval(mfem::DenseMatrix &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PWMatrixCoefficient::Eval(mfem::DenseMatrix &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1051:17
    t.method("Eval", [](mfem::PWMatrixCoefficient& a, mfem::DenseMatrix & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::PWMatrixCoefficient* a, mfem::DenseMatrix & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->Eval(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::PWMatrixCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_PWMatrixCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_PWMatrixCoefficient(module));
}
