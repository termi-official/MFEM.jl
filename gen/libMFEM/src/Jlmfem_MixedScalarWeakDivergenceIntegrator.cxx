// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::MixedScalarWeakDivergenceIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::MixedScalarWeakDivergenceIntegrator> : std::false_type { };
template<> struct SuperType<mfem::MixedScalarWeakDivergenceIntegrator> { typedef mfem::MixedScalarVectorIntegrator type; };
}

// Class generating the wrapper for type mfem::MixedScalarWeakDivergenceIntegrator
// signature to use in the veto file: mfem::MixedScalarWeakDivergenceIntegrator
struct Jlmfem_MixedScalarWeakDivergenceIntegrator: public Wrapper {

  Jlmfem_MixedScalarWeakDivergenceIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::MixedScalarWeakDivergenceIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1764:7
    jlcxx::TypeWrapper<mfem::MixedScalarWeakDivergenceIntegrator>  t = jlModule.add_type<mfem::MixedScalarWeakDivergenceIntegrator>("mfem!MixedScalarWeakDivergenceIntegrator",
      jlcxx::julia_base_type<mfem::MixedScalarVectorIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::MixedScalarWeakDivergenceIntegrator>>(new jlcxx::TypeWrapper<mfem::MixedScalarWeakDivergenceIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::MixedScalarWeakDivergenceIntegrator::MixedScalarWeakDivergenceIntegrator(mfem::VectorCoefficient &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1767:4
    t.constructor<mfem::VectorCoefficient &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for bool mfem::MixedScalarWeakDivergenceIntegrator::VerifyFiniteElementTypes(const mfem::FiniteElement &, const mfem::FiniteElement &) (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::MixedScalarWeakDivergenceIntegrator::VerifyFiniteElementTypes(const mfem::FiniteElement &, const mfem::FiniteElement &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1770:24
    t.method("VerifyFiniteElementTypes", [](mfem::MixedScalarWeakDivergenceIntegrator const& a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1)->bool { return a.VerifyFiniteElementTypes(arg0, arg1); });
    t.method("VerifyFiniteElementTypes", [](mfem::MixedScalarWeakDivergenceIntegrator const* a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1)->bool { return a->VerifyFiniteElementTypes(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for const char * mfem::MixedScalarWeakDivergenceIntegrator::FiniteElementTypeFailureMessage() (" __HERE__ ")");
    // signature to use in the veto list: const char * mfem::MixedScalarWeakDivergenceIntegrator::FiniteElementTypeFailureMessage()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1779:32
    t.method("FiniteElementTypeFailureMessage", [](mfem::MixedScalarWeakDivergenceIntegrator const& a) { return (std::string)a.FiniteElementTypeFailureMessage(); });
    t.method("FiniteElementTypeFailureMessage", [](mfem::MixedScalarWeakDivergenceIntegrator const* a) { return (std::string)a->FiniteElementTypeFailureMessage(); });

    DEBUG_MSG("Adding wrapper for int mfem::MixedScalarWeakDivergenceIntegrator::GetVDim(const mfem::FiniteElement &) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::MixedScalarWeakDivergenceIntegrator::GetVDim(const mfem::FiniteElement &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1786:15
    t.method("GetVDim", [](mfem::MixedScalarWeakDivergenceIntegrator& a, const mfem::FiniteElement & arg0)->int { return a.GetVDim(arg0); });
    t.method("GetVDim", [](mfem::MixedScalarWeakDivergenceIntegrator* a, const mfem::FiniteElement & arg0)->int { return a->GetVDim(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::MixedScalarWeakDivergenceIntegrator::CalcVShape(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::MixedScalarWeakDivergenceIntegrator::CalcVShape(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:1789:24
    t.method("CalcVShape", [](mfem::MixedScalarWeakDivergenceIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a.CalcVShape(arg0, arg1, arg2); });
    t.method("CalcVShape", [](mfem::MixedScalarWeakDivergenceIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a->CalcVShape(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::MixedScalarWeakDivergenceIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_MixedScalarWeakDivergenceIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_MixedScalarWeakDivergenceIntegrator(module));
}
