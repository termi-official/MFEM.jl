// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::LBFGSSolver> : std::false_type { };
  template<> struct DefaultConstructible<mfem::LBFGSSolver> : std::false_type { };
template<> struct SuperType<mfem::LBFGSSolver> { typedef mfem::NewtonSolver type; };
}

// Class generating the wrapper for type mfem::LBFGSSolver
// signature to use in the veto file: mfem::LBFGSSolver
struct Jlmfem_LBFGSSolver: public Wrapper {

  Jlmfem_LBFGSSolver(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::LBFGSSolver (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:698:7
    jlcxx::TypeWrapper<mfem::LBFGSSolver>  t = jlModule.add_type<mfem::LBFGSSolver>("mfem!LBFGSSolver",
      jlcxx::julia_base_type<mfem::NewtonSolver>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::LBFGSSolver>>(new jlcxx::TypeWrapper<mfem::LBFGSSolver>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::LBFGSSolver::SetOperator(const mfem::Operator &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::LBFGSSolver::SetOperator(const mfem::Operator &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:734:17
    t.method("SetOperator", [](mfem::LBFGSSolver& a, const mfem::Operator & arg0)->void { a.SetOperator(arg0); });
    t.method("SetOperator", [](mfem::LBFGSSolver* a, const mfem::Operator & arg0)->void { a->SetOperator(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::LBFGSSolver::SetHistorySize(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::LBFGSSolver::SetHistorySize(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:740:9
    t.method("SetHistorySize", [](mfem::LBFGSSolver& a, int arg0)->void { a.SetHistorySize(arg0); });
    t.method("SetHistorySize", [](mfem::LBFGSSolver* a, int arg0)->void { a->SetHistorySize(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::LBFGSSolver::Mult(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::LBFGSSolver::Mult(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:748:17
    t.method("Mult", [](mfem::LBFGSSolver const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.Mult(arg0, arg1); });
    t.method("Mult", [](mfem::LBFGSSolver const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->Mult(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::LBFGSSolver::SetPreconditioner(mfem::Solver &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::LBFGSSolver::SetPreconditioner(mfem::Solver &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:750:17
    t.method("SetPreconditioner", [](mfem::LBFGSSolver& a, mfem::Solver & arg0)->void { a.SetPreconditioner(arg0); });
    t.method("SetPreconditioner", [](mfem::LBFGSSolver* a, mfem::Solver & arg0)->void { a->SetPreconditioner(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::LBFGSSolver::SetSolver(mfem::Solver &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::LBFGSSolver::SetSolver(mfem::Solver &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:752:17
    t.method("SetSolver", [](mfem::LBFGSSolver& a, mfem::Solver & arg0)->void { a.SetSolver(arg0); });
    t.method("SetSolver", [](mfem::LBFGSSolver* a, mfem::Solver & arg0)->void { a->SetSolver(arg0); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::LBFGSSolver>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_LBFGSSolver(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_LBFGSSolver(module));
}
