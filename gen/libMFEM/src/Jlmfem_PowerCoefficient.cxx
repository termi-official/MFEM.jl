// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::PowerCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::PowerCoefficient> : std::false_type { };
template<> struct SuperType<mfem::PowerCoefficient> { typedef mfem::Coefficient type; };
}

// Class generating the wrapper for type mfem::PowerCoefficient
// signature to use in the veto file: mfem::PowerCoefficient
struct Jlmfem_PowerCoefficient: public Wrapper {

  Jlmfem_PowerCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::PowerCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1451:7
    jlcxx::TypeWrapper<mfem::PowerCoefficient>  t = jlModule.add_type<mfem::PowerCoefficient>("mfem!PowerCoefficient",
      jlcxx::julia_base_type<mfem::Coefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::PowerCoefficient>>(new jlcxx::TypeWrapper<mfem::PowerCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::PowerCoefficient::PowerCoefficient(mfem::Coefficient &, double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1460:4
    t.constructor<mfem::Coefficient &, double>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::PowerCoefficient::SetTime(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PowerCoefficient::SetTime(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1464:9
    t.method("SetTime", [](mfem::PowerCoefficient& a, double arg0)->void { a.SetTime(arg0); });
    t.method("SetTime", [](mfem::PowerCoefficient* a, double arg0)->void { a->SetTime(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::PowerCoefficient::SetACoef(mfem::Coefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PowerCoefficient::SetACoef(mfem::Coefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1467:9
    t.method("SetACoef", [](mfem::PowerCoefficient& a, mfem::Coefficient & arg0)->void { a.SetACoef(arg0); });
    t.method("SetACoef", [](mfem::PowerCoefficient* a, mfem::Coefficient & arg0)->void { a->SetACoef(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Coefficient * mfem::PowerCoefficient::GetACoef() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Coefficient * mfem::PowerCoefficient::GetACoef()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1469:18
    t.method("GetACoef", [](mfem::PowerCoefficient const& a)->mfem::Coefficient * { return a.GetACoef(); });
    t.method("GetACoef", [](mfem::PowerCoefficient const* a)->mfem::Coefficient * { return a->GetACoef(); });

    DEBUG_MSG("Adding wrapper for void mfem::PowerCoefficient::SetExponent(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::PowerCoefficient::SetExponent(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1472:9
    t.method("SetExponent", [](mfem::PowerCoefficient& a, double arg0)->void { a.SetExponent(arg0); });
    t.method("SetExponent", [](mfem::PowerCoefficient* a, double arg0)->void { a->SetExponent(arg0); });

    DEBUG_MSG("Adding wrapper for double mfem::PowerCoefficient::GetExponent() (" __HERE__ ")");
    // signature to use in the veto list: double mfem::PowerCoefficient::GetExponent()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1474:11
    t.method("GetExponent", [](mfem::PowerCoefficient const& a)->double { return a.GetExponent(); });
    t.method("GetExponent", [](mfem::PowerCoefficient const* a)->double { return a->GetExponent(); });

    DEBUG_MSG("Adding wrapper for double mfem::PowerCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::PowerCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1477:19
    t.method("Eval", [](mfem::PowerCoefficient& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a.Eval(arg0, arg1); });
    t.method("Eval", [](mfem::PowerCoefficient* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a->Eval(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::PowerCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_PowerCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_PowerCoefficient(module));
}
