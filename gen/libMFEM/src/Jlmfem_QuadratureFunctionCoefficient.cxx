// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::QuadratureFunctionCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::QuadratureFunctionCoefficient> : std::false_type { };
template<> struct SuperType<mfem::QuadratureFunctionCoefficient> { typedef mfem::Coefficient type; };
}

// Class generating the wrapper for type mfem::QuadratureFunctionCoefficient
// signature to use in the veto file: mfem::QuadratureFunctionCoefficient
struct Jlmfem_QuadratureFunctionCoefficient: public Wrapper {

  Jlmfem_QuadratureFunctionCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::QuadratureFunctionCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:2076:7
    jlcxx::TypeWrapper<mfem::QuadratureFunctionCoefficient>  t = jlModule.add_type<mfem::QuadratureFunctionCoefficient>("mfem!QuadratureFunctionCoefficient",
      jlcxx::julia_base_type<mfem::Coefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::QuadratureFunctionCoefficient>>(new jlcxx::TypeWrapper<mfem::QuadratureFunctionCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::QuadratureFunctionCoefficient::QuadratureFunctionCoefficient(mfem::QuadratureFunction &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:2083:4
    t.constructor<mfem::QuadratureFunction &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for const mfem::QuadratureFunction & mfem::QuadratureFunctionCoefficient::GetQuadFunction() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::QuadratureFunction & mfem::QuadratureFunctionCoefficient::GetQuadFunction()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:2085:30
    t.method("GetQuadFunction", [](mfem::QuadratureFunctionCoefficient const& a)->const mfem::QuadratureFunction & { return a.GetQuadFunction(); });
    t.method("GetQuadFunction", [](mfem::QuadratureFunctionCoefficient const* a)->const mfem::QuadratureFunction & { return a->GetQuadFunction(); });

    DEBUG_MSG("Adding wrapper for double mfem::QuadratureFunctionCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::QuadratureFunctionCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:2087:19
    t.method("Eval", [](mfem::QuadratureFunctionCoefficient& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a.Eval(arg0, arg1); });
    t.method("Eval", [](mfem::QuadratureFunctionCoefficient* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a->Eval(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::QuadratureFunctionCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_QuadratureFunctionCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_QuadratureFunctionCoefficient(module));
}
