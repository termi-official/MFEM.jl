// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::TransposeIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::TransposeIntegrator> : std::false_type { };
template<> struct SuperType<mfem::TransposeIntegrator> { typedef mfem::BilinearFormIntegrator type; };
}

// Class generating the wrapper for type mfem::TransposeIntegrator
// signature to use in the veto file: mfem::TransposeIntegrator
struct Jlmfem_TransposeIntegrator: public Wrapper {

  Jlmfem_TransposeIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::TransposeIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:252:7
    jlcxx::TypeWrapper<mfem::TransposeIntegrator>  t = jlModule.add_type<mfem::TransposeIntegrator>("mfem!TransposeIntegrator",
      jlcxx::julia_base_type<mfem::BilinearFormIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::TransposeIntegrator>>(new jlcxx::TypeWrapper<mfem::TransposeIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::TransposeIntegrator(mfem::BilinearFormIntegrator *, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:261:4
    t.constructor<mfem::BilinearFormIntegrator *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<mfem::BilinearFormIntegrator *, int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::SetIntRule(const mfem::IntegrationRule *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::SetIntRule(const mfem::IntegrationRule *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:264:17
    t.method("SetIntRule", [](mfem::TransposeIntegrator& a, const mfem::IntegrationRule * arg0)->void { a.SetIntRule(arg0); });
    t.method("SetIntRule", [](mfem::TransposeIntegrator* a, const mfem::IntegrationRule * arg0)->void { a->SetIntRule(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AssembleElementMatrix(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AssembleElementMatrix(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:266:17
    t.method("AssembleElementMatrix", [](mfem::TransposeIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a.AssembleElementMatrix(arg0, arg1, arg2); });
    t.method("AssembleElementMatrix", [](mfem::TransposeIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a->AssembleElementMatrix(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AssembleElementMatrix2(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AssembleElementMatrix2(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:270:17
    t.method("AssembleElementMatrix2", [](mfem::TransposeIntegrator& a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::ElementTransformation & arg2, mfem::DenseMatrix & arg3)->void { a.AssembleElementMatrix2(arg0, arg1, arg2, arg3); });
    t.method("AssembleElementMatrix2", [](mfem::TransposeIntegrator* a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::ElementTransformation & arg2, mfem::DenseMatrix & arg3)->void { a->AssembleElementMatrix2(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AssembleFaceMatrix(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AssembleFaceMatrix(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:276:17
    t.method("AssembleFaceMatrix", [](mfem::TransposeIntegrator& a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::FaceElementTransformations & arg2, mfem::DenseMatrix & arg3)->void { a.AssembleFaceMatrix(arg0, arg1, arg2, arg3); });
    t.method("AssembleFaceMatrix", [](mfem::TransposeIntegrator* a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::FaceElementTransformations & arg2, mfem::DenseMatrix & arg3)->void { a->AssembleFaceMatrix(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AssemblePA(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AssemblePA(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:283:17
    t.method("AssemblePA", [](mfem::TransposeIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssemblePA(arg0); });
    t.method("AssemblePA", [](mfem::TransposeIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssemblePA(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AssemblePAInteriorFaces(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AssemblePAInteriorFaces(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:288:17
    t.method("AssemblePAInteriorFaces", [](mfem::TransposeIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssemblePAInteriorFaces(arg0); });
    t.method("AssemblePAInteriorFaces", [](mfem::TransposeIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssemblePAInteriorFaces(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AssemblePABoundaryFaces(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AssemblePABoundaryFaces(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:293:17
    t.method("AssemblePABoundaryFaces", [](mfem::TransposeIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssemblePABoundaryFaces(arg0); });
    t.method("AssemblePABoundaryFaces", [](mfem::TransposeIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssemblePABoundaryFaces(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AddMultTransposePA(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AddMultTransposePA(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:298:17
    t.method("AddMultTransposePA", [](mfem::TransposeIntegrator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultTransposePA(arg0, arg1); });
    t.method("AddMultTransposePA", [](mfem::TransposeIntegrator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultTransposePA(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AddMultPA(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AddMultPA(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:303:17
    t.method("AddMultPA", [](mfem::TransposeIntegrator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultPA(arg0, arg1); });
    t.method("AddMultPA", [](mfem::TransposeIntegrator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultPA(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AssembleEA(const mfem::FiniteElementSpace &, mfem::Vector &, const bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AssembleEA(const mfem::FiniteElementSpace &, mfem::Vector &, const bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:308:17
    t.method("AssembleEA", [](mfem::TransposeIntegrator& a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, const bool arg2)->void { a.AssembleEA(arg0, arg1, arg2); });
    t.method("AssembleEA", [](mfem::TransposeIntegrator* a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, const bool arg2)->void { a->AssembleEA(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AssembleEAInteriorFaces(const mfem::FiniteElementSpace &, mfem::Vector &, mfem::Vector &, const bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AssembleEAInteriorFaces(const mfem::FiniteElementSpace &, mfem::Vector &, mfem::Vector &, const bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:311:17
    t.method("AssembleEAInteriorFaces", [](mfem::TransposeIntegrator& a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, mfem::Vector & arg2, const bool arg3)->void { a.AssembleEAInteriorFaces(arg0, arg1, arg2, arg3); });
    t.method("AssembleEAInteriorFaces", [](mfem::TransposeIntegrator* a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, mfem::Vector & arg2, const bool arg3)->void { a->AssembleEAInteriorFaces(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::TransposeIntegrator::AssembleEABoundaryFaces(const mfem::FiniteElementSpace &, mfem::Vector &, const bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TransposeIntegrator::AssembleEABoundaryFaces(const mfem::FiniteElementSpace &, mfem::Vector &, const bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:316:17
    t.method("AssembleEABoundaryFaces", [](mfem::TransposeIntegrator& a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, const bool arg2)->void { a.AssembleEABoundaryFaces(arg0, arg1, arg2); });
    t.method("AssembleEABoundaryFaces", [](mfem::TransposeIntegrator* a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, const bool arg2)->void { a->AssembleEABoundaryFaces(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::TransposeIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_TransposeIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_TransposeIntegrator(module));
}
