// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::Mesh::FaceInformation> : std::false_type { };
  template<> struct DefaultConstructible<mfem::Mesh::FaceInformation> : std::false_type { };
}

// Class generating the wrapper for type mfem::Mesh::FaceInformation
// signature to use in the veto file: mfem::Mesh::FaceInformation
struct Jlmfem_Mesh_FaceInformation: public Wrapper {

  Jlmfem_Mesh_FaceInformation(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::Mesh::FaceInformation (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1333:11
    jlcxx::TypeWrapper<mfem::Mesh::FaceInformation>  t = jlModule.add_type<mfem::Mesh::FaceInformation>("mfem!Mesh!FaceInformation");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::Mesh::FaceInformation>>(new jlcxx::TypeWrapper<mfem::Mesh::FaceInformation>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::FaceInformation::IsLocal() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::FaceInformation::IsLocal()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1352:12
    t.method("IsLocal", [](mfem::Mesh::FaceInformation const& a)->bool { return a.IsLocal(); });
    t.method("IsLocal", [](mfem::Mesh::FaceInformation const* a)->bool { return a->IsLocal(); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::FaceInformation::IsShared() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::FaceInformation::IsShared()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1359:12
    t.method("IsShared", [](mfem::Mesh::FaceInformation const& a)->bool { return a.IsShared(); });
    t.method("IsShared", [](mfem::Mesh::FaceInformation const* a)->bool { return a->IsShared(); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::FaceInformation::IsInterior() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::FaceInformation::IsInterior()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1368:12
    t.method("IsInterior", [](mfem::Mesh::FaceInformation const& a)->bool { return a.IsInterior(); });
    t.method("IsInterior", [](mfem::Mesh::FaceInformation const* a)->bool { return a->IsInterior(); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::FaceInformation::IsBoundary() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::FaceInformation::IsBoundary()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1375:12
    t.method("IsBoundary", [](mfem::Mesh::FaceInformation const& a)->bool { return a.IsBoundary(); });
    t.method("IsBoundary", [](mfem::Mesh::FaceInformation const* a)->bool { return a->IsBoundary(); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::FaceInformation::IsOfFaceType(mfem::FaceType) (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::FaceInformation::IsOfFaceType(mfem::FaceType)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1381:12
    t.method("IsOfFaceType", [](mfem::Mesh::FaceInformation const& a, mfem::FaceType arg0)->bool { return a.IsOfFaceType(arg0); });
    t.method("IsOfFaceType", [](mfem::Mesh::FaceInformation const* a, mfem::FaceType arg0)->bool { return a->IsOfFaceType(arg0); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::FaceInformation::IsConforming() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::FaceInformation::IsConforming()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1395:12
    t.method("IsConforming", [](mfem::Mesh::FaceInformation const& a)->bool { return a.IsConforming(); });
    t.method("IsConforming", [](mfem::Mesh::FaceInformation const* a)->bool { return a->IsConforming(); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::FaceInformation::IsNonconformingFine() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::FaceInformation::IsNonconformingFine()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1401:12
    t.method("IsNonconformingFine", [](mfem::Mesh::FaceInformation const& a)->bool { return a.IsNonconformingFine(); });
    t.method("IsNonconformingFine", [](mfem::Mesh::FaceInformation const* a)->bool { return a->IsNonconformingFine(); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::FaceInformation::IsNonconformingCoarse() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::FaceInformation::IsNonconformingCoarse()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1412:12
    t.method("IsNonconformingCoarse", [](mfem::Mesh::FaceInformation const& a)->bool { return a.IsNonconformingCoarse(); });
    t.method("IsNonconformingCoarse", [](mfem::Mesh::FaceInformation const* a)->bool { return a->IsNonconformingCoarse(); });

    DEBUG_MSG("Adding topology methods  to provide read access to the field topology (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1335:20
    // signature to use in the veto list: mfem::Mesh::FaceInformation::topology
    t.method("topology", [](const mfem::Mesh::FaceInformation& a) -> mfem::Mesh::FaceTopology { return a.topology; });
    t.method("topology", [](mfem::Mesh::FaceInformation& a) -> mfem::Mesh::FaceTopology { return a.topology; });
    t.method("topology", [](const mfem::Mesh::FaceInformation* a) -> mfem::Mesh::FaceTopology { return a->topology; });
    t.method("topology", [](mfem::Mesh::FaceInformation* a) -> mfem::Mesh::FaceTopology { return a->topology; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1335:20
    // signature to use in the veto list: mfem::Mesh::FaceInformation::topology
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding topology! methods to provide write access to the field topology (" __HERE__ ")");
    t.method("topology!", [](mfem::Mesh::FaceInformation& a, mfem::Mesh::FaceTopology val) -> mfem::Mesh::FaceTopology { return a.topology = val; });

    DEBUG_MSG("Adding topology! methods to provide write access to the field topology (" __HERE__ ")");
    t.method("topology!", [](mfem::Mesh::FaceInformation* a, mfem::Mesh::FaceTopology val) -> mfem::Mesh::FaceTopology { return a->topology = val; });

    DEBUG_MSG("Adding tag methods  to provide read access to the field tag (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1346:19
    // signature to use in the veto list: mfem::Mesh::FaceInformation::tag
    t.method("tag", [](const mfem::Mesh::FaceInformation& a) -> mfem::Mesh::FaceInfoTag { return a.tag; });
    t.method("tag", [](mfem::Mesh::FaceInformation& a) -> mfem::Mesh::FaceInfoTag { return a.tag; });
    t.method("tag", [](const mfem::Mesh::FaceInformation* a) -> mfem::Mesh::FaceInfoTag { return a->tag; });
    t.method("tag", [](mfem::Mesh::FaceInformation* a) -> mfem::Mesh::FaceInfoTag { return a->tag; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1346:19
    // signature to use in the veto list: mfem::Mesh::FaceInformation::tag
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding tag! methods to provide write access to the field tag (" __HERE__ ")");
    t.method("tag!", [](mfem::Mesh::FaceInformation& a, mfem::Mesh::FaceInfoTag val) -> mfem::Mesh::FaceInfoTag { return a.tag = val; });

    DEBUG_MSG("Adding tag! methods to provide write access to the field tag (" __HERE__ ")");
    t.method("tag!", [](mfem::Mesh::FaceInformation* a, mfem::Mesh::FaceInfoTag val) -> mfem::Mesh::FaceInfoTag { return a->tag = val; });

    DEBUG_MSG("Adding ncface methods  to provide read access to the field ncface (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1347:11
    // signature to use in the veto list: mfem::Mesh::FaceInformation::ncface
    t.method("ncface", [](const mfem::Mesh::FaceInformation& a) -> int { return a.ncface; });
    t.method("ncface", [](mfem::Mesh::FaceInformation& a) -> int { return a.ncface; });
    t.method("ncface", [](const mfem::Mesh::FaceInformation* a) -> int { return a->ncface; });
    t.method("ncface", [](mfem::Mesh::FaceInformation* a) -> int { return a->ncface; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1347:11
    // signature to use in the veto list: mfem::Mesh::FaceInformation::ncface
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ncface! methods to provide write access to the field ncface (" __HERE__ ")");
    t.method("ncface!", [](mfem::Mesh::FaceInformation& a, int val) -> int { return a.ncface = val; });

    DEBUG_MSG("Adding ncface! methods to provide write access to the field ncface (" __HERE__ ")");
    t.method("ncface!", [](mfem::Mesh::FaceInformation* a, int val) -> int { return a->ncface = val; });

    DEBUG_MSG("Adding point_matrix methods  to provide read access to the field point_matrix (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1348:26
    // signature to use in the veto list: mfem::Mesh::FaceInformation::point_matrix
    t.method("point_matrix", [](const mfem::Mesh::FaceInformation& a) -> const mfem::DenseMatrix * { return a.point_matrix; });
    t.method("point_matrix", [](const mfem::Mesh::FaceInformation* a) -> const mfem::DenseMatrix * { return a->point_matrix; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::Mesh::FaceInformation>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_Mesh_FaceInformation(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_Mesh_FaceInformation(module));
}
