// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::VectorConvectionNLFIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::VectorConvectionNLFIntegrator> : std::false_type { };
template<> struct SuperType<mfem::VectorConvectionNLFIntegrator> { typedef mfem::NonlinearFormIntegrator type; };
}

// Class generating the wrapper for type mfem::VectorConvectionNLFIntegrator
// signature to use in the veto file: mfem::VectorConvectionNLFIntegrator
struct Jlmfem_VectorConvectionNLFIntegrator: public Wrapper {

  Jlmfem_VectorConvectionNLFIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::VectorConvectionNLFIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:368:7
    jlcxx::TypeWrapper<mfem::VectorConvectionNLFIntegrator>  t = jlModule.add_type<mfem::VectorConvectionNLFIntegrator>("mfem!VectorConvectionNLFIntegrator",
      jlcxx::julia_base_type<mfem::NonlinearFormIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorConvectionNLFIntegrator>>(new jlcxx::TypeWrapper<mfem::VectorConvectionNLFIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::VectorConvectionNLFIntegrator::VectorConvectionNLFIntegrator(mfem::Coefficient &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:381:4
    t.constructor<mfem::Coefficient &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for const mfem::IntegrationRule & mfem::VectorConvectionNLFIntegrator::GetRule(const mfem::FiniteElement &, mfem::ElementTransformation &) (" __HERE__ ")");
    // signature to use in the veto list: const mfem::IntegrationRule & mfem::VectorConvectionNLFIntegrator::GetRule(const mfem::FiniteElement &, mfem::ElementTransformation &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:385:34
    module_.method("mfem!VectorConvectionNLFIntegrator!GetRule", [](const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1)->const mfem::IntegrationRule & { return mfem::VectorConvectionNLFIntegrator::GetRule(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorConvectionNLFIntegrator::AssembleElementVector(const mfem::FiniteElement &, mfem::ElementTransformation &, const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorConvectionNLFIntegrator::AssembleElementVector(const mfem::FiniteElement &, mfem::ElementTransformation &, const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:388:17
    t.method("AssembleElementVector", [](mfem::VectorConvectionNLFIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, const mfem::Vector & arg2, mfem::Vector & arg3)->void { a.AssembleElementVector(arg0, arg1, arg2, arg3); });
    t.method("AssembleElementVector", [](mfem::VectorConvectionNLFIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, const mfem::Vector & arg2, mfem::Vector & arg3)->void { a->AssembleElementVector(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorConvectionNLFIntegrator::AssembleElementGrad(const mfem::FiniteElement &, mfem::ElementTransformation &, const mfem::Vector &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorConvectionNLFIntegrator::AssembleElementGrad(const mfem::FiniteElement &, mfem::ElementTransformation &, const mfem::Vector &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:393:17
    t.method("AssembleElementGrad", [](mfem::VectorConvectionNLFIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, const mfem::Vector & arg2, mfem::DenseMatrix & arg3)->void { a.AssembleElementGrad(arg0, arg1, arg2, arg3); });
    t.method("AssembleElementGrad", [](mfem::VectorConvectionNLFIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, const mfem::Vector & arg2, mfem::DenseMatrix & arg3)->void { a->AssembleElementGrad(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorConvectionNLFIntegrator::AssemblePA(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorConvectionNLFIntegrator::AssemblePA(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:400:17
    t.method("AssemblePA", [](mfem::VectorConvectionNLFIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssemblePA(arg0); });
    t.method("AssemblePA", [](mfem::VectorConvectionNLFIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssemblePA(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorConvectionNLFIntegrator::AssembleMF(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorConvectionNLFIntegrator::AssembleMF(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:402:17
    t.method("AssembleMF", [](mfem::VectorConvectionNLFIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssembleMF(arg0); });
    t.method("AssembleMF", [](mfem::VectorConvectionNLFIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssembleMF(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorConvectionNLFIntegrator::AddMultPA(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorConvectionNLFIntegrator::AddMultPA(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:404:17
    t.method("AddMultPA", [](mfem::VectorConvectionNLFIntegrator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultPA(arg0, arg1); });
    t.method("AddMultPA", [](mfem::VectorConvectionNLFIntegrator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultPA(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorConvectionNLFIntegrator::AddMultMF(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorConvectionNLFIntegrator::AddMultMF(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:406:17
    t.method("AddMultMF", [](mfem::VectorConvectionNLFIntegrator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultMF(arg0, arg1); });
    t.method("AddMultMF", [](mfem::VectorConvectionNLFIntegrator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultMF(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorConvectionNLFIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_VectorConvectionNLFIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_VectorConvectionNLFIntegrator(module));
}
