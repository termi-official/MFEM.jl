// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::ResidualBCMonitor> : std::false_type { };
  template<> struct DefaultConstructible<mfem::ResidualBCMonitor> : std::false_type { };
template<> struct SuperType<mfem::ResidualBCMonitor> { typedef mfem::IterativeSolverMonitor type; };
}

// Class generating the wrapper for type mfem::ResidualBCMonitor
// signature to use in the veto file: mfem::ResidualBCMonitor
struct Jlmfem_ResidualBCMonitor: public Wrapper {

  Jlmfem_ResidualBCMonitor(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::ResidualBCMonitor (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:1008:7
    jlcxx::TypeWrapper<mfem::ResidualBCMonitor>  t = jlModule.add_type<mfem::ResidualBCMonitor>("mfem!ResidualBCMonitor",
      jlcxx::julia_base_type<mfem::IterativeSolverMonitor>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::ResidualBCMonitor>>(new jlcxx::TypeWrapper<mfem::ResidualBCMonitor>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::ResidualBCMonitor::ResidualBCMonitor(const mfem::Array<int> &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:1014:4
    t.constructor<const mfem::Array<int> &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::ResidualBCMonitor::MonitorResidual(int, double, const mfem::Vector &, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::ResidualBCMonitor::MonitorResidual(int, double, const mfem::Vector &, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:1017:9
    t.method("MonitorResidual", [](mfem::ResidualBCMonitor& a, int arg0, double arg1, const mfem::Vector & arg2, bool arg3)->void { a.MonitorResidual(arg0, arg1, arg2, arg3); });
    t.method("MonitorResidual", [](mfem::ResidualBCMonitor* a, int arg0, double arg1, const mfem::Vector & arg2, bool arg3)->void { a->MonitorResidual(arg0, arg1, arg2, arg3); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::ResidualBCMonitor>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_ResidualBCMonitor(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_ResidualBCMonitor(module));
}
