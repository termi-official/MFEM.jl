// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::IntegrationRule> : std::false_type { };
  template<> struct DefaultConstructible<mfem::IntegrationRule> : std::false_type { };
}

// Class generating the wrapper for type mfem::IntegrationRule
// signature to use in the veto file: mfem::IntegrationRule
struct Jlmfem_IntegrationRule: public Wrapper {

  Jlmfem_IntegrationRule(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::IntegrationRule (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:90:7
    jlcxx::TypeWrapper<mfem::IntegrationRule>  t = jlModule.add_type<mfem::IntegrationRule>("mfem!IntegrationRule");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::IntegrationRule>>(new jlcxx::TypeWrapper<mfem::IntegrationRule>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::IntegrationRule::IntegrationRule(int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:218:13
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationRule::SetPointIndices() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationRule::SetPointIndices()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:230:9
    t.method("SetPointIndices", [](mfem::IntegrationRule& a)->void { a.SetPointIndices(); });
    t.method("SetPointIndices", [](mfem::IntegrationRule* a)->void { a->SetPointIndices(); });


    DEBUG_MSG("Adding wrapper for void mfem::IntegrationRule::IntegrationRule(mfem::IntegrationRule &, mfem::IntegrationRule &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:233:4
    t.constructor<mfem::IntegrationRule &, mfem::IntegrationRule &>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::IntegrationRule::IntegrationRule(mfem::IntegrationRule &, mfem::IntegrationRule &, mfem::IntegrationRule &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:236:4
    t.constructor<mfem::IntegrationRule &, mfem::IntegrationRule &, mfem::IntegrationRule &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for int mfem::IntegrationRule::GetOrder() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::IntegrationRule::GetOrder()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:240:8
    t.method("GetOrder", [](mfem::IntegrationRule const& a)->int { return a.GetOrder(); });
    t.method("GetOrder", [](mfem::IntegrationRule const* a)->int { return a->GetOrder(); });

    DEBUG_MSG("Adding wrapper for void mfem::IntegrationRule::SetOrder(const int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IntegrationRule::SetOrder(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:244:9
    t.method("SetOrder", [](mfem::IntegrationRule& a, const int arg0)->void { a.SetOrder(arg0); });
    t.method("SetOrder", [](mfem::IntegrationRule* a, const int arg0)->void { a->SetOrder(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::IntegrationRule::GetNPoints() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::IntegrationRule::GetNPoints()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:247:8
    t.method("GetNPoints", [](mfem::IntegrationRule const& a)->int { return a.GetNPoints(); });
    t.method("GetNPoints", [](mfem::IntegrationRule const* a)->int { return a->GetNPoints(); });

    DEBUG_MSG("Adding wrapper for mfem::IntegrationPoint & mfem::IntegrationRule::IntPoint(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::IntegrationPoint & mfem::IntegrationRule::IntPoint(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:250:22
    t.method("IntPoint", [](mfem::IntegrationRule& a, int arg0)->mfem::IntegrationPoint & { return a.IntPoint(arg0); });
    t.method("IntPoint", [](mfem::IntegrationRule* a, int arg0)->mfem::IntegrationPoint & { return a->IntPoint(arg0); });

    DEBUG_MSG("Adding wrapper for const mfem::IntegrationPoint & mfem::IntegrationRule::IntPoint(int) (" __HERE__ ")");
    // signature to use in the veto list: const mfem::IntegrationPoint & mfem::IntegrationRule::IntPoint(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:253:28
    t.method("IntPoint", [](mfem::IntegrationRule const& a, int arg0)->const mfem::IntegrationPoint & { return a.IntPoint(arg0); });
    t.method("IntPoint", [](mfem::IntegrationRule const* a, int arg0)->const mfem::IntegrationPoint & { return a->IntPoint(arg0); });

    DEBUG_MSG("Adding wrapper for const mfem::Array<double> & mfem::IntegrationRule::GetWeights() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Array<double> & mfem::IntegrationRule::GetWeights()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:258:25
    t.method("GetWeights", [](mfem::IntegrationRule const& a)->const mfem::Array<double> & { return a.GetWeights(); });
    t.method("GetWeights", [](mfem::IntegrationRule const* a)->const mfem::Array<double> & { return a->GetWeights(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::IntegrationRule>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_IntegrationRule(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_IntegrationRule(module));
}
