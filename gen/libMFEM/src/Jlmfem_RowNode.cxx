// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::RowNode> : std::false_type { };
  template<> struct DefaultConstructible<mfem::RowNode> : std::false_type { };
}

// Class generating the wrapper for type mfem::RowNode
// signature to use in the veto file: mfem::RowNode
struct Jlmfem_RowNode: public Wrapper {

  Jlmfem_RowNode(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::RowNode (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:37:4
    jlcxx::TypeWrapper<mfem::RowNode>  t = jlModule.add_type<mfem::RowNode>("mfem!RowNode");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::RowNode>>(new jlcxx::TypeWrapper<mfem::RowNode>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding Value methods  to provide read access to the field Value (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:40:11
    // signature to use in the veto list: mfem::RowNode::Value
    t.method("Value", [](const mfem::RowNode& a) -> double { return a.Value; });
    t.method("Value", [](mfem::RowNode& a) -> double { return a.Value; });
    t.method("Value", [](const mfem::RowNode* a) -> double { return a->Value; });
    t.method("Value", [](mfem::RowNode* a) -> double { return a->Value; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:40:11
    // signature to use in the veto list: mfem::RowNode::Value
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Value! methods to provide write access to the field Value (" __HERE__ ")");
    t.method("Value!", [](mfem::RowNode& a, double val) -> double { return a.Value = val; });

    DEBUG_MSG("Adding Value! methods to provide write access to the field Value (" __HERE__ ")");
    t.method("Value!", [](mfem::RowNode* a, double val) -> double { return a->Value = val; });

    DEBUG_MSG("Adding Prev methods  to provide read access to the field Prev (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:41:13
    // signature to use in the veto list: mfem::RowNode::Prev
    t.method("Prev", [](const mfem::RowNode& a) -> mfem::RowNode * { return a.Prev; });
    t.method("Prev", [](mfem::RowNode& a) -> mfem::RowNode * { return a.Prev; });
    t.method("Prev", [](const mfem::RowNode* a) -> mfem::RowNode * { return a->Prev; });
    t.method("Prev", [](mfem::RowNode* a) -> mfem::RowNode * { return a->Prev; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:41:13
    // signature to use in the veto list: mfem::RowNode::Prev
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Prev! methods to provide write access to the field Prev (" __HERE__ ")");
    t.method("Prev!", [](mfem::RowNode& a, mfem::RowNode * val) -> mfem::RowNode * { return a.Prev = val; });

    DEBUG_MSG("Adding Prev! methods to provide write access to the field Prev (" __HERE__ ")");
    t.method("Prev!", [](mfem::RowNode* a, mfem::RowNode * val) -> mfem::RowNode * { return a->Prev = val; });

    DEBUG_MSG("Adding Column methods  to provide read access to the field Column (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:42:8
    // signature to use in the veto list: mfem::RowNode::Column
    t.method("Column", [](const mfem::RowNode& a) -> int { return a.Column; });
    t.method("Column", [](mfem::RowNode& a) -> int { return a.Column; });
    t.method("Column", [](const mfem::RowNode* a) -> int { return a->Column; });
    t.method("Column", [](mfem::RowNode* a) -> int { return a->Column; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsemat.hpp:42:8
    // signature to use in the veto list: mfem::RowNode::Column
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding Column! methods to provide write access to the field Column (" __HERE__ ")");
    t.method("Column!", [](mfem::RowNode& a, int val) -> int { return a.Column = val; });

    DEBUG_MSG("Adding Column! methods to provide write access to the field Column (" __HERE__ ")");
    t.method("Column!", [](mfem::RowNode* a, int val) -> int { return a->Column = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::RowNode>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_RowNode(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_RowNode(module));
}
