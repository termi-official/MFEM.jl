// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::VectorCurlCurlIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::VectorCurlCurlIntegrator> : std::false_type { };
template<> struct SuperType<mfem::VectorCurlCurlIntegrator> { typedef mfem::BilinearFormIntegrator type; };
}

// Class generating the wrapper for type mfem::VectorCurlCurlIntegrator
// signature to use in the veto file: mfem::VectorCurlCurlIntegrator
struct Jlmfem_VectorCurlCurlIntegrator: public Wrapper {

  Jlmfem_VectorCurlCurlIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::VectorCurlCurlIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2573:7
    jlcxx::TypeWrapper<mfem::VectorCurlCurlIntegrator>  t = jlModule.add_type<mfem::VectorCurlCurlIntegrator>("mfem!VectorCurlCurlIntegrator",
      jlcxx::julia_base_type<mfem::BilinearFormIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorCurlCurlIntegrator>>(new jlcxx::TypeWrapper<mfem::VectorCurlCurlIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::VectorCurlCurlIntegrator::VectorCurlCurlIntegrator(mfem::Coefficient &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2586:4
    t.constructor<mfem::Coefficient &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::VectorCurlCurlIntegrator::AssembleElementMatrix(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorCurlCurlIntegrator::AssembleElementMatrix(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2589:17
    t.method("AssembleElementMatrix", [](mfem::VectorCurlCurlIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a.AssembleElementMatrix(arg0, arg1, arg2); });
    t.method("AssembleElementMatrix", [](mfem::VectorCurlCurlIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a->AssembleElementMatrix(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for double mfem::VectorCurlCurlIntegrator::GetElementEnergy(const mfem::FiniteElement &, mfem::ElementTransformation &, const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::VectorCurlCurlIntegrator::GetElementEnergy(const mfem::FiniteElement &, mfem::ElementTransformation &, const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2593:19
    t.method("GetElementEnergy", [](mfem::VectorCurlCurlIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, const mfem::Vector & arg2)->double { return a.GetElementEnergy(arg0, arg1, arg2); });
    t.method("GetElementEnergy", [](mfem::VectorCurlCurlIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, const mfem::Vector & arg2)->double { return a->GetElementEnergy(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorCurlCurlIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_VectorCurlCurlIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_VectorCurlCurlIntegrator(module));
}
