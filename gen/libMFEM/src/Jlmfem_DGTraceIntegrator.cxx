// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::DGTraceIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::DGTraceIntegrator> : std::false_type { };
template<> struct SuperType<mfem::DGTraceIntegrator> { typedef mfem::BilinearFormIntegrator type; };
}

// Class generating the wrapper for type mfem::DGTraceIntegrator
// signature to use in the veto file: mfem::DGTraceIntegrator
struct Jlmfem_DGTraceIntegrator: public Wrapper {

  Jlmfem_DGTraceIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::DGTraceIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2924:7
    jlcxx::TypeWrapper<mfem::DGTraceIntegrator>  t = jlModule.add_type<mfem::DGTraceIntegrator>("mfem!DGTraceIntegrator",
      jlcxx::julia_base_type<mfem::BilinearFormIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::DGTraceIntegrator>>(new jlcxx::TypeWrapper<mfem::DGTraceIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::DGTraceIntegrator::DGTraceIntegrator(mfem::VectorCoefficient &, double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2941:4
    t.constructor<mfem::VectorCoefficient &, double>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::DGTraceIntegrator::DGTraceIntegrator(mfem::VectorCoefficient &, double, double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2945:4
    t.constructor<mfem::VectorCoefficient &, double, double>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::DGTraceIntegrator::DGTraceIntegrator(mfem::Coefficient &, mfem::VectorCoefficient &, double, double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2948:4
    t.constructor<mfem::Coefficient &, mfem::VectorCoefficient &, double, double>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::DGTraceIntegrator::AssembleFaceMatrix(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DGTraceIntegrator::AssembleFaceMatrix(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2953:17
    t.method("AssembleFaceMatrix", [](mfem::DGTraceIntegrator& a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::FaceElementTransformations & arg2, mfem::DenseMatrix & arg3)->void { a.AssembleFaceMatrix(arg0, arg1, arg2, arg3); });
    t.method("AssembleFaceMatrix", [](mfem::DGTraceIntegrator* a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::FaceElementTransformations & arg2, mfem::DenseMatrix & arg3)->void { a->AssembleFaceMatrix(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::DGTraceIntegrator::AssemblePAInteriorFaces(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DGTraceIntegrator::AssemblePAInteriorFaces(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2960:17
    t.method("AssemblePAInteriorFaces", [](mfem::DGTraceIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssemblePAInteriorFaces(arg0); });
    t.method("AssemblePAInteriorFaces", [](mfem::DGTraceIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssemblePAInteriorFaces(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::DGTraceIntegrator::AssemblePABoundaryFaces(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DGTraceIntegrator::AssemblePABoundaryFaces(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2962:17
    t.method("AssemblePABoundaryFaces", [](mfem::DGTraceIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssemblePABoundaryFaces(arg0); });
    t.method("AssemblePABoundaryFaces", [](mfem::DGTraceIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssemblePABoundaryFaces(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::DGTraceIntegrator::AddMultTransposePA(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DGTraceIntegrator::AddMultTransposePA(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2964:17
    t.method("AddMultTransposePA", [](mfem::DGTraceIntegrator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultTransposePA(arg0, arg1); });
    t.method("AddMultTransposePA", [](mfem::DGTraceIntegrator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultTransposePA(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::DGTraceIntegrator::AddMultPA(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DGTraceIntegrator::AddMultPA(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2966:17
    t.method("AddMultPA", [](mfem::DGTraceIntegrator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultPA(arg0, arg1); });
    t.method("AddMultPA", [](mfem::DGTraceIntegrator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultPA(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::DGTraceIntegrator::AssembleEAInteriorFaces(const mfem::FiniteElementSpace &, mfem::Vector &, mfem::Vector &, const bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DGTraceIntegrator::AssembleEAInteriorFaces(const mfem::FiniteElementSpace &, mfem::Vector &, mfem::Vector &, const bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2968:17
    t.method("AssembleEAInteriorFaces", [](mfem::DGTraceIntegrator& a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, mfem::Vector & arg2, const bool arg3)->void { a.AssembleEAInteriorFaces(arg0, arg1, arg2, arg3); });
    t.method("AssembleEAInteriorFaces", [](mfem::DGTraceIntegrator* a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, mfem::Vector & arg2, const bool arg3)->void { a->AssembleEAInteriorFaces(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::DGTraceIntegrator::AssembleEABoundaryFaces(const mfem::FiniteElementSpace &, mfem::Vector &, const bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DGTraceIntegrator::AssembleEABoundaryFaces(const mfem::FiniteElementSpace &, mfem::Vector &, const bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2973:17
    t.method("AssembleEABoundaryFaces", [](mfem::DGTraceIntegrator& a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, const bool arg2)->void { a.AssembleEABoundaryFaces(arg0, arg1, arg2); });
    t.method("AssembleEABoundaryFaces", [](mfem::DGTraceIntegrator* a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, const bool arg2)->void { a->AssembleEABoundaryFaces(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for const mfem::IntegrationRule & mfem::DGTraceIntegrator::GetRule(mfem::Geometry::Type, int, mfem::FaceElementTransformations &) (" __HERE__ ")");
    // signature to use in the veto list: const mfem::IntegrationRule & mfem::DGTraceIntegrator::GetRule(mfem::Geometry::Type, int, mfem::FaceElementTransformations &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2977:34
    module_.method("mfem!DGTraceIntegrator!GetRule", [](mfem::Geometry::Type arg0, int arg1, mfem::FaceElementTransformations & arg2)->const mfem::IntegrationRule & { return mfem::DGTraceIntegrator::GetRule(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::DGTraceIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_DGTraceIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_DGTraceIntegrator(module));
}
