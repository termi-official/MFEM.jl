// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::JumpScaling> : std::false_type { };
  template<> struct DefaultConstructible<mfem::JumpScaling> : std::false_type { };
}

// Class generating the wrapper for type mfem::JumpScaling
// signature to use in the veto file: mfem::JumpScaling
struct Jlmfem_JumpScaling: public Wrapper {

  Jlmfem_JumpScaling(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::JumpScaling (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:730:7
    jlcxx::TypeWrapper<mfem::JumpScaling>  t = jlModule.add_type<mfem::JumpScaling>("mfem!JumpScaling");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::JumpScaling>>(new jlcxx::TypeWrapper<mfem::JumpScaling>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::JumpScaling::JumpScaling(double, mfem::JumpScaling::JumpScalingType) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:743:4
    t.constructor<double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<double, mfem::JumpScaling::JumpScalingType>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for double mfem::JumpScaling::Eval(double, int) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::JumpScaling::Eval(double, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:745:11
    t.method("Eval", [](mfem::JumpScaling const& a, double arg0, int arg1)->double { return a.Eval(arg0, arg1); });
    t.method("Eval", [](mfem::JumpScaling const* a, double arg0, int arg1)->double { return a->Eval(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::JumpScaling>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_JumpScaling(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_JumpScaling(module));
}
