// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::Hybridization> : std::false_type { };
  template<> struct DefaultConstructible<mfem::Hybridization> : std::false_type { };
}

// Class generating the wrapper for type mfem::Hybridization
// signature to use in the veto file: mfem::Hybridization
struct Jlmfem_Hybridization: public Wrapper {

  Jlmfem_Hybridization(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::Hybridization (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/hybridization.hpp:60:7
    jlcxx::TypeWrapper<mfem::Hybridization>  t = jlModule.add_type<mfem::Hybridization>("mfem!Hybridization");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::Hybridization>>(new jlcxx::TypeWrapper<mfem::Hybridization>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::Hybridization>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_Hybridization(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_Hybridization(module));
}
