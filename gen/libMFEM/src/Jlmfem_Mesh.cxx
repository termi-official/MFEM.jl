// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::Mesh> : std::false_type { };
  template<> struct DefaultConstructible<mfem::Mesh> : std::false_type { };
}

// Class generating the wrapper for type mfem::Mesh
// signature to use in the veto file: mfem::Mesh
struct Jlmfem_Mesh: public Wrapper {

  Jlmfem_Mesh(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::Mesh (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:52:7
    jlcxx::TypeWrapper<mfem::Mesh>  t = jlModule.add_type<mfem::Mesh>("mfem!Mesh");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::Mesh>>(new jlcxx::TypeWrapper<mfem::Mesh>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Mesh(const mfem::Mesh &, bool) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:569:13
    t.constructor<const mfem::Mesh &>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const mfem::Mesh &, bool>(/*finalize=*/jlcxx::finalize_policy::yes);



    DEBUG_MSG("Adding wrapper for mfem::Mesh mfem::Mesh::LoadFromFile(const char *, int, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Mesh mfem::Mesh::LoadFromFile(const char *, int, int, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:589:16
    module_.method("mfem!Mesh!LoadFromFile", [](const char * arg0)->mfem::Mesh { return mfem::Mesh::LoadFromFile(arg0); });
    module_.method("mfem!Mesh!LoadFromFile", [](const char * arg0, int arg1)->mfem::Mesh { return mfem::Mesh::LoadFromFile(arg0, arg1); });
    module_.method("mfem!Mesh!LoadFromFile", [](const char * arg0, int arg1, int arg2)->mfem::Mesh { return mfem::Mesh::LoadFromFile(arg0, arg1, arg2); });
    module_.method("mfem!Mesh!LoadFromFile", [](const char * arg0, int arg1, int arg2, bool arg3)->mfem::Mesh { return mfem::Mesh::LoadFromFile(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for mfem::Mesh mfem::Mesh::MakeCartesian1D(int, double) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Mesh mfem::Mesh::MakeCartesian1D(int, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:594:16
    module_.method("mfem!Mesh!MakeCartesian1D", [](int arg0)->mfem::Mesh { return mfem::Mesh::MakeCartesian1D(arg0); });
    module_.method("mfem!Mesh!MakeCartesian1D", [](int arg0, double arg1)->mfem::Mesh { return mfem::Mesh::MakeCartesian1D(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for mfem::Mesh mfem::Mesh::MakeCartesian2D(int, int, mfem::Element::Type, bool, double, double, bool) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Mesh mfem::Mesh::MakeCartesian2D(int, int, mfem::Element::Type, bool, double, double, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:601:16
    module_.method("mfem!Mesh!MakeCartesian2D", [](int arg0, int arg1, mfem::Element::Type arg2)->mfem::Mesh { return mfem::Mesh::MakeCartesian2D(arg0, arg1, arg2); });
    module_.method("mfem!Mesh!MakeCartesian2D", [](int arg0, int arg1, mfem::Element::Type arg2, bool arg3)->mfem::Mesh { return mfem::Mesh::MakeCartesian2D(arg0, arg1, arg2, arg3); });
    module_.method("mfem!Mesh!MakeCartesian2D", [](int arg0, int arg1, mfem::Element::Type arg2, bool arg3, double arg4)->mfem::Mesh { return mfem::Mesh::MakeCartesian2D(arg0, arg1, arg2, arg3, arg4); });
    module_.method("mfem!Mesh!MakeCartesian2D", [](int arg0, int arg1, mfem::Element::Type arg2, bool arg3, double arg4, double arg5)->mfem::Mesh { return mfem::Mesh::MakeCartesian2D(arg0, arg1, arg2, arg3, arg4, arg5); });
    module_.method("mfem!Mesh!MakeCartesian2D", [](int arg0, int arg1, mfem::Element::Type arg2, bool arg3, double arg4, double arg5, bool arg6)->mfem::Mesh { return mfem::Mesh::MakeCartesian2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for mfem::Mesh mfem::Mesh::MakeCartesian3D(int, int, int, mfem::Element::Type, double, double, double, bool) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Mesh mfem::Mesh::MakeCartesian3D(int, int, int, mfem::Element::Type, double, double, double, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:609:16
    module_.method("mfem!Mesh!MakeCartesian3D", [](int arg0, int arg1, int arg2, mfem::Element::Type arg3)->mfem::Mesh { return mfem::Mesh::MakeCartesian3D(arg0, arg1, arg2, arg3); });
    module_.method("mfem!Mesh!MakeCartesian3D", [](int arg0, int arg1, int arg2, mfem::Element::Type arg3, double arg4)->mfem::Mesh { return mfem::Mesh::MakeCartesian3D(arg0, arg1, arg2, arg3, arg4); });
    module_.method("mfem!Mesh!MakeCartesian3D", [](int arg0, int arg1, int arg2, mfem::Element::Type arg3, double arg4, double arg5)->mfem::Mesh { return mfem::Mesh::MakeCartesian3D(arg0, arg1, arg2, arg3, arg4, arg5); });
    module_.method("mfem!Mesh!MakeCartesian3D", [](int arg0, int arg1, int arg2, mfem::Element::Type arg3, double arg4, double arg5, double arg6)->mfem::Mesh { return mfem::Mesh::MakeCartesian3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    module_.method("mfem!Mesh!MakeCartesian3D", [](int arg0, int arg1, int arg2, mfem::Element::Type arg3, double arg4, double arg5, double arg6, bool arg7)->mfem::Mesh { return mfem::Mesh::MakeCartesian3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });

    DEBUG_MSG("Adding wrapper for mfem::Mesh mfem::Mesh::MakeRefined(mfem::Mesh &, int, int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Mesh mfem::Mesh::MakeRefined(mfem::Mesh &, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:625:16
    module_.method("mfem!Mesh!MakeRefined", [](mfem::Mesh & arg0, int arg1, int arg2)->mfem::Mesh { return mfem::Mesh::MakeRefined(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for mfem::Mesh mfem::Mesh::MakeRefined(mfem::Mesh &, const mfem::Array<int> &, int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Mesh mfem::Mesh::MakeRefined(mfem::Mesh &, const mfem::Array<int> &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:643:16
    module_.method("mfem!Mesh!MakeRefined", [](mfem::Mesh & arg0, const mfem::Array<int> & arg1, int arg2)->mfem::Mesh { return mfem::Mesh::MakeRefined(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for mfem::Mesh mfem::Mesh::MakeSimplicial(const mfem::Mesh &) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Mesh mfem::Mesh::MakeSimplicial(const mfem::Mesh &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:652:16
    module_.method("mfem!Mesh!MakeSimplicial", [](const mfem::Mesh & arg0)->mfem::Mesh { return mfem::Mesh::MakeSimplicial(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Mesh mfem::Mesh::MakePeriodic(const mfem::Mesh &, const std::vector<int> &) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Mesh mfem::Mesh::MakePeriodic(const mfem::Mesh &, const std::vector<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:662:16
    module_.method("mfem!Mesh!MakePeriodic", [](const mfem::Mesh & arg0, const std::vector<int> & arg1)->mfem::Mesh { return mfem::Mesh::MakePeriodic(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for std::vector<int> mfem::Mesh::CreatePeriodicVertexMapping(const std::vector<mfem::Vector> &, double) (" __HERE__ ")");
    // signature to use in the veto list: std::vector<int> mfem::Mesh::CreatePeriodicVertexMapping(const std::vector<mfem::Vector> &, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:675:21
    t.method("CreatePeriodicVertexMapping", [](mfem::Mesh const& a, const std::vector<mfem::Vector> & arg0)->std::vector<int> { return a.CreatePeriodicVertexMapping(arg0); });
    t.method("CreatePeriodicVertexMapping", [](mfem::Mesh const& a, const std::vector<mfem::Vector> & arg0, double arg1)->std::vector<int> { return a.CreatePeriodicVertexMapping(arg0, arg1); });
    t.method("CreatePeriodicVertexMapping", [](mfem::Mesh const* a, const std::vector<mfem::Vector> & arg0)->std::vector<int> { return a->CreatePeriodicVertexMapping(arg0); });
    t.method("CreatePeriodicVertexMapping", [](mfem::Mesh const* a, const std::vector<mfem::Vector> & arg0, double arg1)->std::vector<int> { return a->CreatePeriodicVertexMapping(arg0, arg1); });


    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Mesh(double *, int, int *, mfem::Geometry::Type, int *, int, int *, mfem::Geometry::Type, int *, int, int, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:688:4
    t.constructor<double *, int, int *, mfem::Geometry::Type, int *, int, int *, mfem::Geometry::Type, int *, int, int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<double *, int, int *, mfem::Geometry::Type, int *, int, int *, mfem::Geometry::Type, int *, int, int, int>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Mesh(int, int, int, int, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:697:4
    t.constructor<int, int, int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, int, int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, int, int, int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for mfem::Element * mfem::Mesh::NewElement(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Element * mfem::Mesh::NewElement(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:709:13
    t.method("NewElement", [](mfem::Mesh& a, int arg0)->mfem::Element * { return a.NewElement(arg0); });
    t.method("NewElement", [](mfem::Mesh* a, int arg0)->mfem::Element * { return a->NewElement(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddVertex(double, double, double) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddVertex(double, double, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:711:8
    t.method("AddVertex", [](mfem::Mesh& a, double arg0)->int { return a.AddVertex(arg0); });
    t.method("AddVertex", [](mfem::Mesh& a, double arg0, double arg1)->int { return a.AddVertex(arg0, arg1); });
    t.method("AddVertex", [](mfem::Mesh& a, double arg0, double arg1, double arg2)->int { return a.AddVertex(arg0, arg1, arg2); });
    t.method("AddVertex", [](mfem::Mesh* a, double arg0)->int { return a->AddVertex(arg0); });
    t.method("AddVertex", [](mfem::Mesh* a, double arg0, double arg1)->int { return a->AddVertex(arg0, arg1); });
    t.method("AddVertex", [](mfem::Mesh* a, double arg0, double arg1, double arg2)->int { return a->AddVertex(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddVertex(const double *) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddVertex(const double *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:712:8
    t.method("AddVertex", [](mfem::Mesh& a, const double * arg0)->int { return a.AddVertex(arg0); });
    t.method("AddVertex", [](mfem::Mesh* a, const double * arg0)->int { return a->AddVertex(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::AddVertexParents(int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::AddVertexParents(int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:714:9
    t.method("AddVertexParents", [](mfem::Mesh& a, int arg0, int arg1, int arg2)->void { a.AddVertexParents(arg0, arg1, arg2); });
    t.method("AddVertexParents", [](mfem::Mesh* a, int arg0, int arg1, int arg2)->void { a->AddVertexParents(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddSegment(int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddSegment(int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:716:8
    t.method("AddSegment", [](mfem::Mesh& a, int arg0, int arg1)->int { return a.AddSegment(arg0, arg1); });
    t.method("AddSegment", [](mfem::Mesh& a, int arg0, int arg1, int arg2)->int { return a.AddSegment(arg0, arg1, arg2); });
    t.method("AddSegment", [](mfem::Mesh* a, int arg0, int arg1)->int { return a->AddSegment(arg0, arg1); });
    t.method("AddSegment", [](mfem::Mesh* a, int arg0, int arg1, int arg2)->int { return a->AddSegment(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddSegment(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddSegment(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:717:8
    t.method("AddSegment", [](mfem::Mesh& a, const int * arg0)->int { return a.AddSegment(arg0); });
    t.method("AddSegment", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddSegment(arg0, arg1); });
    t.method("AddSegment", [](mfem::Mesh* a, const int * arg0)->int { return a->AddSegment(arg0); });
    t.method("AddSegment", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddSegment(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddTriangle(int, int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddTriangle(int, int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:719:8
    t.method("AddTriangle", [](mfem::Mesh& a, int arg0, int arg1, int arg2)->int { return a.AddTriangle(arg0, arg1, arg2); });
    t.method("AddTriangle", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3)->int { return a.AddTriangle(arg0, arg1, arg2, arg3); });
    t.method("AddTriangle", [](mfem::Mesh* a, int arg0, int arg1, int arg2)->int { return a->AddTriangle(arg0, arg1, arg2); });
    t.method("AddTriangle", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3)->int { return a->AddTriangle(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddTriangle(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddTriangle(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:720:8
    t.method("AddTriangle", [](mfem::Mesh& a, const int * arg0)->int { return a.AddTriangle(arg0); });
    t.method("AddTriangle", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddTriangle(arg0, arg1); });
    t.method("AddTriangle", [](mfem::Mesh* a, const int * arg0)->int { return a->AddTriangle(arg0); });
    t.method("AddTriangle", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddTriangle(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddTri(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddTri(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:721:8
    t.method("AddTri", [](mfem::Mesh& a, const int * arg0)->int { return a.AddTri(arg0); });
    t.method("AddTri", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddTri(arg0, arg1); });
    t.method("AddTri", [](mfem::Mesh* a, const int * arg0)->int { return a->AddTri(arg0); });
    t.method("AddTri", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddTri(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddQuad(int, int, int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddQuad(int, int, int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:723:8
    t.method("AddQuad", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3)->int { return a.AddQuad(arg0, arg1, arg2, arg3); });
    t.method("AddQuad", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3, int arg4)->int { return a.AddQuad(arg0, arg1, arg2, arg3, arg4); });
    t.method("AddQuad", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3)->int { return a->AddQuad(arg0, arg1, arg2, arg3); });
    t.method("AddQuad", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3, int arg4)->int { return a->AddQuad(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddQuad(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddQuad(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:724:8
    t.method("AddQuad", [](mfem::Mesh& a, const int * arg0)->int { return a.AddQuad(arg0); });
    t.method("AddQuad", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddQuad(arg0, arg1); });
    t.method("AddQuad", [](mfem::Mesh* a, const int * arg0)->int { return a->AddQuad(arg0); });
    t.method("AddQuad", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddQuad(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddTet(int, int, int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddTet(int, int, int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:726:8
    t.method("AddTet", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3)->int { return a.AddTet(arg0, arg1, arg2, arg3); });
    t.method("AddTet", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3, int arg4)->int { return a.AddTet(arg0, arg1, arg2, arg3, arg4); });
    t.method("AddTet", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3)->int { return a->AddTet(arg0, arg1, arg2, arg3); });
    t.method("AddTet", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3, int arg4)->int { return a->AddTet(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddTet(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddTet(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:727:8
    t.method("AddTet", [](mfem::Mesh& a, const int * arg0)->int { return a.AddTet(arg0); });
    t.method("AddTet", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddTet(arg0, arg1); });
    t.method("AddTet", [](mfem::Mesh* a, const int * arg0)->int { return a->AddTet(arg0); });
    t.method("AddTet", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddTet(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddWedge(int, int, int, int, int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddWedge(int, int, int, int, int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:729:8
    t.method("AddWedge", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)->int { return a.AddWedge(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("AddWedge", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6)->int { return a.AddWedge(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("AddWedge", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)->int { return a->AddWedge(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("AddWedge", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6)->int { return a->AddWedge(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddWedge(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddWedge(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:730:8
    t.method("AddWedge", [](mfem::Mesh& a, const int * arg0)->int { return a.AddWedge(arg0); });
    t.method("AddWedge", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddWedge(arg0, arg1); });
    t.method("AddWedge", [](mfem::Mesh* a, const int * arg0)->int { return a->AddWedge(arg0); });
    t.method("AddWedge", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddWedge(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddPyramid(int, int, int, int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddPyramid(int, int, int, int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:732:8
    t.method("AddPyramid", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3, int arg4)->int { return a.AddPyramid(arg0, arg1, arg2, arg3, arg4); });
    t.method("AddPyramid", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)->int { return a.AddPyramid(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("AddPyramid", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3, int arg4)->int { return a->AddPyramid(arg0, arg1, arg2, arg3, arg4); });
    t.method("AddPyramid", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)->int { return a->AddPyramid(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddPyramid(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddPyramid(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:733:8
    t.method("AddPyramid", [](mfem::Mesh& a, const int * arg0)->int { return a.AddPyramid(arg0); });
    t.method("AddPyramid", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddPyramid(arg0, arg1); });
    t.method("AddPyramid", [](mfem::Mesh* a, const int * arg0)->int { return a->AddPyramid(arg0); });
    t.method("AddPyramid", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddPyramid(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddHex(int, int, int, int, int, int, int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddHex(int, int, int, int, int, int, int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:735:8
    t.method("AddHex", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)->int { return a.AddHex(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("AddHex", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8)->int { return a.AddHex(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("AddHex", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)->int { return a->AddHex(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("AddHex", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8)->int { return a->AddHex(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddHex(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddHex(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:737:8
    t.method("AddHex", [](mfem::Mesh& a, const int * arg0)->int { return a.AddHex(arg0); });
    t.method("AddHex", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddHex(arg0, arg1); });
    t.method("AddHex", [](mfem::Mesh* a, const int * arg0)->int { return a->AddHex(arg0); });
    t.method("AddHex", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddHex(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::AddHexAsTets(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::AddHexAsTets(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:738:9
    t.method("AddHexAsTets", [](mfem::Mesh& a, const int * arg0)->void { a.AddHexAsTets(arg0); });
    t.method("AddHexAsTets", [](mfem::Mesh& a, const int * arg0, int arg1)->void { a.AddHexAsTets(arg0, arg1); });
    t.method("AddHexAsTets", [](mfem::Mesh* a, const int * arg0)->void { a->AddHexAsTets(arg0); });
    t.method("AddHexAsTets", [](mfem::Mesh* a, const int * arg0, int arg1)->void { a->AddHexAsTets(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::AddHexAsWedges(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::AddHexAsWedges(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:739:9
    t.method("AddHexAsWedges", [](mfem::Mesh& a, const int * arg0)->void { a.AddHexAsWedges(arg0); });
    t.method("AddHexAsWedges", [](mfem::Mesh& a, const int * arg0, int arg1)->void { a.AddHexAsWedges(arg0, arg1); });
    t.method("AddHexAsWedges", [](mfem::Mesh* a, const int * arg0)->void { a->AddHexAsWedges(arg0); });
    t.method("AddHexAsWedges", [](mfem::Mesh* a, const int * arg0, int arg1)->void { a->AddHexAsWedges(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::AddHexAsPyramids(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::AddHexAsPyramids(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:740:9
    t.method("AddHexAsPyramids", [](mfem::Mesh& a, const int * arg0)->void { a.AddHexAsPyramids(arg0); });
    t.method("AddHexAsPyramids", [](mfem::Mesh& a, const int * arg0, int arg1)->void { a.AddHexAsPyramids(arg0, arg1); });
    t.method("AddHexAsPyramids", [](mfem::Mesh* a, const int * arg0)->void { a->AddHexAsPyramids(arg0); });
    t.method("AddHexAsPyramids", [](mfem::Mesh* a, const int * arg0, int arg1)->void { a->AddHexAsPyramids(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddElement(mfem::Element *) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddElement(mfem::Element *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:743:8
    t.method("AddElement", [](mfem::Mesh& a, mfem::Element * arg0)->int { return a.AddElement(arg0); });
    t.method("AddElement", [](mfem::Mesh* a, mfem::Element * arg0)->int { return a->AddElement(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddBdrElement(mfem::Element *) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddBdrElement(mfem::Element *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:744:8
    t.method("AddBdrElement", [](mfem::Mesh& a, mfem::Element * arg0)->int { return a.AddBdrElement(arg0); });
    t.method("AddBdrElement", [](mfem::Mesh* a, mfem::Element * arg0)->int { return a->AddBdrElement(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddBdrSegment(int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddBdrSegment(int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:746:8
    t.method("AddBdrSegment", [](mfem::Mesh& a, int arg0, int arg1)->int { return a.AddBdrSegment(arg0, arg1); });
    t.method("AddBdrSegment", [](mfem::Mesh& a, int arg0, int arg1, int arg2)->int { return a.AddBdrSegment(arg0, arg1, arg2); });
    t.method("AddBdrSegment", [](mfem::Mesh* a, int arg0, int arg1)->int { return a->AddBdrSegment(arg0, arg1); });
    t.method("AddBdrSegment", [](mfem::Mesh* a, int arg0, int arg1, int arg2)->int { return a->AddBdrSegment(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddBdrSegment(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddBdrSegment(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:747:8
    t.method("AddBdrSegment", [](mfem::Mesh& a, const int * arg0)->int { return a.AddBdrSegment(arg0); });
    t.method("AddBdrSegment", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddBdrSegment(arg0, arg1); });
    t.method("AddBdrSegment", [](mfem::Mesh* a, const int * arg0)->int { return a->AddBdrSegment(arg0); });
    t.method("AddBdrSegment", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddBdrSegment(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddBdrTriangle(int, int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddBdrTriangle(int, int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:749:8
    t.method("AddBdrTriangle", [](mfem::Mesh& a, int arg0, int arg1, int arg2)->int { return a.AddBdrTriangle(arg0, arg1, arg2); });
    t.method("AddBdrTriangle", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3)->int { return a.AddBdrTriangle(arg0, arg1, arg2, arg3); });
    t.method("AddBdrTriangle", [](mfem::Mesh* a, int arg0, int arg1, int arg2)->int { return a->AddBdrTriangle(arg0, arg1, arg2); });
    t.method("AddBdrTriangle", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3)->int { return a->AddBdrTriangle(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddBdrTriangle(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddBdrTriangle(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:750:8
    t.method("AddBdrTriangle", [](mfem::Mesh& a, const int * arg0)->int { return a.AddBdrTriangle(arg0); });
    t.method("AddBdrTriangle", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddBdrTriangle(arg0, arg1); });
    t.method("AddBdrTriangle", [](mfem::Mesh* a, const int * arg0)->int { return a->AddBdrTriangle(arg0); });
    t.method("AddBdrTriangle", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddBdrTriangle(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddBdrQuad(int, int, int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddBdrQuad(int, int, int, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:752:8
    t.method("AddBdrQuad", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3)->int { return a.AddBdrQuad(arg0, arg1, arg2, arg3); });
    t.method("AddBdrQuad", [](mfem::Mesh& a, int arg0, int arg1, int arg2, int arg3, int arg4)->int { return a.AddBdrQuad(arg0, arg1, arg2, arg3, arg4); });
    t.method("AddBdrQuad", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3)->int { return a->AddBdrQuad(arg0, arg1, arg2, arg3); });
    t.method("AddBdrQuad", [](mfem::Mesh* a, int arg0, int arg1, int arg2, int arg3, int arg4)->int { return a->AddBdrQuad(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddBdrQuad(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddBdrQuad(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:753:8
    t.method("AddBdrQuad", [](mfem::Mesh& a, const int * arg0)->int { return a.AddBdrQuad(arg0); });
    t.method("AddBdrQuad", [](mfem::Mesh& a, const int * arg0, int arg1)->int { return a.AddBdrQuad(arg0, arg1); });
    t.method("AddBdrQuad", [](mfem::Mesh* a, const int * arg0)->int { return a->AddBdrQuad(arg0); });
    t.method("AddBdrQuad", [](mfem::Mesh* a, const int * arg0, int arg1)->int { return a->AddBdrQuad(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::AddBdrQuadAsTriangles(const int *, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::AddBdrQuadAsTriangles(const int *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:754:9
    t.method("AddBdrQuadAsTriangles", [](mfem::Mesh& a, const int * arg0)->void { a.AddBdrQuadAsTriangles(arg0); });
    t.method("AddBdrQuadAsTriangles", [](mfem::Mesh& a, const int * arg0, int arg1)->void { a.AddBdrQuadAsTriangles(arg0, arg1); });
    t.method("AddBdrQuadAsTriangles", [](mfem::Mesh* a, const int * arg0)->void { a->AddBdrQuadAsTriangles(arg0); });
    t.method("AddBdrQuadAsTriangles", [](mfem::Mesh* a, const int * arg0, int arg1)->void { a->AddBdrQuadAsTriangles(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::AddBdrPoint(int, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::AddBdrPoint(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:756:8
    t.method("AddBdrPoint", [](mfem::Mesh& a, int arg0)->int { return a.AddBdrPoint(arg0); });
    t.method("AddBdrPoint", [](mfem::Mesh& a, int arg0, int arg1)->int { return a.AddBdrPoint(arg0, arg1); });
    t.method("AddBdrPoint", [](mfem::Mesh* a, int arg0)->int { return a->AddBdrPoint(arg0); });
    t.method("AddBdrPoint", [](mfem::Mesh* a, int arg0, int arg1)->int { return a->AddBdrPoint(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GenerateBoundaryElements() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GenerateBoundaryElements()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:758:9
    t.method("GenerateBoundaryElements", [](mfem::Mesh& a)->void { a.GenerateBoundaryElements(); });
    t.method("GenerateBoundaryElements", [](mfem::Mesh* a)->void { a->GenerateBoundaryElements(); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::FinalizeTriMesh(int, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::FinalizeTriMesh(int, int, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:760:9
    t.method("FinalizeTriMesh", [](mfem::Mesh& a)->void { a.FinalizeTriMesh(); });
    t.method("FinalizeTriMesh", [](mfem::Mesh& a, int arg0)->void { a.FinalizeTriMesh(arg0); });
    t.method("FinalizeTriMesh", [](mfem::Mesh& a, int arg0, int arg1)->void { a.FinalizeTriMesh(arg0, arg1); });
    t.method("FinalizeTriMesh", [](mfem::Mesh& a, int arg0, int arg1, bool arg2)->void { a.FinalizeTriMesh(arg0, arg1, arg2); });
    t.method("FinalizeTriMesh", [](mfem::Mesh* a)->void { a->FinalizeTriMesh(); });
    t.method("FinalizeTriMesh", [](mfem::Mesh* a, int arg0)->void { a->FinalizeTriMesh(arg0); });
    t.method("FinalizeTriMesh", [](mfem::Mesh* a, int arg0, int arg1)->void { a->FinalizeTriMesh(arg0, arg1); });
    t.method("FinalizeTriMesh", [](mfem::Mesh* a, int arg0, int arg1, bool arg2)->void { a->FinalizeTriMesh(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::FinalizeQuadMesh(int, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::FinalizeQuadMesh(int, int, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:763:9
    t.method("FinalizeQuadMesh", [](mfem::Mesh& a)->void { a.FinalizeQuadMesh(); });
    t.method("FinalizeQuadMesh", [](mfem::Mesh& a, int arg0)->void { a.FinalizeQuadMesh(arg0); });
    t.method("FinalizeQuadMesh", [](mfem::Mesh& a, int arg0, int arg1)->void { a.FinalizeQuadMesh(arg0, arg1); });
    t.method("FinalizeQuadMesh", [](mfem::Mesh& a, int arg0, int arg1, bool arg2)->void { a.FinalizeQuadMesh(arg0, arg1, arg2); });
    t.method("FinalizeQuadMesh", [](mfem::Mesh* a)->void { a->FinalizeQuadMesh(); });
    t.method("FinalizeQuadMesh", [](mfem::Mesh* a, int arg0)->void { a->FinalizeQuadMesh(arg0); });
    t.method("FinalizeQuadMesh", [](mfem::Mesh* a, int arg0, int arg1)->void { a->FinalizeQuadMesh(arg0, arg1); });
    t.method("FinalizeQuadMesh", [](mfem::Mesh* a, int arg0, int arg1, bool arg2)->void { a->FinalizeQuadMesh(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::FinalizeTetMesh(int, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::FinalizeTetMesh(int, int, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:766:9
    t.method("FinalizeTetMesh", [](mfem::Mesh& a)->void { a.FinalizeTetMesh(); });
    t.method("FinalizeTetMesh", [](mfem::Mesh& a, int arg0)->void { a.FinalizeTetMesh(arg0); });
    t.method("FinalizeTetMesh", [](mfem::Mesh& a, int arg0, int arg1)->void { a.FinalizeTetMesh(arg0, arg1); });
    t.method("FinalizeTetMesh", [](mfem::Mesh& a, int arg0, int arg1, bool arg2)->void { a.FinalizeTetMesh(arg0, arg1, arg2); });
    t.method("FinalizeTetMesh", [](mfem::Mesh* a)->void { a->FinalizeTetMesh(); });
    t.method("FinalizeTetMesh", [](mfem::Mesh* a, int arg0)->void { a->FinalizeTetMesh(arg0); });
    t.method("FinalizeTetMesh", [](mfem::Mesh* a, int arg0, int arg1)->void { a->FinalizeTetMesh(arg0, arg1); });
    t.method("FinalizeTetMesh", [](mfem::Mesh* a, int arg0, int arg1, bool arg2)->void { a->FinalizeTetMesh(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::FinalizeWedgeMesh(int, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::FinalizeWedgeMesh(int, int, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:769:9
    t.method("FinalizeWedgeMesh", [](mfem::Mesh& a)->void { a.FinalizeWedgeMesh(); });
    t.method("FinalizeWedgeMesh", [](mfem::Mesh& a, int arg0)->void { a.FinalizeWedgeMesh(arg0); });
    t.method("FinalizeWedgeMesh", [](mfem::Mesh& a, int arg0, int arg1)->void { a.FinalizeWedgeMesh(arg0, arg1); });
    t.method("FinalizeWedgeMesh", [](mfem::Mesh& a, int arg0, int arg1, bool arg2)->void { a.FinalizeWedgeMesh(arg0, arg1, arg2); });
    t.method("FinalizeWedgeMesh", [](mfem::Mesh* a)->void { a->FinalizeWedgeMesh(); });
    t.method("FinalizeWedgeMesh", [](mfem::Mesh* a, int arg0)->void { a->FinalizeWedgeMesh(arg0); });
    t.method("FinalizeWedgeMesh", [](mfem::Mesh* a, int arg0, int arg1)->void { a->FinalizeWedgeMesh(arg0, arg1); });
    t.method("FinalizeWedgeMesh", [](mfem::Mesh* a, int arg0, int arg1, bool arg2)->void { a->FinalizeWedgeMesh(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::FinalizeHexMesh(int, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::FinalizeHexMesh(int, int, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:772:9
    t.method("FinalizeHexMesh", [](mfem::Mesh& a)->void { a.FinalizeHexMesh(); });
    t.method("FinalizeHexMesh", [](mfem::Mesh& a, int arg0)->void { a.FinalizeHexMesh(arg0); });
    t.method("FinalizeHexMesh", [](mfem::Mesh& a, int arg0, int arg1)->void { a.FinalizeHexMesh(arg0, arg1); });
    t.method("FinalizeHexMesh", [](mfem::Mesh& a, int arg0, int arg1, bool arg2)->void { a.FinalizeHexMesh(arg0, arg1, arg2); });
    t.method("FinalizeHexMesh", [](mfem::Mesh* a)->void { a->FinalizeHexMesh(); });
    t.method("FinalizeHexMesh", [](mfem::Mesh* a, int arg0)->void { a->FinalizeHexMesh(arg0); });
    t.method("FinalizeHexMesh", [](mfem::Mesh* a, int arg0, int arg1)->void { a->FinalizeHexMesh(arg0, arg1); });
    t.method("FinalizeHexMesh", [](mfem::Mesh* a, int arg0, int arg1, bool arg2)->void { a->FinalizeHexMesh(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::FinalizeMesh(int, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::FinalizeMesh(int, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:776:9
    t.method("FinalizeMesh", [](mfem::Mesh& a)->void { a.FinalizeMesh(); });
    t.method("FinalizeMesh", [](mfem::Mesh& a, int arg0)->void { a.FinalizeMesh(arg0); });
    t.method("FinalizeMesh", [](mfem::Mesh& a, int arg0, bool arg1)->void { a.FinalizeMesh(arg0, arg1); });
    t.method("FinalizeMesh", [](mfem::Mesh* a)->void { a->FinalizeMesh(); });
    t.method("FinalizeMesh", [](mfem::Mesh* a, int arg0)->void { a->FinalizeMesh(arg0); });
    t.method("FinalizeMesh", [](mfem::Mesh* a, int arg0, bool arg1)->void { a->FinalizeMesh(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::FinalizeTopology(bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::FinalizeTopology(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:789:9
    t.method("FinalizeTopology", [](mfem::Mesh& a)->void { a.FinalizeTopology(); });
    t.method("FinalizeTopology", [](mfem::Mesh& a, bool arg0)->void { a.FinalizeTopology(arg0); });
    t.method("FinalizeTopology", [](mfem::Mesh* a)->void { a->FinalizeTopology(); });
    t.method("FinalizeTopology", [](mfem::Mesh* a, bool arg0)->void { a->FinalizeTopology(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Finalize(bool, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::Finalize(bool, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:805:17
    t.method("Finalize", [](mfem::Mesh& a)->void { a.Finalize(); });
    t.method("Finalize", [](mfem::Mesh& a, bool arg0)->void { a.Finalize(arg0); });
    t.method("Finalize", [](mfem::Mesh& a, bool arg0, bool arg1)->void { a.Finalize(arg0, arg1); });
    t.method("Finalize", [](mfem::Mesh* a)->void { a->Finalize(); });
    t.method("Finalize", [](mfem::Mesh* a, bool arg0)->void { a->Finalize(arg0); });
    t.method("Finalize", [](mfem::Mesh* a, bool arg0, bool arg1)->void { a->Finalize(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SetAttributes() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SetAttributes()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:807:17
    t.method("SetAttributes", [](mfem::Mesh& a)->void { a.SetAttributes(); });
    t.method("SetAttributes", [](mfem::Mesh* a)->void { a->SetAttributes(); });

    DEBUG_MSG("Adding wrapper for double mfem::Mesh::GetGeckoElementOrdering(mfem::Array<int> &, int, int, int, int, bool, double) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::Mesh::GetGeckoElementOrdering(mfem::Array<int> &, int, int, int, int, bool, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:828:11
    t.method("GetGeckoElementOrdering", [](mfem::Mesh& a, mfem::Array<int> & arg0)->double { return a.GetGeckoElementOrdering(arg0); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh& a, mfem::Array<int> & arg0, int arg1)->double { return a.GetGeckoElementOrdering(arg0, arg1); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh& a, mfem::Array<int> & arg0, int arg1, int arg2)->double { return a.GetGeckoElementOrdering(arg0, arg1, arg2); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh& a, mfem::Array<int> & arg0, int arg1, int arg2, int arg3)->double { return a.GetGeckoElementOrdering(arg0, arg1, arg2, arg3); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh& a, mfem::Array<int> & arg0, int arg1, int arg2, int arg3, int arg4)->double { return a.GetGeckoElementOrdering(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh& a, mfem::Array<int> & arg0, int arg1, int arg2, int arg3, int arg4, bool arg5)->double { return a.GetGeckoElementOrdering(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh& a, mfem::Array<int> & arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, double arg6)->double { return a.GetGeckoElementOrdering(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh* a, mfem::Array<int> & arg0)->double { return a->GetGeckoElementOrdering(arg0); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh* a, mfem::Array<int> & arg0, int arg1)->double { return a->GetGeckoElementOrdering(arg0, arg1); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh* a, mfem::Array<int> & arg0, int arg1, int arg2)->double { return a->GetGeckoElementOrdering(arg0, arg1, arg2); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh* a, mfem::Array<int> & arg0, int arg1, int arg2, int arg3)->double { return a->GetGeckoElementOrdering(arg0, arg1, arg2, arg3); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh* a, mfem::Array<int> & arg0, int arg1, int arg2, int arg3, int arg4)->double { return a->GetGeckoElementOrdering(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh* a, mfem::Array<int> & arg0, int arg1, int arg2, int arg3, int arg4, bool arg5)->double { return a->GetGeckoElementOrdering(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("GetGeckoElementOrdering", [](mfem::Mesh* a, mfem::Array<int> & arg0, int arg1, int arg2, int arg3, int arg4, bool arg5, double arg6)->double { return a->GetGeckoElementOrdering(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetHilbertElementOrdering(mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetHilbertElementOrdering(mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:837:9
    t.method("GetHilbertElementOrdering", [](mfem::Mesh& a, mfem::Array<int> & arg0)->void { a.GetHilbertElementOrdering(arg0); });
    t.method("GetHilbertElementOrdering", [](mfem::Mesh* a, mfem::Array<int> & arg0)->void { a->GetHilbertElementOrdering(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::ReorderElements(const mfem::Array<int> &, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::ReorderElements(const mfem::Array<int> &, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:842:9
    t.method("ReorderElements", [](mfem::Mesh& a, const mfem::Array<int> & arg0)->void { a.ReorderElements(arg0); });
    t.method("ReorderElements", [](mfem::Mesh& a, const mfem::Array<int> & arg0, bool arg1)->void { a.ReorderElements(arg0, arg1); });
    t.method("ReorderElements", [](mfem::Mesh* a, const mfem::Array<int> & arg0)->void { a->ReorderElements(arg0); });
    t.method("ReorderElements", [](mfem::Mesh* a, const mfem::Array<int> & arg0, bool arg1)->void { a->ReorderElements(arg0, arg1); });


    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Mesh(int, int, int, mfem::Element::Type, bool, double, double, double, bool) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:846:4
    t.constructor<int, int, int, mfem::Element::Type>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, int, mfem::Element::Type, bool>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, int, mfem::Element::Type, bool, double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, int, mfem::Element::Type, bool, double, double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, int, mfem::Element::Type, bool, double, double, double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, int, mfem::Element::Type, bool, double, double, double, bool>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Mesh(int, int, mfem::Element::Type, bool, double, double, bool) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:856:4
    t.constructor<int, int, mfem::Element::Type>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, mfem::Element::Type, bool>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, mfem::Element::Type, bool, double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, mfem::Element::Type, bool, double, double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, int, mfem::Element::Type, bool, double, double, bool>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Mesh(int, double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:865:13
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, double>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Mesh(const char *, int, int, bool) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:874:13
    t.constructor<const char *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, int, int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const char *, int, int, bool>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Mesh(mfem::Mesh *, int, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:888:4
    t.constructor<mfem::Mesh *, int, int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::Clear()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:904:9
    t.method("Clear", [](mfem::Mesh& a)->void { a.Clear(); });
    t.method("Clear", [](mfem::Mesh* a)->void { a->Clear(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::MeshGenerator() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::MeshGenerator()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:921:15
    t.method("MeshGenerator", [](mfem::Mesh& a)->int { return a.MeshGenerator(); });
    t.method("MeshGenerator", [](mfem::Mesh* a)->int { return a->MeshGenerator(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetNV() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetNV()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:925:15
    t.method("GetNV", [](mfem::Mesh const& a)->int { return a.GetNV(); });
    t.method("GetNV", [](mfem::Mesh const* a)->int { return a->GetNV(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetNE() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetNE()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:928:15
    t.method("GetNE", [](mfem::Mesh const& a)->int { return a.GetNE(); });
    t.method("GetNE", [](mfem::Mesh const* a)->int { return a->GetNE(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetNBE() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetNBE()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:931:15
    t.method("GetNBE", [](mfem::Mesh const& a)->int { return a.GetNBE(); });
    t.method("GetNBE", [](mfem::Mesh const* a)->int { return a->GetNBE(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetNEdges() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetNEdges()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:934:15
    t.method("GetNEdges", [](mfem::Mesh const& a)->int { return a.GetNEdges(); });
    t.method("GetNEdges", [](mfem::Mesh const* a)->int { return a->GetNEdges(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetNFaces() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetNFaces()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:937:15
    t.method("GetNFaces", [](mfem::Mesh const& a)->int { return a.GetNFaces(); });
    t.method("GetNFaces", [](mfem::Mesh const* a)->int { return a->GetNFaces(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetNumFaces() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetNumFaces()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:940:8
    t.method("GetNumFaces", [](mfem::Mesh const& a)->int { return a.GetNumFaces(); });
    t.method("GetNumFaces", [](mfem::Mesh const* a)->int { return a->GetNumFaces(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetNumFacesWithGhost() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetNumFacesWithGhost()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:944:8
    t.method("GetNumFacesWithGhost", [](mfem::Mesh const& a)->int { return a.GetNumFacesWithGhost(); });
    t.method("GetNumFacesWithGhost", [](mfem::Mesh const* a)->int { return a->GetNumFacesWithGhost(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetNFbyType(mfem::FaceType) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetNFbyType(mfem::FaceType)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:954:16
    t.method("GetNFbyType", [](mfem::Mesh const& a, mfem::FaceType arg0)->int { return a.GetNFbyType(arg0); });
    t.method("GetNFbyType", [](mfem::Mesh const* a, mfem::FaceType arg0)->int { return a->GetNFbyType(arg0); });

    DEBUG_MSG("Adding wrapper for long mfem::Mesh::ReduceInt(int) (" __HERE__ ")");
    // signature to use in the veto list: long mfem::Mesh::ReduceInt(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:957:17
    t.method("ReduceInt", [](mfem::Mesh const& a, int arg0)->long { return a.ReduceInt(arg0); });
    t.method("ReduceInt", [](mfem::Mesh const* a, int arg0)->long { return a->ReduceInt(arg0); });

    DEBUG_MSG("Adding wrapper for long mfem::Mesh::GetGlobalNE() (" __HERE__ ")");
    // signature to use in the veto list: long mfem::Mesh::GetGlobalNE()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:960:9
    t.method("GetGlobalNE", [](mfem::Mesh const& a)->long { return a.GetGlobalNE(); });
    t.method("GetGlobalNE", [](mfem::Mesh const* a)->long { return a->GetGlobalNE(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::EulerNumber() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::EulerNumber()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:993:15
    t.method("EulerNumber", [](mfem::Mesh const& a)->int { return a.EulerNumber(); });
    t.method("EulerNumber", [](mfem::Mesh const* a)->int { return a->EulerNumber(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::EulerNumber2D() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::EulerNumber2D()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:996:15
    t.method("EulerNumber2D", [](mfem::Mesh const& a)->int { return a.EulerNumber2D(); });
    t.method("EulerNumber2D", [](mfem::Mesh const* a)->int { return a->EulerNumber2D(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::Dimension() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::Dimension()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:999:8
    t.method("Dimension", [](mfem::Mesh const& a)->int { return a.Dimension(); });
    t.method("Dimension", [](mfem::Mesh const* a)->int { return a->Dimension(); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::SpaceDimension() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::SpaceDimension()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1000:8
    t.method("SpaceDimension", [](mfem::Mesh const& a)->int { return a.SpaceDimension(); });
    t.method("SpaceDimension", [](mfem::Mesh const* a)->int { return a->SpaceDimension(); });

    DEBUG_MSG("Adding wrapper for const double * mfem::Mesh::GetVertex(int) (" __HERE__ ")");
    // signature to use in the veto list: const double * mfem::Mesh::GetVertex(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1005:18
    t.method("GetVertex", [](mfem::Mesh const& a, int arg0)->const double * { return a.GetVertex(arg0); });
    t.method("GetVertex", [](mfem::Mesh const* a, int arg0)->const double * { return a->GetVertex(arg0); });

    DEBUG_MSG("Adding wrapper for double * mfem::Mesh::GetVertex(int) (" __HERE__ ")");
    // signature to use in the veto list: double * mfem::Mesh::GetVertex(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1010:12
    t.method("GetVertex", [](mfem::Mesh& a, int arg0)->double * { return a.GetVertex(arg0); });
    t.method("GetVertex", [](mfem::Mesh* a, int arg0)->double * { return a->GetVertex(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetElementData(int, mfem::Array<int> &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetElementData(int, mfem::Array<int> &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1012:9
    t.method("GetElementData", [](mfem::Mesh const& a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a.GetElementData(arg0, arg1, arg2); });
    t.method("GetElementData", [](mfem::Mesh const* a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a->GetElementData(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::HasBoundaryElements() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::HasBoundaryElements()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1016:17
    t.method("HasBoundaryElements", [](mfem::Mesh const& a)->bool { return a.HasBoundaryElements(); });
    t.method("HasBoundaryElements", [](mfem::Mesh const* a)->bool { return a->HasBoundaryElements(); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetBdrElementData(int, mfem::Array<int> &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetBdrElementData(int, mfem::Array<int> &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1018:9
    t.method("GetBdrElementData", [](mfem::Mesh const& a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a.GetBdrElementData(arg0, arg1, arg2); });
    t.method("GetBdrElementData", [](mfem::Mesh const* a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a->GetBdrElementData(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::ChangeVertexDataOwnership(double *, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::ChangeVertexDataOwnership(double *, int, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1027:9
    t.method("ChangeVertexDataOwnership", [](mfem::Mesh& a, double * arg0, int arg1)->void { a.ChangeVertexDataOwnership(arg0, arg1); });
    t.method("ChangeVertexDataOwnership", [](mfem::Mesh& a, double * arg0, int arg1, bool arg2)->void { a.ChangeVertexDataOwnership(arg0, arg1, arg2); });
    t.method("ChangeVertexDataOwnership", [](mfem::Mesh* a, double * arg0, int arg1)->void { a->ChangeVertexDataOwnership(arg0, arg1); });
    t.method("ChangeVertexDataOwnership", [](mfem::Mesh* a, double * arg0, int arg1, bool arg2)->void { a->ChangeVertexDataOwnership(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for const mfem::Element *const * mfem::Mesh::GetElementsArray() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Element *const * mfem::Mesh::GetElementsArray()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1030:26
    t.method("GetElementsArray", [](mfem::Mesh const& a)->const mfem::Element *const * { return a.GetElementsArray(); });
    t.method("GetElementsArray", [](mfem::Mesh const* a)->const mfem::Element *const * { return a->GetElementsArray(); });

    DEBUG_MSG("Adding wrapper for const mfem::Element * mfem::Mesh::GetElement(int) (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Element * mfem::Mesh::GetElement(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1033:19
    t.method("GetElement", [](mfem::Mesh const& a, int arg0)->const mfem::Element * { return a.GetElement(arg0); });
    t.method("GetElement", [](mfem::Mesh const* a, int arg0)->const mfem::Element * { return a->GetElement(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Element * mfem::Mesh::GetElement(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Element * mfem::Mesh::GetElement(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1035:13
    t.method("GetElement", [](mfem::Mesh& a, int arg0)->mfem::Element * { return a.GetElement(arg0); });
    t.method("GetElement", [](mfem::Mesh* a, int arg0)->mfem::Element * { return a->GetElement(arg0); });

    DEBUG_MSG("Adding wrapper for const mfem::Element * mfem::Mesh::GetBdrElement(int) (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Element * mfem::Mesh::GetBdrElement(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1037:19
    t.method("GetBdrElement", [](mfem::Mesh const& a, int arg0)->const mfem::Element * { return a.GetBdrElement(arg0); });
    t.method("GetBdrElement", [](mfem::Mesh const* a, int arg0)->const mfem::Element * { return a->GetBdrElement(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Element * mfem::Mesh::GetBdrElement(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Element * mfem::Mesh::GetBdrElement(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1039:13
    t.method("GetBdrElement", [](mfem::Mesh& a, int arg0)->mfem::Element * { return a.GetBdrElement(arg0); });
    t.method("GetBdrElement", [](mfem::Mesh* a, int arg0)->mfem::Element * { return a->GetBdrElement(arg0); });

    DEBUG_MSG("Adding wrapper for const mfem::Element * mfem::Mesh::GetFace(int) (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Element * mfem::Mesh::GetFace(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1041:19
    t.method("GetFace", [](mfem::Mesh const& a, int arg0)->const mfem::Element * { return a.GetFace(arg0); });
    t.method("GetFace", [](mfem::Mesh const* a, int arg0)->const mfem::Element * { return a->GetFace(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Geometry::Type mfem::Mesh::GetFaceGeometry(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Geometry::Type mfem::Mesh::GetFaceGeometry(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1043:19
    t.method("GetFaceGeometry", [](mfem::Mesh const& a, int arg0)->mfem::Geometry::Type { return a.GetFaceGeometry(arg0); });
    t.method("GetFaceGeometry", [](mfem::Mesh const* a, int arg0)->mfem::Geometry::Type { return a->GetFaceGeometry(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Geometry::Type mfem::Mesh::GetElementGeometry(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Geometry::Type mfem::Mesh::GetElementGeometry(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1048:19
    t.method("GetElementGeometry", [](mfem::Mesh const& a, int arg0)->mfem::Geometry::Type { return a.GetElementGeometry(arg0); });
    t.method("GetElementGeometry", [](mfem::Mesh const* a, int arg0)->mfem::Geometry::Type { return a->GetElementGeometry(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Geometry::Type mfem::Mesh::GetBdrElementGeometry(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Geometry::Type mfem::Mesh::GetBdrElementGeometry(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1053:19
    t.method("GetBdrElementGeometry", [](mfem::Mesh const& a, int arg0)->mfem::Geometry::Type { return a.GetBdrElementGeometry(arg0); });
    t.method("GetBdrElementGeometry", [](mfem::Mesh const* a, int arg0)->mfem::Geometry::Type { return a->GetBdrElementGeometry(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Geometry::Type mfem::Mesh::GetFaceBaseGeometry(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Geometry::Type mfem::Mesh::GetFaceBaseGeometry(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1059:19
    t.method("GetFaceBaseGeometry", [](mfem::Mesh const& a, int arg0)->mfem::Geometry::Type { return a.GetFaceBaseGeometry(arg0); });
    t.method("GetFaceBaseGeometry", [](mfem::Mesh const* a, int arg0)->mfem::Geometry::Type { return a->GetFaceBaseGeometry(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Geometry::Type mfem::Mesh::GetElementBaseGeometry(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Geometry::Type mfem::Mesh::GetElementBaseGeometry(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1062:19
    t.method("GetElementBaseGeometry", [](mfem::Mesh const& a, int arg0)->mfem::Geometry::Type { return a.GetElementBaseGeometry(arg0); });
    t.method("GetElementBaseGeometry", [](mfem::Mesh const* a, int arg0)->mfem::Geometry::Type { return a->GetElementBaseGeometry(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Geometry::Type mfem::Mesh::GetBdrElementBaseGeometry(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Geometry::Type mfem::Mesh::GetBdrElementBaseGeometry(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1065:19
    t.method("GetBdrElementBaseGeometry", [](mfem::Mesh const& a, int arg0)->mfem::Geometry::Type { return a.GetBdrElementBaseGeometry(arg0); });
    t.method("GetBdrElementBaseGeometry", [](mfem::Mesh const* a, int arg0)->mfem::Geometry::Type { return a->GetBdrElementBaseGeometry(arg0); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::HasGeometry(mfem::Geometry::Type) (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::HasGeometry(mfem::Geometry::Type)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1070:9
    t.method("HasGeometry", [](mfem::Mesh const& a, mfem::Geometry::Type arg0)->bool { return a.HasGeometry(arg0); });
    t.method("HasGeometry", [](mfem::Mesh const* a, mfem::Geometry::Type arg0)->bool { return a->HasGeometry(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetNumGeometries(int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetNumGeometries(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1076:8
    t.method("GetNumGeometries", [](mfem::Mesh const& a, int arg0)->int { return a.GetNumGeometries(arg0); });
    t.method("GetNumGeometries", [](mfem::Mesh const* a, int arg0)->int { return a->GetNumGeometries(arg0); });

    // DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetGeometries(int, mfem::Array<mfem::Geometry::Type> &) (" __HERE__ ")");
    // // signature to use in the veto list: void mfem::Mesh::GetGeometries(int, mfem::Array<mfem::Geometry::Type> &)
    // // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1082:9
    // t.method("GetGeometries", [](mfem::Mesh const& a, int arg0, mfem::Array<mfem::Geometry::Type> & arg1)->void { a.GetGeometries(arg0, arg1); });
    // t.method("GetGeometries", [](mfem::Mesh const* a, int arg0, mfem::Array<mfem::Geometry::Type> & arg1)->void { a->GetGeometries(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetElementVertices(int, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetElementVertices(int, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1102:9
    t.method("GetElementVertices", [](mfem::Mesh const& a, int arg0, mfem::Array<int> & arg1)->void { a.GetElementVertices(arg0, arg1); });
    t.method("GetElementVertices", [](mfem::Mesh const* a, int arg0, mfem::Array<int> & arg1)->void { a->GetElementVertices(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetBdrElementVertices(int, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetBdrElementVertices(int, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1106:9
    t.method("GetBdrElementVertices", [](mfem::Mesh const& a, int arg0, mfem::Array<int> & arg1)->void { a.GetBdrElementVertices(arg0, arg1); });
    t.method("GetBdrElementVertices", [](mfem::Mesh const* a, int arg0, mfem::Array<int> & arg1)->void { a->GetBdrElementVertices(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetElementEdges(int, mfem::Array<int> &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetElementEdges(int, mfem::Array<int> &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1110:9
    t.method("GetElementEdges", [](mfem::Mesh const& a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a.GetElementEdges(arg0, arg1, arg2); });
    t.method("GetElementEdges", [](mfem::Mesh const* a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a->GetElementEdges(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetBdrElementEdges(int, mfem::Array<int> &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetBdrElementEdges(int, mfem::Array<int> &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1113:9
    t.method("GetBdrElementEdges", [](mfem::Mesh const& a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a.GetBdrElementEdges(arg0, arg1, arg2); });
    t.method("GetBdrElementEdges", [](mfem::Mesh const* a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a->GetBdrElementEdges(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetFaceEdges(int, mfem::Array<int> &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetFaceEdges(int, mfem::Array<int> &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1117:9
    t.method("GetFaceEdges", [](mfem::Mesh const& a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a.GetFaceEdges(arg0, arg1, arg2); });
    t.method("GetFaceEdges", [](mfem::Mesh const* a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a->GetFaceEdges(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetFaceVertices(int, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetFaceVertices(int, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1120:9
    t.method("GetFaceVertices", [](mfem::Mesh const& a, int arg0, mfem::Array<int> & arg1)->void { a.GetFaceVertices(arg0, arg1); });
    t.method("GetFaceVertices", [](mfem::Mesh const* a, int arg0, mfem::Array<int> & arg1)->void { a->GetFaceVertices(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetEdgeVertices(int, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetEdgeVertices(int, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1133:9
    t.method("GetEdgeVertices", [](mfem::Mesh const& a, int arg0, mfem::Array<int> & arg1)->void { a.GetEdgeVertices(arg0, arg1); });
    t.method("GetEdgeVertices", [](mfem::Mesh const* a, int arg0, mfem::Array<int> & arg1)->void { a->GetEdgeVertices(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for mfem::Table * mfem::Mesh::GetFaceEdgeTable() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Table * mfem::Mesh::GetFaceEdgeTable()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1136:11
    t.method("GetFaceEdgeTable", [](mfem::Mesh const& a)->mfem::Table * { return a.GetFaceEdgeTable(); });
    t.method("GetFaceEdgeTable", [](mfem::Mesh const* a)->mfem::Table * { return a->GetFaceEdgeTable(); });

    DEBUG_MSG("Adding wrapper for mfem::Table * mfem::Mesh::GetEdgeVertexTable() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Table * mfem::Mesh::GetEdgeVertexTable()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1139:11
    t.method("GetEdgeVertexTable", [](mfem::Mesh const& a)->mfem::Table * { return a.GetEdgeVertexTable(); });
    t.method("GetEdgeVertexTable", [](mfem::Mesh const* a)->mfem::Table * { return a->GetEdgeVertexTable(); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetElementFaces(int, mfem::Array<int> &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetElementFaces(int, mfem::Array<int> &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1142:9
    t.method("GetElementFaces", [](mfem::Mesh const& a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a.GetElementFaces(arg0, arg1, arg2); });
    t.method("GetElementFaces", [](mfem::Mesh const* a, int arg0, mfem::Array<int> & arg1, mfem::Array<int> & arg2)->void { a->GetElementFaces(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetBdrElementFace(int, int *, int *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetBdrElementFace(int, int *, int *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1145:9
    t.method("GetBdrElementFace", [](mfem::Mesh const& a, int arg0, int * arg1, int * arg2)->void { a.GetBdrElementFace(arg0, arg1, arg2); });
    t.method("GetBdrElementFace", [](mfem::Mesh const* a, int arg0, int * arg1, int * arg2)->void { a->GetBdrElementFace(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetBdrElementEdgeIndex(int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetBdrElementEdgeIndex(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1150:8
    t.method("GetBdrElementEdgeIndex", [](mfem::Mesh const& a, int arg0)->int { return a.GetBdrElementEdgeIndex(arg0); });
    t.method("GetBdrElementEdgeIndex", [](mfem::Mesh const* a, int arg0)->int { return a->GetBdrElementEdgeIndex(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetBdrElementAdjacentElement(int, int &, int &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetBdrElementAdjacentElement(int, int &, int &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1154:9
    t.method("GetBdrElementAdjacentElement", [](mfem::Mesh const& a, int arg0, int & arg1, int & arg2)->void { a.GetBdrElementAdjacentElement(arg0, arg1, arg2); });
    t.method("GetBdrElementAdjacentElement", [](mfem::Mesh const* a, int arg0, int & arg1, int & arg2)->void { a->GetBdrElementAdjacentElement(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for mfem::Element::Type mfem::Mesh::GetElementType(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Element::Type mfem::Mesh::GetElementType(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1157:18
    t.method("GetElementType", [](mfem::Mesh const& a, int arg0)->mfem::Element::Type { return a.GetElementType(arg0); });
    t.method("GetElementType", [](mfem::Mesh const* a, int arg0)->mfem::Element::Type { return a->GetElementType(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Element::Type mfem::Mesh::GetBdrElementType(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Element::Type mfem::Mesh::GetBdrElementType(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1160:18
    t.method("GetBdrElementType", [](mfem::Mesh const& a, int arg0)->mfem::Element::Type { return a.GetBdrElementType(arg0); });
    t.method("GetBdrElementType", [](mfem::Mesh const* a, int arg0)->mfem::Element::Type { return a->GetBdrElementType(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetPointMatrix(int, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetPointMatrix(int, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1164:9
    t.method("GetPointMatrix", [](mfem::Mesh const& a, int arg0, mfem::DenseMatrix & arg1)->void { a.GetPointMatrix(arg0, arg1); });
    t.method("GetPointMatrix", [](mfem::Mesh const* a, int arg0, mfem::DenseMatrix & arg1)->void { a->GetPointMatrix(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetBdrPointMatrix(int, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetBdrPointMatrix(int, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1168:9
    t.method("GetBdrPointMatrix", [](mfem::Mesh const& a, int arg0, mfem::DenseMatrix & arg1)->void { a.GetBdrPointMatrix(arg0, arg1); });
    t.method("GetBdrPointMatrix", [](mfem::Mesh const* a, int arg0, mfem::DenseMatrix & arg1)->void { a->GetBdrPointMatrix(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for mfem::FiniteElement * mfem::Mesh::GetTransformationFEforElementType(mfem::Element::Type) (" __HERE__ ")");
    // signature to use in the veto list: mfem::FiniteElement * mfem::Mesh::GetTransformationFEforElementType(mfem::Element::Type)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1170:26
    module_.method("mfem!Mesh!GetTransformationFEforElementType", [](mfem::Element::Type arg0)->mfem::FiniteElement * { return mfem::Mesh::GetTransformationFEforElementType(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetElementTransformation(int, mfem::IsoparametricTransformation *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetElementTransformation(int, mfem::IsoparametricTransformation *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1174:9
    t.method("GetElementTransformation", [](mfem::Mesh& a, int arg0, mfem::IsoparametricTransformation * arg1)->void { a.GetElementTransformation(arg0, arg1); });
    t.method("GetElementTransformation", [](mfem::Mesh* a, int arg0, mfem::IsoparametricTransformation * arg1)->void { a->GetElementTransformation(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for mfem::ElementTransformation * mfem::Mesh::GetElementTransformation(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::ElementTransformation * mfem::Mesh::GetElementTransformation(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1177:27
    t.method("GetElementTransformation", [](mfem::Mesh& a, int arg0)->mfem::ElementTransformation * { return a.GetElementTransformation(arg0); });
    t.method("GetElementTransformation", [](mfem::Mesh* a, int arg0)->mfem::ElementTransformation * { return a->GetElementTransformation(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetElementTransformation(int, const mfem::Vector &, mfem::IsoparametricTransformation *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetElementTransformation(int, const mfem::Vector &, mfem::IsoparametricTransformation *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1181:9
    t.method("GetElementTransformation", [](mfem::Mesh& a, int arg0, const mfem::Vector & arg1, mfem::IsoparametricTransformation * arg2)->void { a.GetElementTransformation(arg0, arg1, arg2); });
    t.method("GetElementTransformation", [](mfem::Mesh* a, int arg0, const mfem::Vector & arg1, mfem::IsoparametricTransformation * arg2)->void { a->GetElementTransformation(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for mfem::ElementTransformation * mfem::Mesh::GetBdrElementTransformation(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::ElementTransformation * mfem::Mesh::GetBdrElementTransformation(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1185:28
    t.method("GetBdrElementTransformation", [](mfem::Mesh& a, int arg0)->mfem::ElementTransformation * { return a.GetBdrElementTransformation(arg0); });
    t.method("GetBdrElementTransformation", [](mfem::Mesh* a, int arg0)->mfem::ElementTransformation * { return a->GetBdrElementTransformation(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetBdrElementTransformation(int, mfem::IsoparametricTransformation *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetBdrElementTransformation(int, mfem::IsoparametricTransformation *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1186:9
    t.method("GetBdrElementTransformation", [](mfem::Mesh& a, int arg0, mfem::IsoparametricTransformation * arg1)->void { a.GetBdrElementTransformation(arg0, arg1); });
    t.method("GetBdrElementTransformation", [](mfem::Mesh* a, int arg0, mfem::IsoparametricTransformation * arg1)->void { a->GetBdrElementTransformation(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetFaceTransformation(int, mfem::IsoparametricTransformation *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetFaceTransformation(int, mfem::IsoparametricTransformation *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1190:9
    t.method("GetFaceTransformation", [](mfem::Mesh& a, int arg0, mfem::IsoparametricTransformation * arg1)->void { a.GetFaceTransformation(arg0, arg1); });
    t.method("GetFaceTransformation", [](mfem::Mesh* a, int arg0, mfem::IsoparametricTransformation * arg1)->void { a->GetFaceTransformation(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetLocalFaceTransformation(int, int, mfem::IsoparametricTransformation &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetLocalFaceTransformation(int, int, mfem::IsoparametricTransformation &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1197:9
    t.method("GetLocalFaceTransformation", [](mfem::Mesh& a, int arg0, int arg1, mfem::IsoparametricTransformation & arg2, int arg3)->void { a.GetLocalFaceTransformation(arg0, arg1, arg2, arg3); });
    t.method("GetLocalFaceTransformation", [](mfem::Mesh* a, int arg0, int arg1, mfem::IsoparametricTransformation & arg2, int arg3)->void { a->GetLocalFaceTransformation(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for mfem::ElementTransformation * mfem::Mesh::GetFaceTransformation(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::ElementTransformation * mfem::Mesh::GetFaceTransformation(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1202:27
    t.method("GetFaceTransformation", [](mfem::Mesh& a, int arg0)->mfem::ElementTransformation * { return a.GetFaceTransformation(arg0); });
    t.method("GetFaceTransformation", [](mfem::Mesh* a, int arg0)->mfem::ElementTransformation * { return a->GetFaceTransformation(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetEdgeTransformation(int, mfem::IsoparametricTransformation *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetEdgeTransformation(int, mfem::IsoparametricTransformation *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1206:9
    t.method("GetEdgeTransformation", [](mfem::Mesh& a, int arg0, mfem::IsoparametricTransformation * arg1)->void { a.GetEdgeTransformation(arg0, arg1); });
    t.method("GetEdgeTransformation", [](mfem::Mesh* a, int arg0, mfem::IsoparametricTransformation * arg1)->void { a->GetEdgeTransformation(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for mfem::ElementTransformation * mfem::Mesh::GetEdgeTransformation(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::ElementTransformation * mfem::Mesh::GetEdgeTransformation(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1209:27
    t.method("GetEdgeTransformation", [](mfem::Mesh& a, int arg0)->mfem::ElementTransformation * { return a.GetEdgeTransformation(arg0); });
    t.method("GetEdgeTransformation", [](mfem::Mesh* a, int arg0)->mfem::ElementTransformation * { return a->GetEdgeTransformation(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::FaceElementTransformations * mfem::Mesh::GetFaceElementTransformations(int, int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::FaceElementTransformations * mfem::Mesh::GetFaceElementTransformations(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1241:40
    t.method("GetFaceElementTransformations", [](mfem::Mesh& a, int arg0)->mfem::FaceElementTransformations * { return a.GetFaceElementTransformations(arg0); });
    t.method("GetFaceElementTransformations", [](mfem::Mesh& a, int arg0, int arg1)->mfem::FaceElementTransformations * { return a.GetFaceElementTransformations(arg0, arg1); });
    t.method("GetFaceElementTransformations", [](mfem::Mesh* a, int arg0)->mfem::FaceElementTransformations * { return a->GetFaceElementTransformations(arg0); });
    t.method("GetFaceElementTransformations", [](mfem::Mesh* a, int arg0, int arg1)->mfem::FaceElementTransformations * { return a->GetFaceElementTransformations(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for mfem::FaceElementTransformations * mfem::Mesh::GetInteriorFaceTransformations(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::FaceElementTransformations * mfem::Mesh::GetInteriorFaceTransformations(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1245:32
    t.method("GetInteriorFaceTransformations", [](mfem::Mesh& a, int arg0)->mfem::FaceElementTransformations * { return a.GetInteriorFaceTransformations(arg0); });
    t.method("GetInteriorFaceTransformations", [](mfem::Mesh* a, int arg0)->mfem::FaceElementTransformations * { return a->GetInteriorFaceTransformations(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::FaceElementTransformations * mfem::Mesh::GetBdrFaceTransformations(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::FaceElementTransformations * mfem::Mesh::GetBdrFaceTransformations(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1251:32
    t.method("GetBdrFaceTransformations", [](mfem::Mesh& a, int arg0)->mfem::FaceElementTransformations * { return a.GetBdrFaceTransformations(arg0); });
    t.method("GetBdrFaceTransformations", [](mfem::Mesh* a, int arg0)->mfem::FaceElementTransformations * { return a->GetBdrFaceTransformations(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetBdrFace(int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetBdrFace(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1254:8
    t.method("GetBdrFace", [](mfem::Mesh const& a, int arg0)->int { return a.GetBdrFace(arg0); });
    t.method("GetBdrFace", [](mfem::Mesh const* a, int arg0)->int { return a->GetBdrFace(arg0); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::FaceIsInterior(int) (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::FaceIsInterior(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1257:9
    t.method("FaceIsInterior", [](mfem::Mesh const& a, int arg0)->bool { return a.FaceIsInterior(arg0); });
    t.method("FaceIsInterior", [](mfem::Mesh const* a, int arg0)->bool { return a->FaceIsInterior(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Mesh::FaceInformation mfem::Mesh::GetFaceInformation(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Mesh::FaceInformation mfem::Mesh::GetFaceInformation(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1425:20
    t.method("GetFaceInformation", [](mfem::Mesh const& a, int arg0)->mfem::Mesh::FaceInformation { return a.GetFaceInformation(arg0); });
    t.method("GetFaceInformation", [](mfem::Mesh const* a, int arg0)->mfem::Mesh::FaceInformation { return a->GetFaceInformation(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetFaceElements(int, int *, int *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetFaceElements(int, int *, int *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1427:9
    t.method("GetFaceElements", [](mfem::Mesh const& a, int arg0, int * arg1, int * arg2)->void { a.GetFaceElements(arg0, arg1, arg2); });
    t.method("GetFaceElements", [](mfem::Mesh const* a, int arg0, int * arg1, int * arg2)->void { a->GetFaceElements(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetFaceInfos(int, int *, int *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetFaceInfos(int, int *, int *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1428:9
    t.method("GetFaceInfos", [](mfem::Mesh const& a, int arg0, int * arg1, int * arg2)->void { a.GetFaceInfos(arg0, arg1, arg2); });
    t.method("GetFaceInfos", [](mfem::Mesh const* a, int arg0, int * arg1, int * arg2)->void { a->GetFaceInfos(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetFaceInfos(int, int *, int *, int *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetFaceInfos(int, int *, int *, int *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1429:9
    t.method("GetFaceInfos", [](mfem::Mesh const& a, int arg0, int * arg1, int * arg2, int * arg3)->void { a.GetFaceInfos(arg0, arg1, arg2, arg3); });
    t.method("GetFaceInfos", [](mfem::Mesh const* a, int arg0, int * arg1, int * arg2, int * arg3)->void { a->GetFaceInfos(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for mfem::Geometry::Type mfem::Mesh::GetFaceGeometryType(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Geometry::Type mfem::Mesh::GetFaceGeometryType(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1431:19
    t.method("GetFaceGeometryType", [](mfem::Mesh const& a, int arg0)->mfem::Geometry::Type { return a.GetFaceGeometryType(arg0); });
    t.method("GetFaceGeometryType", [](mfem::Mesh const* a, int arg0)->mfem::Geometry::Type { return a->GetFaceGeometryType(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::Element::Type mfem::Mesh::GetFaceElementType(int) (" __HERE__ ")");
    // signature to use in the veto list: mfem::Element::Type mfem::Mesh::GetFaceElementType(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1432:19
    t.method("GetFaceElementType", [](mfem::Mesh const& a, int arg0)->mfem::Element::Type { return a.GetFaceElementType(arg0); });
    t.method("GetFaceElementType", [](mfem::Mesh const* a, int arg0)->mfem::Element::Type { return a->GetFaceElementType(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::CheckElementOrientation(bool) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::CheckElementOrientation(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1448:8
    t.method("CheckElementOrientation", [](mfem::Mesh& a)->int { return a.CheckElementOrientation(); });
    t.method("CheckElementOrientation", [](mfem::Mesh& a, bool arg0)->int { return a.CheckElementOrientation(arg0); });
    t.method("CheckElementOrientation", [](mfem::Mesh* a)->int { return a->CheckElementOrientation(); });
    t.method("CheckElementOrientation", [](mfem::Mesh* a, bool arg0)->int { return a->CheckElementOrientation(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::CheckBdrElementOrientation(bool) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::CheckBdrElementOrientation(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1452:8
    t.method("CheckBdrElementOrientation", [](mfem::Mesh& a)->int { return a.CheckBdrElementOrientation(); });
    t.method("CheckBdrElementOrientation", [](mfem::Mesh& a, bool arg0)->int { return a.CheckBdrElementOrientation(arg0); });
    t.method("CheckBdrElementOrientation", [](mfem::Mesh* a)->int { return a->CheckBdrElementOrientation(); });
    t.method("CheckBdrElementOrientation", [](mfem::Mesh* a, bool arg0)->int { return a->CheckBdrElementOrientation(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetAttribute(int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetAttribute(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1455:8
    t.method("GetAttribute", [](mfem::Mesh const& a, int arg0)->int { return a.GetAttribute(arg0); });
    t.method("GetAttribute", [](mfem::Mesh const* a, int arg0)->int { return a->GetAttribute(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SetAttribute(int, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SetAttribute(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1458:9
    t.method("SetAttribute", [](mfem::Mesh& a, int arg0, int arg1)->void { a.SetAttribute(arg0, arg1); });
    t.method("SetAttribute", [](mfem::Mesh* a, int arg0, int arg1)->void { a->SetAttribute(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::GetBdrAttribute(int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::GetBdrAttribute(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1461:8
    t.method("GetBdrAttribute", [](mfem::Mesh const& a, int arg0)->int { return a.GetBdrAttribute(arg0); });
    t.method("GetBdrAttribute", [](mfem::Mesh const* a, int arg0)->int { return a->GetBdrAttribute(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SetBdrAttribute(int, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SetBdrAttribute(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1464:9
    t.method("SetBdrAttribute", [](mfem::Mesh& a, int arg0, int arg1)->void { a.SetBdrAttribute(arg0, arg1); });
    t.method("SetBdrAttribute", [](mfem::Mesh* a, int arg0, int arg1)->void { a->SetBdrAttribute(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for const mfem::Table & mfem::Mesh::ElementToElementTable() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Table & mfem::Mesh::ElementToElementTable()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1466:17
    t.method("ElementToElementTable", [](mfem::Mesh& a)->const mfem::Table & { return a.ElementToElementTable(); });
    t.method("ElementToElementTable", [](mfem::Mesh* a)->const mfem::Table & { return a->ElementToElementTable(); });

    DEBUG_MSG("Adding wrapper for const mfem::Table & mfem::Mesh::ElementToFaceTable() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Table & mfem::Mesh::ElementToFaceTable()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1468:17
    t.method("ElementToFaceTable", [](mfem::Mesh const& a)->const mfem::Table & { return a.ElementToFaceTable(); });
    t.method("ElementToFaceTable", [](mfem::Mesh const* a)->const mfem::Table & { return a->ElementToFaceTable(); });

    DEBUG_MSG("Adding wrapper for const mfem::Table & mfem::Mesh::ElementToEdgeTable() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Table & mfem::Mesh::ElementToEdgeTable()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1470:17
    t.method("ElementToEdgeTable", [](mfem::Mesh const& a)->const mfem::Table & { return a.ElementToEdgeTable(); });
    t.method("ElementToEdgeTable", [](mfem::Mesh const* a)->const mfem::Table & { return a->ElementToEdgeTable(); });

    DEBUG_MSG("Adding wrapper for mfem::Table * mfem::Mesh::GetVertexToElementTable() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Table * mfem::Mesh::GetVertexToElementTable()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1473:11
    t.method("GetVertexToElementTable", [](mfem::Mesh& a)->mfem::Table * { return a.GetVertexToElementTable(); });
    t.method("GetVertexToElementTable", [](mfem::Mesh* a)->mfem::Table * { return a->GetVertexToElementTable(); });

    DEBUG_MSG("Adding wrapper for mfem::Table * mfem::Mesh::GetFaceToElementTable() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Table * mfem::Mesh::GetFaceToElementTable()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1478:11
    t.method("GetFaceToElementTable", [](mfem::Mesh const& a)->mfem::Table * { return a.GetFaceToElementTable(); });
    t.method("GetFaceToElementTable", [](mfem::Mesh const* a)->mfem::Table * { return a->GetFaceToElementTable(); });

    DEBUG_MSG("Adding wrapper for int * mfem::Mesh::CartesianPartitioning(int[]) (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::Mesh::CartesianPartitioning(int[])
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1490:9
    t.method("CartesianPartitioning", [](mfem::Mesh& a, int arg0[])->int * { return a.CartesianPartitioning(arg0); });
    t.method("CartesianPartitioning", [](mfem::Mesh* a, int arg0[])->int * { return a->CartesianPartitioning(arg0); });

    DEBUG_MSG("Adding wrapper for int * mfem::Mesh::GeneratePartitioning(int, int) (" __HERE__ ")");
    // signature to use in the veto list: int * mfem::Mesh::GeneratePartitioning(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1491:9
    t.method("GeneratePartitioning", [](mfem::Mesh& a, int arg0)->int * { return a.GeneratePartitioning(arg0); });
    t.method("GeneratePartitioning", [](mfem::Mesh& a, int arg0, int arg1)->int * { return a.GeneratePartitioning(arg0, arg1); });
    t.method("GeneratePartitioning", [](mfem::Mesh* a, int arg0)->int * { return a->GeneratePartitioning(arg0); });
    t.method("GeneratePartitioning", [](mfem::Mesh* a, int arg0, int arg1)->int * { return a->GeneratePartitioning(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::CheckPartitioning(int *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::CheckPartitioning(int *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1492:9
    t.method("CheckPartitioning", [](mfem::Mesh& a, int * arg0)->void { a.CheckPartitioning(arg0); });
    t.method("CheckPartitioning", [](mfem::Mesh* a, int * arg0)->void { a->CheckPartitioning(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::CheckDisplacements(const mfem::Vector &, double &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::CheckDisplacements(const mfem::Vector &, double &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1494:9
    t.method("CheckDisplacements", [](mfem::Mesh& a, const mfem::Vector & arg0, double & arg1)->void { a.CheckDisplacements(arg0, arg1); });
    t.method("CheckDisplacements", [](mfem::Mesh* a, const mfem::Vector & arg0, double & arg1)->void { a->CheckDisplacements(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::MoveVertices(const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::MoveVertices(const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1498:9
    t.method("MoveVertices", [](mfem::Mesh& a, const mfem::Vector & arg0)->void { a.MoveVertices(arg0); });
    t.method("MoveVertices", [](mfem::Mesh* a, const mfem::Vector & arg0)->void { a->MoveVertices(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetVertices(mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetVertices(mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1499:9
    t.method("GetVertices", [](mfem::Mesh const& a, mfem::Vector & arg0)->void { a.GetVertices(arg0); });
    t.method("GetVertices", [](mfem::Mesh const* a, mfem::Vector & arg0)->void { a->GetVertices(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SetVertices(const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SetVertices(const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1500:9
    t.method("SetVertices", [](mfem::Mesh& a, const mfem::Vector & arg0)->void { a.SetVertices(arg0); });
    t.method("SetVertices", [](mfem::Mesh* a, const mfem::Vector & arg0)->void { a->SetVertices(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetNode(int, double *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetNode(int, double *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1505:9
    t.method("GetNode", [](mfem::Mesh const& a, int arg0, double * arg1)->void { a.GetNode(arg0, arg1); });
    t.method("GetNode", [](mfem::Mesh const* a, int arg0, double * arg1)->void { a->GetNode(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SetNode(int, const double *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SetNode(int, const double *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1506:9
    t.method("SetNode", [](mfem::Mesh& a, int arg0, const double * arg1)->void { a.SetNode(arg0, arg1); });
    t.method("SetNode", [](mfem::Mesh* a, int arg0, const double * arg1)->void { a->SetNode(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::MoveNodes(const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::MoveNodes(const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1511:9
    t.method("MoveNodes", [](mfem::Mesh& a, const mfem::Vector & arg0)->void { a.MoveNodes(arg0); });
    t.method("MoveNodes", [](mfem::Mesh* a, const mfem::Vector & arg0)->void { a->MoveNodes(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetNodes(mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetNodes(mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1512:9
    t.method("GetNodes", [](mfem::Mesh const& a, mfem::Vector & arg0)->void { a.GetNodes(arg0); });
    t.method("GetNodes", [](mfem::Mesh const* a, mfem::Vector & arg0)->void { a->GetNodes(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SetNodes(const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SetNodes(const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1513:9
    t.method("SetNodes", [](mfem::Mesh& a, const mfem::Vector & arg0)->void { a.SetNodes(arg0); });
    t.method("SetNodes", [](mfem::Mesh* a, const mfem::Vector & arg0)->void { a->SetNodes(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::GridFunction * mfem::Mesh::GetNodes() (" __HERE__ ")");
    // signature to use in the veto list: mfem::GridFunction * mfem::Mesh::GetNodes()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1516:18
    t.method("GetNodes", [](mfem::Mesh& a)->mfem::GridFunction * { return a.GetNodes(); });
    t.method("GetNodes", [](mfem::Mesh* a)->mfem::GridFunction * { return a->GetNodes(); });

    DEBUG_MSG("Adding wrapper for const mfem::GridFunction * mfem::Mesh::GetNodes() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::GridFunction * mfem::Mesh::GetNodes()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1517:24
    t.method("GetNodes", [](mfem::Mesh const& a)->const mfem::GridFunction * { return a.GetNodes(); });
    t.method("GetNodes", [](mfem::Mesh const* a)->const mfem::GridFunction * { return a->GetNodes(); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::OwnsNodes() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::OwnsNodes()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1519:9
    t.method("OwnsNodes", [](mfem::Mesh const& a)->bool { return a.OwnsNodes(); });
    t.method("OwnsNodes", [](mfem::Mesh const* a)->bool { return a->OwnsNodes(); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SetNodesOwner(bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SetNodesOwner(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1521:9
    t.method("SetNodesOwner", [](mfem::Mesh& a, bool arg0)->void { a.SetNodesOwner(arg0); });
    t.method("SetNodesOwner", [](mfem::Mesh* a, bool arg0)->void { a->SetNodesOwner(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::NewNodes(mfem::GridFunction &, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::NewNodes(mfem::GridFunction &, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1523:9
    t.method("NewNodes", [](mfem::Mesh& a, mfem::GridFunction & arg0)->void { a.NewNodes(arg0); });
    t.method("NewNodes", [](mfem::Mesh& a, mfem::GridFunction & arg0, bool arg1)->void { a.NewNodes(arg0, arg1); });
    t.method("NewNodes", [](mfem::Mesh* a, mfem::GridFunction & arg0)->void { a->NewNodes(arg0); });
    t.method("NewNodes", [](mfem::Mesh* a, mfem::GridFunction & arg0, bool arg1)->void { a->NewNodes(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SwapNodes(mfem::GridFunction *&, int &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SwapNodes(mfem::GridFunction *&, int &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1526:9
    t.method("SwapNodes", [](mfem::Mesh& a, mfem::GridFunction *& arg0, int & arg1)->void { a.SwapNodes(arg0, arg1); });
    t.method("SwapNodes", [](mfem::Mesh* a, mfem::GridFunction *& arg0, int & arg1)->void { a->SwapNodes(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetNodes(mfem::GridFunction &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetNodes(mfem::GridFunction &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1529:9
    t.method("GetNodes", [](mfem::Mesh const& a, mfem::GridFunction & arg0)->void { a.GetNodes(arg0); });
    t.method("GetNodes", [](mfem::Mesh const* a, mfem::GridFunction & arg0)->void { a->GetNodes(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SetNodalFESpace(mfem::FiniteElementSpace *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SetNodalFESpace(mfem::FiniteElementSpace *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1533:9
    t.method("SetNodalFESpace", [](mfem::Mesh& a, mfem::FiniteElementSpace * arg0)->void { a.SetNodalFESpace(arg0); });
    t.method("SetNodalFESpace", [](mfem::Mesh* a, mfem::FiniteElementSpace * arg0)->void { a->SetNodalFESpace(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SetNodalGridFunction(mfem::GridFunction *, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SetNodalGridFunction(mfem::GridFunction *, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1537:9
    t.method("SetNodalGridFunction", [](mfem::Mesh& a, mfem::GridFunction * arg0)->void { a.SetNodalGridFunction(arg0); });
    t.method("SetNodalGridFunction", [](mfem::Mesh& a, mfem::GridFunction * arg0, bool arg1)->void { a.SetNodalGridFunction(arg0, arg1); });
    t.method("SetNodalGridFunction", [](mfem::Mesh* a, mfem::GridFunction * arg0)->void { a->SetNodalGridFunction(arg0); });
    t.method("SetNodalGridFunction", [](mfem::Mesh* a, mfem::GridFunction * arg0, bool arg1)->void { a->SetNodalGridFunction(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for const mfem::FiniteElementSpace * mfem::Mesh::GetNodalFESpace() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::FiniteElementSpace * mfem::Mesh::GetNodalFESpace()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1540:30
    t.method("GetNodalFESpace", [](mfem::Mesh const& a)->const mfem::FiniteElementSpace * { return a.GetNodalFESpace(); });
    t.method("GetNodalFESpace", [](mfem::Mesh const* a)->const mfem::FiniteElementSpace * { return a->GetNodalFESpace(); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::EnsureNodes() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::EnsureNodes()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1544:9
    t.method("EnsureNodes", [](mfem::Mesh& a)->void { a.EnsureNodes(); });
    t.method("EnsureNodes", [](mfem::Mesh* a)->void { a->EnsureNodes(); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::SetCurvature(int, bool, int, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::SetCurvature(int, bool, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1550:17
    t.method("SetCurvature", [](mfem::Mesh& a, int arg0)->void { a.SetCurvature(arg0); });
    t.method("SetCurvature", [](mfem::Mesh& a, int arg0, bool arg1)->void { a.SetCurvature(arg0, arg1); });
    t.method("SetCurvature", [](mfem::Mesh& a, int arg0, bool arg1, int arg2)->void { a.SetCurvature(arg0, arg1, arg2); });
    t.method("SetCurvature", [](mfem::Mesh& a, int arg0, bool arg1, int arg2, int arg3)->void { a.SetCurvature(arg0, arg1, arg2, arg3); });
    t.method("SetCurvature", [](mfem::Mesh* a, int arg0)->void { a->SetCurvature(arg0); });
    t.method("SetCurvature", [](mfem::Mesh* a, int arg0, bool arg1)->void { a->SetCurvature(arg0, arg1); });
    t.method("SetCurvature", [](mfem::Mesh* a, int arg0, bool arg1, int arg2)->void { a->SetCurvature(arg0, arg1, arg2); });
    t.method("SetCurvature", [](mfem::Mesh* a, int arg0, bool arg1, int arg2, int arg3)->void { a->SetCurvature(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::UniformRefinement(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::UniformRefinement(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1564:9
    t.method("UniformRefinement", [](mfem::Mesh& a)->void { a.UniformRefinement(); });
    t.method("UniformRefinement", [](mfem::Mesh& a, int arg0)->void { a.UniformRefinement(arg0); });
    t.method("UniformRefinement", [](mfem::Mesh* a)->void { a->UniformRefinement(); });
    t.method("UniformRefinement", [](mfem::Mesh* a, int arg0)->void { a->UniformRefinement(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GeneralRefinement(const mfem::Array<mfem::Refinement> &, int, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GeneralRefinement(const mfem::Array<mfem::Refinement> &, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1574:9
    t.method("GeneralRefinement", [](mfem::Mesh& a, const mfem::Array<mfem::Refinement> & arg0)->void { a.GeneralRefinement(arg0); });
    t.method("GeneralRefinement", [](mfem::Mesh& a, const mfem::Array<mfem::Refinement> & arg0, int arg1)->void { a.GeneralRefinement(arg0, arg1); });
    t.method("GeneralRefinement", [](mfem::Mesh& a, const mfem::Array<mfem::Refinement> & arg0, int arg1, int arg2)->void { a.GeneralRefinement(arg0, arg1, arg2); });
    t.method("GeneralRefinement", [](mfem::Mesh* a, const mfem::Array<mfem::Refinement> & arg0)->void { a->GeneralRefinement(arg0); });
    t.method("GeneralRefinement", [](mfem::Mesh* a, const mfem::Array<mfem::Refinement> & arg0, int arg1)->void { a->GeneralRefinement(arg0, arg1); });
    t.method("GeneralRefinement", [](mfem::Mesh* a, const mfem::Array<mfem::Refinement> & arg0, int arg1, int arg2)->void { a->GeneralRefinement(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GeneralRefinement(const mfem::Array<int> &, int, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GeneralRefinement(const mfem::Array<int> &, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1579:9
    t.method("GeneralRefinement", [](mfem::Mesh& a, const mfem::Array<int> & arg0)->void { a.GeneralRefinement(arg0); });
    t.method("GeneralRefinement", [](mfem::Mesh& a, const mfem::Array<int> & arg0, int arg1)->void { a.GeneralRefinement(arg0, arg1); });
    t.method("GeneralRefinement", [](mfem::Mesh& a, const mfem::Array<int> & arg0, int arg1, int arg2)->void { a.GeneralRefinement(arg0, arg1, arg2); });
    t.method("GeneralRefinement", [](mfem::Mesh* a, const mfem::Array<int> & arg0)->void { a->GeneralRefinement(arg0); });
    t.method("GeneralRefinement", [](mfem::Mesh* a, const mfem::Array<int> & arg0, int arg1)->void { a->GeneralRefinement(arg0, arg1); });
    t.method("GeneralRefinement", [](mfem::Mesh* a, const mfem::Array<int> & arg0, int arg1, int arg2)->void { a->GeneralRefinement(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::RandomRefinement(double, bool, int, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::RandomRefinement(double, bool, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1583:9
    t.method("RandomRefinement", [](mfem::Mesh& a, double arg0)->void { a.RandomRefinement(arg0); });
    t.method("RandomRefinement", [](mfem::Mesh& a, double arg0, bool arg1)->void { a.RandomRefinement(arg0, arg1); });
    t.method("RandomRefinement", [](mfem::Mesh& a, double arg0, bool arg1, int arg2)->void { a.RandomRefinement(arg0, arg1, arg2); });
    t.method("RandomRefinement", [](mfem::Mesh& a, double arg0, bool arg1, int arg2, int arg3)->void { a.RandomRefinement(arg0, arg1, arg2, arg3); });
    t.method("RandomRefinement", [](mfem::Mesh* a, double arg0)->void { a->RandomRefinement(arg0); });
    t.method("RandomRefinement", [](mfem::Mesh* a, double arg0, bool arg1)->void { a->RandomRefinement(arg0, arg1); });
    t.method("RandomRefinement", [](mfem::Mesh* a, double arg0, bool arg1, int arg2)->void { a->RandomRefinement(arg0, arg1, arg2); });
    t.method("RandomRefinement", [](mfem::Mesh* a, double arg0, bool arg1, int arg2, int arg3)->void { a->RandomRefinement(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::RefineAtVertex(const mfem::Vertex &, double, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::RefineAtVertex(const mfem::Vertex &, double, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1587:9
    t.method("RefineAtVertex", [](mfem::Mesh& a, const mfem::Vertex & arg0)->void { a.RefineAtVertex(arg0); });
    t.method("RefineAtVertex", [](mfem::Mesh& a, const mfem::Vertex & arg0, double arg1)->void { a.RefineAtVertex(arg0, arg1); });
    t.method("RefineAtVertex", [](mfem::Mesh& a, const mfem::Vertex & arg0, double arg1, int arg2)->void { a.RefineAtVertex(arg0, arg1, arg2); });
    t.method("RefineAtVertex", [](mfem::Mesh* a, const mfem::Vertex & arg0)->void { a->RefineAtVertex(arg0); });
    t.method("RefineAtVertex", [](mfem::Mesh* a, const mfem::Vertex & arg0, double arg1)->void { a->RefineAtVertex(arg0, arg1); });
    t.method("RefineAtVertex", [](mfem::Mesh* a, const mfem::Vertex & arg0, double arg1, int arg2)->void { a->RefineAtVertex(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::RefineByError(const mfem::Array<double> &, double, int, int) (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::RefineByError(const mfem::Array<double> &, double, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1592:9
    t.method("RefineByError", [](mfem::Mesh& a, const mfem::Array<double> & arg0, double arg1)->bool { return a.RefineByError(arg0, arg1); });
    t.method("RefineByError", [](mfem::Mesh& a, const mfem::Array<double> & arg0, double arg1, int arg2)->bool { return a.RefineByError(arg0, arg1, arg2); });
    t.method("RefineByError", [](mfem::Mesh& a, const mfem::Array<double> & arg0, double arg1, int arg2, int arg3)->bool { return a.RefineByError(arg0, arg1, arg2, arg3); });
    t.method("RefineByError", [](mfem::Mesh* a, const mfem::Array<double> & arg0, double arg1)->bool { return a->RefineByError(arg0, arg1); });
    t.method("RefineByError", [](mfem::Mesh* a, const mfem::Array<double> & arg0, double arg1, int arg2)->bool { return a->RefineByError(arg0, arg1, arg2); });
    t.method("RefineByError", [](mfem::Mesh* a, const mfem::Array<double> & arg0, double arg1, int arg2, int arg3)->bool { return a->RefineByError(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::RefineByError(const mfem::Vector &, double, int, int) (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::RefineByError(const mfem::Vector &, double, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1597:9
    t.method("RefineByError", [](mfem::Mesh& a, const mfem::Vector & arg0, double arg1)->bool { return a.RefineByError(arg0, arg1); });
    t.method("RefineByError", [](mfem::Mesh& a, const mfem::Vector & arg0, double arg1, int arg2)->bool { return a.RefineByError(arg0, arg1, arg2); });
    t.method("RefineByError", [](mfem::Mesh& a, const mfem::Vector & arg0, double arg1, int arg2, int arg3)->bool { return a.RefineByError(arg0, arg1, arg2, arg3); });
    t.method("RefineByError", [](mfem::Mesh* a, const mfem::Vector & arg0, double arg1)->bool { return a->RefineByError(arg0, arg1); });
    t.method("RefineByError", [](mfem::Mesh* a, const mfem::Vector & arg0, double arg1, int arg2)->bool { return a->RefineByError(arg0, arg1, arg2); });
    t.method("RefineByError", [](mfem::Mesh* a, const mfem::Vector & arg0, double arg1, int arg2, int arg3)->bool { return a->RefineByError(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::DerefineByError(mfem::Array<double> &, double, int, int) (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::DerefineByError(mfem::Array<double> &, double, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1605:9
    t.method("DerefineByError", [](mfem::Mesh& a, mfem::Array<double> & arg0, double arg1)->bool { return a.DerefineByError(arg0, arg1); });
    t.method("DerefineByError", [](mfem::Mesh& a, mfem::Array<double> & arg0, double arg1, int arg2)->bool { return a.DerefineByError(arg0, arg1, arg2); });
    t.method("DerefineByError", [](mfem::Mesh& a, mfem::Array<double> & arg0, double arg1, int arg2, int arg3)->bool { return a.DerefineByError(arg0, arg1, arg2, arg3); });
    t.method("DerefineByError", [](mfem::Mesh* a, mfem::Array<double> & arg0, double arg1)->bool { return a->DerefineByError(arg0, arg1); });
    t.method("DerefineByError", [](mfem::Mesh* a, mfem::Array<double> & arg0, double arg1, int arg2)->bool { return a->DerefineByError(arg0, arg1, arg2); });
    t.method("DerefineByError", [](mfem::Mesh* a, mfem::Array<double> & arg0, double arg1, int arg2, int arg3)->bool { return a->DerefineByError(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::DerefineByError(const mfem::Vector &, double, int, int) (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::DerefineByError(const mfem::Vector &, double, int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1609:9
    t.method("DerefineByError", [](mfem::Mesh& a, const mfem::Vector & arg0, double arg1)->bool { return a.DerefineByError(arg0, arg1); });
    t.method("DerefineByError", [](mfem::Mesh& a, const mfem::Vector & arg0, double arg1, int arg2)->bool { return a.DerefineByError(arg0, arg1, arg2); });
    t.method("DerefineByError", [](mfem::Mesh& a, const mfem::Vector & arg0, double arg1, int arg2, int arg3)->bool { return a.DerefineByError(arg0, arg1, arg2, arg3); });
    t.method("DerefineByError", [](mfem::Mesh* a, const mfem::Vector & arg0, double arg1)->bool { return a->DerefineByError(arg0, arg1); });
    t.method("DerefineByError", [](mfem::Mesh* a, const mfem::Vector & arg0, double arg1, int arg2)->bool { return a->DerefineByError(arg0, arg1, arg2); });
    t.method("DerefineByError", [](mfem::Mesh* a, const mfem::Vector & arg0, double arg1, int arg2, int arg3)->bool { return a->DerefineByError(arg0, arg1, arg2, arg3); });

    // DEBUG_MSG("Adding wrapper for void mfem::Mesh::KnotInsert(mfem::Array<mfem::KnotVector *> &) (" __HERE__ ")");
    // // signature to use in the veto list: void mfem::Mesh::KnotInsert(mfem::Array<mfem::KnotVector *> &)
    // // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1613:9
    // t.method("KnotInsert", [](mfem::Mesh& a, mfem::Array<mfem::KnotVector *> & arg0)->void { a.KnotInsert(arg0); });
    // t.method("KnotInsert", [](mfem::Mesh* a, mfem::Array<mfem::KnotVector *> & arg0)->void { a->KnotInsert(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::KnotInsert(mfem::Array<mfem::Vector *> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::KnotInsert(mfem::Array<mfem::Vector *> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1614:9
    t.method("KnotInsert", [](mfem::Mesh& a, mfem::Array<mfem::Vector *> & arg0)->void { a.KnotInsert(arg0); });
    t.method("KnotInsert", [](mfem::Mesh* a, mfem::Array<mfem::Vector *> & arg0)->void { a->KnotInsert(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::DegreeElevate(int, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::DegreeElevate(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1617:9
    t.method("DegreeElevate", [](mfem::Mesh& a, int arg0)->void { a.DegreeElevate(arg0); });
    t.method("DegreeElevate", [](mfem::Mesh& a, int arg0, int arg1)->void { a.DegreeElevate(arg0, arg1); });
    t.method("DegreeElevate", [](mfem::Mesh* a, int arg0)->void { a->DegreeElevate(arg0); });
    t.method("DegreeElevate", [](mfem::Mesh* a, int arg0, int arg1)->void { a->DegreeElevate(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::EnsureNCMesh(bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::EnsureNCMesh(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1623:9
    t.method("EnsureNCMesh", [](mfem::Mesh& a)->void { a.EnsureNCMesh(); });
    t.method("EnsureNCMesh", [](mfem::Mesh& a, bool arg0)->void { a.EnsureNCMesh(arg0); });
    t.method("EnsureNCMesh", [](mfem::Mesh* a)->void { a->EnsureNCMesh(); });
    t.method("EnsureNCMesh", [](mfem::Mesh* a, bool arg0)->void { a->EnsureNCMesh(arg0); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::Conforming() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::Conforming()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1625:9
    t.method("Conforming", [](mfem::Mesh const& a)->bool { return a.Conforming(); });
    t.method("Conforming", [](mfem::Mesh const* a)->bool { return a->Conforming(); });

    DEBUG_MSG("Adding wrapper for bool mfem::Mesh::Nonconforming() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::Mesh::Nonconforming()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1626:9
    t.method("Nonconforming", [](mfem::Mesh const& a)->bool { return a.Nonconforming(); });
    t.method("Nonconforming", [](mfem::Mesh const* a)->bool { return a->Nonconforming(); });

    DEBUG_MSG("Adding wrapper for const mfem::CoarseFineTransformations & mfem::Mesh::GetRefinementTransforms() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::CoarseFineTransformations & mfem::Mesh::GetRefinementTransforms()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1630:37
    t.method("GetRefinementTransforms", [](mfem::Mesh& a)->const mfem::CoarseFineTransformations & { return a.GetRefinementTransforms(); });
    t.method("GetRefinementTransforms", [](mfem::Mesh* a)->const mfem::CoarseFineTransformations & { return a->GetRefinementTransforms(); });

    DEBUG_MSG("Adding wrapper for mfem::Mesh::Operation mfem::Mesh::GetLastOperation() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Mesh::Operation mfem::Mesh::GetLastOperation()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1633:14
    t.method("GetLastOperation", [](mfem::Mesh const& a)->mfem::Mesh::Operation { return a.GetLastOperation(); });
    t.method("GetLastOperation", [](mfem::Mesh const* a)->mfem::Mesh::Operation { return a->GetLastOperation(); });

    DEBUG_MSG("Adding wrapper for long mfem::Mesh::GetSequence() (" __HERE__ ")");
    // signature to use in the veto list: long mfem::Mesh::GetSequence()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1639:9
    t.method("GetSequence", [](mfem::Mesh const& a)->long { return a.GetSequence(); });
    t.method("GetSequence", [](mfem::Mesh const* a)->long { return a->GetSequence(); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Save(const char *, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::Save(const char *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1650:17
    t.method("Save", [](mfem::Mesh const& a, const char * arg0)->void { a.Save(arg0); });
    t.method("Save", [](mfem::Mesh const& a, const char * arg0, int arg1)->void { a.Save(arg0, arg1); });
    t.method("Save", [](mfem::Mesh const* a, const char * arg0)->void { a->Save(arg0); });
    t.method("Save", [](mfem::Mesh const* a, const char * arg0, int arg1)->void { a->Save(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::PrintVTU(std::string, mfem::VTKFormat, bool, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::PrintVTU(std::string, mfem::VTKFormat, bool, int, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1676:17
    t.method("PrintVTU", [](mfem::Mesh& a, std::string arg0)->void { a.PrintVTU(arg0); });
    t.method("PrintVTU", [](mfem::Mesh& a, std::string arg0, mfem::VTKFormat arg1)->void { a.PrintVTU(arg0, arg1); });
    t.method("PrintVTU", [](mfem::Mesh& a, std::string arg0, mfem::VTKFormat arg1, bool arg2)->void { a.PrintVTU(arg0, arg1, arg2); });
    t.method("PrintVTU", [](mfem::Mesh& a, std::string arg0, mfem::VTKFormat arg1, bool arg2, int arg3)->void { a.PrintVTU(arg0, arg1, arg2, arg3); });
    t.method("PrintVTU", [](mfem::Mesh& a, std::string arg0, mfem::VTKFormat arg1, bool arg2, int arg3, bool arg4)->void { a.PrintVTU(arg0, arg1, arg2, arg3, arg4); });
    t.method("PrintVTU", [](mfem::Mesh* a, std::string arg0)->void { a->PrintVTU(arg0); });
    t.method("PrintVTU", [](mfem::Mesh* a, std::string arg0, mfem::VTKFormat arg1)->void { a->PrintVTU(arg0, arg1); });
    t.method("PrintVTU", [](mfem::Mesh* a, std::string arg0, mfem::VTKFormat arg1, bool arg2)->void { a->PrintVTU(arg0, arg1, arg2); });
    t.method("PrintVTU", [](mfem::Mesh* a, std::string arg0, mfem::VTKFormat arg1, bool arg2, int arg3)->void { a->PrintVTU(arg0, arg1, arg2, arg3); });
    t.method("PrintVTU", [](mfem::Mesh* a, std::string arg0, mfem::VTKFormat arg1, bool arg2, int arg3, bool arg4)->void { a->PrintVTU(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::PrintBdrVTU(std::string, mfem::VTKFormat, bool, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::PrintBdrVTU(std::string, mfem::VTKFormat, bool, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1683:9
    t.method("PrintBdrVTU", [](mfem::Mesh& a, std::string arg0)->void { a.PrintBdrVTU(arg0); });
    t.method("PrintBdrVTU", [](mfem::Mesh& a, std::string arg0, mfem::VTKFormat arg1)->void { a.PrintBdrVTU(arg0, arg1); });
    t.method("PrintBdrVTU", [](mfem::Mesh& a, std::string arg0, mfem::VTKFormat arg1, bool arg2)->void { a.PrintBdrVTU(arg0, arg1, arg2); });
    t.method("PrintBdrVTU", [](mfem::Mesh& a, std::string arg0, mfem::VTKFormat arg1, bool arg2, int arg3)->void { a.PrintBdrVTU(arg0, arg1, arg2, arg3); });
    t.method("PrintBdrVTU", [](mfem::Mesh* a, std::string arg0)->void { a->PrintBdrVTU(arg0); });
    t.method("PrintBdrVTU", [](mfem::Mesh* a, std::string arg0, mfem::VTKFormat arg1)->void { a->PrintBdrVTU(arg0, arg1); });
    t.method("PrintBdrVTU", [](mfem::Mesh* a, std::string arg0, mfem::VTKFormat arg1, bool arg2)->void { a->PrintBdrVTU(arg0, arg1, arg2); });
    t.method("PrintBdrVTU", [](mfem::Mesh* a, std::string arg0, mfem::VTKFormat arg1, bool arg2, int arg3)->void { a->PrintBdrVTU(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetElementColoring(mfem::Array<int> &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetElementColoring(mfem::Array<int> &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1688:9
    t.method("GetElementColoring", [](mfem::Mesh& a, mfem::Array<int> & arg0)->void { a.GetElementColoring(arg0); });
    t.method("GetElementColoring", [](mfem::Mesh& a, mfem::Array<int> & arg0, int arg1)->void { a.GetElementColoring(arg0, arg1); });
    t.method("GetElementColoring", [](mfem::Mesh* a, mfem::Array<int> & arg0)->void { a->GetElementColoring(arg0); });
    t.method("GetElementColoring", [](mfem::Mesh* a, mfem::Array<int> & arg0, int arg1)->void { a->GetElementColoring(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::ScaleSubdomains(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::ScaleSubdomains(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1708:9
    t.method("ScaleSubdomains", [](mfem::Mesh& a, double arg0)->void { a.ScaleSubdomains(arg0); });
    t.method("ScaleSubdomains", [](mfem::Mesh* a, double arg0)->void { a->ScaleSubdomains(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::ScaleElements(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::ScaleElements(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1709:9
    t.method("ScaleElements", [](mfem::Mesh& a, double arg0)->void { a.ScaleElements(arg0); });
    t.method("ScaleElements", [](mfem::Mesh* a, double arg0)->void { a->ScaleElements(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Transform(mfem::VectorCoefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::Transform(mfem::VectorCoefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1712:9
    t.method("Transform", [](mfem::Mesh& a, mfem::VectorCoefficient & arg0)->void { a.Transform(arg0); });
    t.method("Transform", [](mfem::Mesh* a, mfem::VectorCoefficient & arg0)->void { a->Transform(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::RemoveUnusedVertices() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::RemoveUnusedVertices()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1715:9
    t.method("RemoveUnusedVertices", [](mfem::Mesh& a)->void { a.RemoveUnusedVertices(); });
    t.method("RemoveUnusedVertices", [](mfem::Mesh* a)->void { a->RemoveUnusedVertices(); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::RemoveInternalBoundaries() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::RemoveInternalBoundaries()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1719:9
    t.method("RemoveInternalBoundaries", [](mfem::Mesh& a)->void { a.RemoveInternalBoundaries(); });
    t.method("RemoveInternalBoundaries", [](mfem::Mesh* a)->void { a->RemoveInternalBoundaries(); });

    DEBUG_MSG("Adding wrapper for double mfem::Mesh::GetElementSize(int, int) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::Mesh::GetElementSize(int, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1723:11
    t.method("GetElementSize", [](mfem::Mesh& a, int arg0)->double { return a.GetElementSize(arg0); });
    t.method("GetElementSize", [](mfem::Mesh& a, int arg0, int arg1)->double { return a.GetElementSize(arg0, arg1); });
    t.method("GetElementSize", [](mfem::Mesh* a, int arg0)->double { return a->GetElementSize(arg0); });
    t.method("GetElementSize", [](mfem::Mesh* a, int arg0, int arg1)->double { return a->GetElementSize(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double mfem::Mesh::GetElementSize(int, const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::Mesh::GetElementSize(int, const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1725:11
    t.method("GetElementSize", [](mfem::Mesh& a, int arg0, const mfem::Vector & arg1)->double { return a.GetElementSize(arg0, arg1); });
    t.method("GetElementSize", [](mfem::Mesh* a, int arg0, const mfem::Vector & arg1)->double { return a->GetElementSize(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double mfem::Mesh::GetElementVolume(int) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::Mesh::GetElementVolume(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1727:11
    t.method("GetElementVolume", [](mfem::Mesh& a, int arg0)->double { return a.GetElementVolume(arg0); });
    t.method("GetElementVolume", [](mfem::Mesh* a, int arg0)->double { return a->GetElementVolume(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetElementCenter(int, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetElementCenter(int, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1729:9
    t.method("GetElementCenter", [](mfem::Mesh& a, int arg0, mfem::Vector & arg1)->void { a.GetElementCenter(arg0, arg1); });
    t.method("GetElementCenter", [](mfem::Mesh* a, int arg0, mfem::Vector & arg1)->void { a->GetElementCenter(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetBoundingBox(mfem::Vector &, mfem::Vector &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetBoundingBox(mfem::Vector &, mfem::Vector &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1733:9
    t.method("GetBoundingBox", [](mfem::Mesh& a, mfem::Vector & arg0, mfem::Vector & arg1)->void { a.GetBoundingBox(arg0, arg1); });
    t.method("GetBoundingBox", [](mfem::Mesh& a, mfem::Vector & arg0, mfem::Vector & arg1, int arg2)->void { a.GetBoundingBox(arg0, arg1, arg2); });
    t.method("GetBoundingBox", [](mfem::Mesh* a, mfem::Vector & arg0, mfem::Vector & arg1)->void { a->GetBoundingBox(arg0, arg1); });
    t.method("GetBoundingBox", [](mfem::Mesh* a, mfem::Vector & arg0, mfem::Vector & arg1, int arg2)->void { a->GetBoundingBox(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::GetCharacteristics(double &, double &, double &, double &, mfem::Vector *, mfem::Vector *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::GetCharacteristics(double &, double &, double &, double &, mfem::Vector *, mfem::Vector *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1735:9
    t.method("GetCharacteristics", [](mfem::Mesh& a, double & arg0, double & arg1, double & arg2, double & arg3)->void { a.GetCharacteristics(arg0, arg1, arg2, arg3); });
    t.method("GetCharacteristics", [](mfem::Mesh& a, double & arg0, double & arg1, double & arg2, double & arg3, mfem::Vector * arg4)->void { a.GetCharacteristics(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetCharacteristics", [](mfem::Mesh& a, double & arg0, double & arg1, double & arg2, double & arg3, mfem::Vector * arg4, mfem::Vector * arg5)->void { a.GetCharacteristics(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("GetCharacteristics", [](mfem::Mesh* a, double & arg0, double & arg1, double & arg2, double & arg3)->void { a->GetCharacteristics(arg0, arg1, arg2, arg3); });
    t.method("GetCharacteristics", [](mfem::Mesh* a, double & arg0, double & arg1, double & arg2, double & arg3, mfem::Vector * arg4)->void { a->GetCharacteristics(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetCharacteristics", [](mfem::Mesh* a, double & arg0, double & arg1, double & arg2, double & arg3, mfem::Vector * arg4, mfem::Vector * arg5)->void { a->GetCharacteristics(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for int mfem::Mesh::FindPoints(mfem::DenseMatrix &, mfem::Array<int> &, mfem::Array<mfem::IntegrationPoint> &, bool, mfem::InverseElementTransformation *) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::Mesh::FindPoints(mfem::DenseMatrix &, mfem::Array<int> &, mfem::Array<mfem::IntegrationPoint> &, bool, mfem::InverseElementTransformation *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1788:16
    t.method("FindPoints", [](mfem::Mesh& a, mfem::DenseMatrix & arg0, mfem::Array<int> & arg1, mfem::Array<mfem::IntegrationPoint> & arg2)->int { return a.FindPoints(arg0, arg1, arg2); });
    t.method("FindPoints", [](mfem::Mesh& a, mfem::DenseMatrix & arg0, mfem::Array<int> & arg1, mfem::Array<mfem::IntegrationPoint> & arg2, bool arg3)->int { return a.FindPoints(arg0, arg1, arg2, arg3); });
    t.method("FindPoints", [](mfem::Mesh& a, mfem::DenseMatrix & arg0, mfem::Array<int> & arg1, mfem::Array<mfem::IntegrationPoint> & arg2, bool arg3, mfem::InverseElementTransformation * arg4)->int { return a.FindPoints(arg0, arg1, arg2, arg3, arg4); });
    t.method("FindPoints", [](mfem::Mesh* a, mfem::DenseMatrix & arg0, mfem::Array<int> & arg1, mfem::Array<mfem::IntegrationPoint> & arg2)->int { return a->FindPoints(arg0, arg1, arg2); });
    t.method("FindPoints", [](mfem::Mesh* a, mfem::DenseMatrix & arg0, mfem::Array<int> & arg1, mfem::Array<mfem::IntegrationPoint> & arg2, bool arg3)->int { return a->FindPoints(arg0, arg1, arg2, arg3); });
    t.method("FindPoints", [](mfem::Mesh* a, mfem::DenseMatrix & arg0, mfem::Array<int> & arg1, mfem::Array<mfem::IntegrationPoint> & arg2, bool arg3, mfem::InverseElementTransformation * arg4)->int { return a->FindPoints(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::Mesh::Swap(mfem::Mesh &, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Mesh::Swap(mfem::Mesh &, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1794:9
    t.method("Swap", [](mfem::Mesh& a, mfem::Mesh & arg0, bool arg1)->void { a.Swap(arg0, arg1); });
    t.method("Swap", [](mfem::Mesh* a, mfem::Mesh & arg0, bool arg1)->void { a->Swap(arg0, arg1); });

    DEBUG_MSG("Adding attributes methods  to provide read access to the field attributes (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:268:15
    // signature to use in the veto list: mfem::Mesh::attributes
    t.method("attributes", [](const mfem::Mesh& a) -> const mfem::Array<int>& { return a.attributes; });
    t.method("attributes", [](mfem::Mesh& a) -> mfem::Array<int>& { return a.attributes; });
    t.method("attributes", [](const mfem::Mesh* a) -> const mfem::Array<int>& { return a->attributes; });
    t.method("attributes", [](mfem::Mesh* a) -> mfem::Array<int>& { return a->attributes; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:268:15
    // signature to use in the veto list: mfem::Mesh::attributes
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding attributes! methods to provide write access to the field attributes (" __HERE__ ")");
    t.method("attributes!", [](mfem::Mesh& a, const mfem::Array<int>& val) -> mfem::Array<int>& { return a.attributes = val; });

    DEBUG_MSG("Adding attributes! methods to provide write access to the field attributes (" __HERE__ ")");
    t.method("attributes!", [](mfem::Mesh* a, const mfem::Array<int>& val) -> mfem::Array<int>& { return a->attributes = val; });

    DEBUG_MSG("Adding bdr_attributes methods  to provide read access to the field bdr_attributes (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:270:15
    // signature to use in the veto list: mfem::Mesh::bdr_attributes
    t.method("bdr_attributes", [](const mfem::Mesh& a) -> const mfem::Array<int>& { return a.bdr_attributes; });
    t.method("bdr_attributes", [](mfem::Mesh& a) -> mfem::Array<int>& { return a.bdr_attributes; });
    t.method("bdr_attributes", [](const mfem::Mesh* a) -> const mfem::Array<int>& { return a->bdr_attributes; });
    t.method("bdr_attributes", [](mfem::Mesh* a) -> mfem::Array<int>& { return a->bdr_attributes; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:270:15
    // signature to use in the veto list: mfem::Mesh::bdr_attributes
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding bdr_attributes! methods to provide write access to the field bdr_attributes (" __HERE__ ")");
    t.method("bdr_attributes!", [](mfem::Mesh& a, const mfem::Array<int>& val) -> mfem::Array<int>& { return a.bdr_attributes = val; });

    DEBUG_MSG("Adding bdr_attributes! methods to provide write access to the field bdr_attributes (" __HERE__ ")");
    t.method("bdr_attributes!", [](mfem::Mesh* a, const mfem::Array<int>& val) -> mfem::Array<int>& { return a->bdr_attributes = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::Mesh>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_Mesh(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_Mesh(module));
}
