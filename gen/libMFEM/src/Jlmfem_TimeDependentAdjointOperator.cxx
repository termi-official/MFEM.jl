// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::TimeDependentAdjointOperator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::TimeDependentAdjointOperator> : std::false_type { };
template<> struct SuperType<mfem::TimeDependentAdjointOperator> { typedef mfem::TimeDependentOperator type; };
}

// Class generating the wrapper for type mfem::TimeDependentAdjointOperator
// signature to use in the veto file: mfem::TimeDependentAdjointOperator
struct Jlmfem_TimeDependentAdjointOperator: public Wrapper {

  Jlmfem_TimeDependentAdjointOperator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::TimeDependentAdjointOperator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:474:7
    jlcxx::TypeWrapper<mfem::TimeDependentAdjointOperator>  t = jlModule.add_type<mfem::TimeDependentAdjointOperator>("mfem!TimeDependentAdjointOperator",
      jlcxx::julia_base_type<mfem::TimeDependentOperator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::TimeDependentAdjointOperator>>(new jlcxx::TypeWrapper<mfem::TimeDependentAdjointOperator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::TimeDependentAdjointOperator::QuadratureIntegration(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TimeDependentAdjointOperator::QuadratureIntegration(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:522:17
    t.method("QuadratureIntegration", [](mfem::TimeDependentAdjointOperator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.QuadratureIntegration(arg0, arg1); });
    t.method("QuadratureIntegration", [](mfem::TimeDependentAdjointOperator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->QuadratureIntegration(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::TimeDependentAdjointOperator::AdjointRateMult(const mfem::Vector &, mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TimeDependentAdjointOperator::AdjointRateMult(const mfem::Vector &, mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:531:17
    t.method("AdjointRateMult", [](mfem::TimeDependentAdjointOperator const& a, const mfem::Vector & arg0, mfem::Vector & arg1, mfem::Vector & arg2)->void { a.AdjointRateMult(arg0, arg1, arg2); });
    t.method("AdjointRateMult", [](mfem::TimeDependentAdjointOperator const* a, const mfem::Vector & arg0, mfem::Vector & arg1, mfem::Vector & arg2)->void { a->AdjointRateMult(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::TimeDependentAdjointOperator::QuadratureSensitivityMult(const mfem::Vector &, const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::TimeDependentAdjointOperator::QuadratureSensitivityMult(const mfem::Vector &, const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:543:17
    t.method("QuadratureSensitivityMult", [](mfem::TimeDependentAdjointOperator const& a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a.QuadratureSensitivityMult(arg0, arg1, arg2); });
    t.method("QuadratureSensitivityMult", [](mfem::TimeDependentAdjointOperator const* a, const mfem::Vector & arg0, const mfem::Vector & arg1, mfem::Vector & arg2)->void { a->QuadratureSensitivityMult(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for int mfem::TimeDependentAdjointOperator::SUNImplicitSetupB(const double, const mfem::Vector &, const mfem::Vector &, const mfem::Vector &, int, int *, double) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::TimeDependentAdjointOperator::SUNImplicitSetupB(const double, const mfem::Vector &, const mfem::Vector &, const mfem::Vector &, int, int *, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:562:16
    t.method("SUNImplicitSetupB", [](mfem::TimeDependentAdjointOperator& a, const double arg0, const mfem::Vector & arg1, const mfem::Vector & arg2, const mfem::Vector & arg3, int arg4, int * arg5, double arg6)->int { return a.SUNImplicitSetupB(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("SUNImplicitSetupB", [](mfem::TimeDependentAdjointOperator* a, const double arg0, const mfem::Vector & arg1, const mfem::Vector & arg2, const mfem::Vector & arg3, int arg4, int * arg5, double arg6)->int { return a->SUNImplicitSetupB(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });

    DEBUG_MSG("Adding wrapper for int mfem::TimeDependentAdjointOperator::SUNImplicitSolveB(mfem::Vector &, const mfem::Vector &, double) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::TimeDependentAdjointOperator::SUNImplicitSolveB(mfem::Vector &, const mfem::Vector &, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:582:16
    t.method("SUNImplicitSolveB", [](mfem::TimeDependentAdjointOperator& a, mfem::Vector & arg0, const mfem::Vector & arg1, double arg2)->int { return a.SUNImplicitSolveB(arg0, arg1, arg2); });
    t.method("SUNImplicitSolveB", [](mfem::TimeDependentAdjointOperator* a, mfem::Vector & arg0, const mfem::Vector & arg1, double arg2)->int { return a->SUNImplicitSolveB(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for int mfem::TimeDependentAdjointOperator::GetAdjointHeight() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::TimeDependentAdjointOperator::GetAdjointHeight()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:590:8
    t.method("GetAdjointHeight", [](mfem::TimeDependentAdjointOperator& a)->int { return a.GetAdjointHeight(); });
    t.method("GetAdjointHeight", [](mfem::TimeDependentAdjointOperator* a)->int { return a->GetAdjointHeight(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::TimeDependentAdjointOperator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_TimeDependentAdjointOperator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_TimeDependentAdjointOperator(module));
}
