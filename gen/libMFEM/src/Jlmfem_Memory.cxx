// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {

  template<typename T>
  struct BuildParameterList<mfem::Memory<T>>
  {
    typedef ParameterList<T> type;
  };

  template<typename T> struct IsMirroredType<mfem::Memory<T>> : std::false_type { };
  template<typename T> struct DefaultConstructible<mfem::Memory<T>> : std::false_type { };
}

// Class generating the wrapper for type mfem::Memory
// signature to use in the veto file: mfem::Memory
struct Jlmfem_Memory: public Wrapper {

  Jlmfem_Memory(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::Memory (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/general/mem_manager.hpp:146:7
    jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>  t =  jlModule.add_type<jlcxx::Parametric<jlcxx::TypeVar<1>>>("mfem!Memory");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>>(new jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>(jlModule, t));
    t.constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
    auto t8_decl_methods = [this]<typename T> (jlcxx::TypeWrapper<mfem::Memory<T>> wrapped){
      auto module_ = this->module_;
      wrapped.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
    };
    t.apply<mfem::Memory<int>, mfem::Memory<double>>(t8_decl_methods);
  }

  void add_methods() const{
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_Memory(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_Memory(module));
}
