// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::IterativeSolver> : std::false_type { };
  template<> struct DefaultConstructible<mfem::IterativeSolver> : std::false_type { };
template<> struct SuperType<mfem::IterativeSolver> { typedef mfem::Solver type; };
}

// Class generating the wrapper for type mfem::IterativeSolver
// signature to use in the veto file: mfem::IterativeSolver
struct Jlmfem_IterativeSolver: public Wrapper {

  Jlmfem_IterativeSolver(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::IterativeSolver (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:66:7
    jlcxx::TypeWrapper<mfem::IterativeSolver>  t = jlModule.add_type<mfem::IterativeSolver>("mfem!IterativeSolver",
      jlcxx::julia_base_type<mfem::Solver>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::IterativeSolver>>(new jlcxx::TypeWrapper<mfem::IterativeSolver>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolver::SetRelTol(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolver::SetRelTol(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:198:9
    t.method("SetRelTol", [](mfem::IterativeSolver& a, double arg0)->void { a.SetRelTol(arg0); });
    t.method("SetRelTol", [](mfem::IterativeSolver* a, double arg0)->void { a->SetRelTol(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolver::SetAbsTol(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolver::SetAbsTol(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:199:9
    t.method("SetAbsTol", [](mfem::IterativeSolver& a, double arg0)->void { a.SetAbsTol(arg0); });
    t.method("SetAbsTol", [](mfem::IterativeSolver* a, double arg0)->void { a->SetAbsTol(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolver::SetMaxIter(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolver::SetMaxIter(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:200:9
    t.method("SetMaxIter", [](mfem::IterativeSolver& a, int arg0)->void { a.SetMaxIter(arg0); });
    t.method("SetMaxIter", [](mfem::IterativeSolver* a, int arg0)->void { a->SetMaxIter(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolver::SetPrintLevel(int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolver::SetPrintLevel(int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:228:17
    t.method("SetPrintLevel", [](mfem::IterativeSolver& a, int arg0)->void { a.SetPrintLevel(arg0); });
    t.method("SetPrintLevel", [](mfem::IterativeSolver* a, int arg0)->void { a->SetPrintLevel(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolver::SetPrintLevel(mfem::IterativeSolver::PrintLevel) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolver::SetPrintLevel(mfem::IterativeSolver::PrintLevel)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:241:17
    t.method("SetPrintLevel", [](mfem::IterativeSolver& a, mfem::IterativeSolver::PrintLevel arg0)->void { a.SetPrintLevel(arg0); });
    t.method("SetPrintLevel", [](mfem::IterativeSolver* a, mfem::IterativeSolver::PrintLevel arg0)->void { a->SetPrintLevel(arg0); });

    DEBUG_MSG("Adding wrapper for int mfem::IterativeSolver::GetNumIterations() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::IterativeSolver::GetNumIterations()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:246:8
    t.method("GetNumIterations", [](mfem::IterativeSolver const& a)->int { return a.GetNumIterations(); });
    t.method("GetNumIterations", [](mfem::IterativeSolver const* a)->int { return a->GetNumIterations(); });

    DEBUG_MSG("Adding wrapper for bool mfem::IterativeSolver::GetConverged() (" __HERE__ ")");
    // signature to use in the veto list: bool mfem::IterativeSolver::GetConverged()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:247:9
    t.method("GetConverged", [](mfem::IterativeSolver const& a)->bool { return a.GetConverged(); });
    t.method("GetConverged", [](mfem::IterativeSolver const* a)->bool { return a->GetConverged(); });

    DEBUG_MSG("Adding wrapper for double mfem::IterativeSolver::GetFinalNorm() (" __HERE__ ")");
    // signature to use in the veto list: double mfem::IterativeSolver::GetFinalNorm()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:248:11
    t.method("GetFinalNorm", [](mfem::IterativeSolver const& a)->double { return a.GetFinalNorm(); });
    t.method("GetFinalNorm", [](mfem::IterativeSolver const* a)->double { return a->GetFinalNorm(); });

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolver::SetPreconditioner(mfem::Solver &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolver::SetPreconditioner(mfem::Solver &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:252:17
    t.method("SetPreconditioner", [](mfem::IterativeSolver& a, mfem::Solver & arg0)->void { a.SetPreconditioner(arg0); });
    t.method("SetPreconditioner", [](mfem::IterativeSolver* a, mfem::Solver & arg0)->void { a->SetPreconditioner(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolver::SetOperator(const mfem::Operator &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolver::SetOperator(const mfem::Operator &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:255:17
    t.method("SetOperator", [](mfem::IterativeSolver& a, const mfem::Operator & arg0)->void { a.SetOperator(arg0); });
    t.method("SetOperator", [](mfem::IterativeSolver* a, const mfem::Operator & arg0)->void { a->SetOperator(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::IterativeSolver::SetMonitor(mfem::IterativeSolverMonitor &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::IterativeSolver::SetMonitor(mfem::IterativeSolverMonitor &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:258:9
    t.method("SetMonitor", [](mfem::IterativeSolver& a, mfem::IterativeSolverMonitor & arg0)->void { a.SetMonitor(arg0); });
    t.method("SetMonitor", [](mfem::IterativeSolver* a, mfem::IterativeSolverMonitor & arg0)->void { a->SetMonitor(arg0); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::IterativeSolver>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_IterativeSolver(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_IterativeSolver(module));
}
