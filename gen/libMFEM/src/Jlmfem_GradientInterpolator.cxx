// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::GradientInterpolator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::GradientInterpolator> : std::false_type { };
template<> struct SuperType<mfem::GradientInterpolator> { typedef mfem::DiscreteInterpolator type; };
}

// Class generating the wrapper for type mfem::GradientInterpolator
// signature to use in the veto file: mfem::GradientInterpolator
struct Jlmfem_GradientInterpolator: public Wrapper {

  Jlmfem_GradientInterpolator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::GradientInterpolator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:3260:7
    jlcxx::TypeWrapper<mfem::GradientInterpolator>  t = jlModule.add_type<mfem::GradientInterpolator>("mfem!GradientInterpolator",
      jlcxx::julia_base_type<mfem::DiscreteInterpolator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::GradientInterpolator>>(new jlcxx::TypeWrapper<mfem::GradientInterpolator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::GradientInterpolator::AssembleElementMatrix2(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GradientInterpolator::AssembleElementMatrix2(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:3266:17
    t.method("AssembleElementMatrix2", [](mfem::GradientInterpolator& a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::ElementTransformation & arg2, mfem::DenseMatrix & arg3)->void { a.AssembleElementMatrix2(arg0, arg1, arg2, arg3); });
    t.method("AssembleElementMatrix2", [](mfem::GradientInterpolator* a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::ElementTransformation & arg2, mfem::DenseMatrix & arg3)->void { a->AssembleElementMatrix2(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::GradientInterpolator::AssemblePA(const mfem::FiniteElementSpace &, const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GradientInterpolator::AssemblePA(const mfem::FiniteElementSpace &, const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:3279:17
    t.method("AssemblePA", [](mfem::GradientInterpolator& a, const mfem::FiniteElementSpace & arg0, const mfem::FiniteElementSpace & arg1)->void { a.AssemblePA(arg0, arg1); });
    t.method("AssemblePA", [](mfem::GradientInterpolator* a, const mfem::FiniteElementSpace & arg0, const mfem::FiniteElementSpace & arg1)->void { a->AssemblePA(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GradientInterpolator::AddMultPA(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GradientInterpolator::AddMultPA(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:3282:17
    t.method("AddMultPA", [](mfem::GradientInterpolator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultPA(arg0, arg1); });
    t.method("AddMultPA", [](mfem::GradientInterpolator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultPA(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GradientInterpolator::AddMultTransposePA(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GradientInterpolator::AddMultTransposePA(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:3283:17
    t.method("AddMultTransposePA", [](mfem::GradientInterpolator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultTransposePA(arg0, arg1); });
    t.method("AddMultTransposePA", [](mfem::GradientInterpolator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultTransposePA(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::GradientInterpolator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_GradientInterpolator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_GradientInterpolator(module));
}
