// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::GridFunction> : std::false_type { };
  template<> struct DefaultConstructible<mfem::GridFunction> : std::false_type { };
template<> struct SuperType<mfem::GridFunction> { typedef mfem::Vector type; };
}

// Class generating the wrapper for type mfem::GridFunction
// signature to use in the veto file: mfem::GridFunction
struct Jlmfem_GridFunction: public Wrapper {

  Jlmfem_GridFunction(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::GridFunction (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:30:7
    jlcxx::TypeWrapper<mfem::GridFunction>  t = jlModule.add_type<mfem::GridFunction>("mfem!GridFunction",
      jlcxx::julia_base_type<mfem::Vector>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::GridFunction>>(new jlcxx::TypeWrapper<mfem::GridFunction>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GridFunction(const mfem::GridFunction &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:80:4
    t.constructor<const mfem::GridFunction &>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GridFunction(mfem::FiniteElementSpace *) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:85:4
    t.constructor<mfem::FiniteElementSpace *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GridFunction(mfem::FiniteElementSpace *, double *) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:94:4
    t.constructor<mfem::FiniteElementSpace *, double *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GridFunction(mfem::FiniteElementSpace *, mfem::Vector &, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:100:4
    t.constructor<mfem::FiniteElementSpace *, mfem::Vector &>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<mfem::FiniteElementSpace *, mfem::Vector &, int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for mfem::GridFunction & mfem::GridFunction::operator=(const mfem::GridFunction &) (" __HERE__ ")");
    // signature to use in the veto list: mfem::GridFunction & mfem::GridFunction::operator=(const mfem::GridFunction &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:118:18
    t.method("assign", [](mfem::GridFunction& a, const mfem::GridFunction & arg0)->mfem::GridFunction & { return a.operator=(arg0); });
    t.method("assign", [](mfem::GridFunction* a, const mfem::GridFunction & arg0)->mfem::GridFunction & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::MakeOwner(mfem::FiniteElementCollection *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::MakeOwner(mfem::FiniteElementCollection *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:124:9
    t.method("MakeOwner", [](mfem::GridFunction& a, mfem::FiniteElementCollection * arg0)->void { a.MakeOwner(arg0); });
    t.method("MakeOwner", [](mfem::GridFunction* a, mfem::FiniteElementCollection * arg0)->void { a->MakeOwner(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::FiniteElementCollection * mfem::GridFunction::OwnFEC() (" __HERE__ ")");
    // signature to use in the veto list: mfem::FiniteElementCollection * mfem::GridFunction::OwnFEC()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:126:29
    t.method("OwnFEC", [](mfem::GridFunction& a)->mfem::FiniteElementCollection * { return a.OwnFEC(); });
    t.method("OwnFEC", [](mfem::GridFunction* a)->mfem::FiniteElementCollection * { return a->OwnFEC(); });

    DEBUG_MSG("Adding wrapper for int mfem::GridFunction::VectorDim() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::GridFunction::VectorDim()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:128:8
    t.method("VectorDim", [](mfem::GridFunction const& a)->int { return a.VectorDim(); });
    t.method("VectorDim", [](mfem::GridFunction const* a)->int { return a->VectorDim(); });

    DEBUG_MSG("Adding wrapper for int mfem::GridFunction::CurlDim() (" __HERE__ ")");
    // signature to use in the veto list: int mfem::GridFunction::CurlDim()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:129:8
    t.method("CurlDim", [](mfem::GridFunction const& a)->int { return a.CurlDim(); });
    t.method("CurlDim", [](mfem::GridFunction const* a)->int { return a->CurlDim(); });

    DEBUG_MSG("Adding wrapper for const mfem::Vector & mfem::GridFunction::GetTrueVector() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Vector & mfem::GridFunction::GetTrueVector()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:134:18
    t.method("GetTrueVector", [](mfem::GridFunction const& a)->const mfem::Vector & { return a.GetTrueVector(); });
    t.method("GetTrueVector", [](mfem::GridFunction const* a)->const mfem::Vector & { return a->GetTrueVector(); });

    DEBUG_MSG("Adding wrapper for mfem::Vector & mfem::GridFunction::GetTrueVector() (" __HERE__ ")");
    // signature to use in the veto list: mfem::Vector & mfem::GridFunction::GetTrueVector()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:138:12
    t.method("GetTrueVector", [](mfem::GridFunction& a)->mfem::Vector & { return a.GetTrueVector(); });
    t.method("GetTrueVector", [](mfem::GridFunction* a)->mfem::Vector & { return a->GetTrueVector(); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetTrueDofs(mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetTrueDofs(mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:141:9
    t.method("GetTrueDofs", [](mfem::GridFunction const& a, mfem::Vector & arg0)->void { a.GetTrueDofs(arg0); });
    t.method("GetTrueDofs", [](mfem::GridFunction const* a, mfem::Vector & arg0)->void { a->GetTrueDofs(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::SetTrueVector() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::SetTrueVector()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:144:9
    t.method("SetTrueVector", [](mfem::GridFunction& a)->void { a.SetTrueVector(); });
    t.method("SetTrueVector", [](mfem::GridFunction* a)->void { a->SetTrueVector(); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::SetFromTrueDofs(const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::SetFromTrueDofs(const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:147:17
    t.method("SetFromTrueDofs", [](mfem::GridFunction& a, const mfem::Vector & arg0)->void { a.SetFromTrueDofs(arg0); });
    t.method("SetFromTrueDofs", [](mfem::GridFunction* a, const mfem::Vector & arg0)->void { a->SetFromTrueDofs(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::SetFromTrueVector() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::SetFromTrueVector()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:150:9
    t.method("SetFromTrueVector", [](mfem::GridFunction& a)->void { a.SetFromTrueVector(); });
    t.method("SetFromTrueVector", [](mfem::GridFunction* a)->void { a->SetFromTrueVector(); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetNodalValues(int, mfem::Array<double> &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetNodalValues(int, mfem::Array<double> &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:153:9
    t.method("GetNodalValues", [](mfem::GridFunction const& a, int arg0, mfem::Array<double> & arg1)->void { a.GetNodalValues(arg0, arg1); });
    t.method("GetNodalValues", [](mfem::GridFunction const& a, int arg0, mfem::Array<double> & arg1, int arg2)->void { a.GetNodalValues(arg0, arg1, arg2); });
    t.method("GetNodalValues", [](mfem::GridFunction const* a, int arg0, mfem::Array<double> & arg1)->void { a->GetNodalValues(arg0, arg1); });
    t.method("GetNodalValues", [](mfem::GridFunction const* a, int arg0, mfem::Array<double> & arg1, int arg2)->void { a->GetNodalValues(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for double mfem::GridFunction::GetValue(int, const mfem::IntegrationPoint &, int) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::GridFunction::GetValue(int, const mfem::IntegrationPoint &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:169:19
    t.method("GetValue", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationPoint & arg1)->double { return a.GetValue(arg0, arg1); });
    t.method("GetValue", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationPoint & arg1, int arg2)->double { return a.GetValue(arg0, arg1, arg2); });
    t.method("GetValue", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationPoint & arg1)->double { return a->GetValue(arg0, arg1); });
    t.method("GetValue", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationPoint & arg1, int arg2)->double { return a->GetValue(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetVectorValue(int, const mfem::IntegrationPoint &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetVectorValue(int, const mfem::IntegrationPoint &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:173:17
    t.method("GetVectorValue", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationPoint & arg1, mfem::Vector & arg2)->void { a.GetVectorValue(arg0, arg1, arg2); });
    t.method("GetVectorValue", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationPoint & arg1, mfem::Vector & arg2)->void { a->GetVectorValue(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetValues(int, const mfem::IntegrationRule &, mfem::Vector &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetValues(int, const mfem::IntegrationRule &, mfem::Vector &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:194:9
    t.method("GetValues", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2)->void { a.GetValues(arg0, arg1, arg2); });
    t.method("GetValues", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, int arg3)->void { a.GetValues(arg0, arg1, arg2, arg3); });
    t.method("GetValues", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2)->void { a->GetValues(arg0, arg1, arg2); });
    t.method("GetValues", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, int arg3)->void { a->GetValues(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetValues(int, const mfem::IntegrationRule &, mfem::Vector &, mfem::DenseMatrix &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetValues(int, const mfem::IntegrationRule &, mfem::Vector &, mfem::DenseMatrix &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:199:9
    t.method("GetValues", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, mfem::DenseMatrix & arg3)->void { a.GetValues(arg0, arg1, arg2, arg3); });
    t.method("GetValues", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, mfem::DenseMatrix & arg3, int arg4)->void { a.GetValues(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetValues", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, mfem::DenseMatrix & arg3)->void { a->GetValues(arg0, arg1, arg2, arg3); });
    t.method("GetValues", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, mfem::DenseMatrix & arg3, int arg4)->void { a->GetValues(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetVectorValues(int, const mfem::IntegrationRule &, mfem::DenseMatrix &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetVectorValues(int, const mfem::IntegrationRule &, mfem::DenseMatrix &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:202:9
    t.method("GetVectorValues", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix & arg3)->void { a.GetVectorValues(arg0, arg1, arg2, arg3); });
    t.method("GetVectorValues", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix & arg3)->void { a->GetVectorValues(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for double mfem::GridFunction::GetValue(mfem::ElementTransformation &, const mfem::IntegrationPoint &, int, mfem::Vector *) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::GridFunction::GetValue(mfem::ElementTransformation &, const mfem::IntegrationPoint &, int, mfem::Vector *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:220:19
    t.method("GetValue", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a.GetValue(arg0, arg1); });
    t.method("GetValue", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1, int arg2)->double { return a.GetValue(arg0, arg1, arg2); });
    t.method("GetValue", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1, int arg2, mfem::Vector * arg3)->double { return a.GetValue(arg0, arg1, arg2, arg3); });
    t.method("GetValue", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a->GetValue(arg0, arg1); });
    t.method("GetValue", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1, int arg2)->double { return a->GetValue(arg0, arg1, arg2); });
    t.method("GetValue", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1, int arg2, mfem::Vector * arg3)->double { return a->GetValue(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetVectorValue(mfem::ElementTransformation &, const mfem::IntegrationPoint &, mfem::Vector &, mfem::Vector *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetVectorValue(mfem::ElementTransformation &, const mfem::IntegrationPoint &, mfem::Vector &, mfem::Vector *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:225:17
    t.method("GetVectorValue", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1, mfem::Vector & arg2)->void { a.GetVectorValue(arg0, arg1, arg2); });
    t.method("GetVectorValue", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1, mfem::Vector & arg2, mfem::Vector * arg3)->void { a.GetVectorValue(arg0, arg1, arg2, arg3); });
    t.method("GetVectorValue", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1, mfem::Vector & arg2)->void { a->GetVectorValue(arg0, arg1, arg2); });
    t.method("GetVectorValue", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1, mfem::Vector & arg2, mfem::Vector * arg3)->void { a->GetVectorValue(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetValues(mfem::ElementTransformation &, const mfem::IntegrationRule &, mfem::Vector &, int, mfem::DenseMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetValues(mfem::ElementTransformation &, const mfem::IntegrationRule &, mfem::Vector &, int, mfem::DenseMatrix *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:248:9
    t.method("GetValues", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2)->void { a.GetValues(arg0, arg1, arg2); });
    t.method("GetValues", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, int arg3)->void { a.GetValues(arg0, arg1, arg2, arg3); });
    t.method("GetValues", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, int arg3, mfem::DenseMatrix * arg4)->void { a.GetValues(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetValues", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2)->void { a->GetValues(arg0, arg1, arg2); });
    t.method("GetValues", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, int arg3)->void { a->GetValues(arg0, arg1, arg2, arg3); });
    t.method("GetValues", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, int arg3, mfem::DenseMatrix * arg4)->void { a->GetValues(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetVectorValues(mfem::ElementTransformation &, const mfem::IntegrationRule &, mfem::DenseMatrix &, mfem::DenseMatrix *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetVectorValues(mfem::ElementTransformation &, const mfem::IntegrationRule &, mfem::DenseMatrix &, mfem::DenseMatrix *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:253:9
    t.method("GetVectorValues", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2)->void { a.GetVectorValues(arg0, arg1, arg2); });
    t.method("GetVectorValues", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix * arg3)->void { a.GetVectorValues(arg0, arg1, arg2, arg3); });
    t.method("GetVectorValues", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2)->void { a->GetVectorValues(arg0, arg1, arg2); });
    t.method("GetVectorValues", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix * arg3)->void { a->GetVectorValues(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for int mfem::GridFunction::GetFaceValues(int, int, const mfem::IntegrationRule &, mfem::Vector &, mfem::DenseMatrix &, int) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::GridFunction::GetFaceValues(int, int, const mfem::IntegrationRule &, mfem::Vector &, mfem::DenseMatrix &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:275:8
    t.method("GetFaceValues", [](mfem::GridFunction const& a, int arg0, int arg1, const mfem::IntegrationRule & arg2, mfem::Vector & arg3, mfem::DenseMatrix & arg4)->int { return a.GetFaceValues(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetFaceValues", [](mfem::GridFunction const& a, int arg0, int arg1, const mfem::IntegrationRule & arg2, mfem::Vector & arg3, mfem::DenseMatrix & arg4, int arg5)->int { return a.GetFaceValues(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("GetFaceValues", [](mfem::GridFunction const* a, int arg0, int arg1, const mfem::IntegrationRule & arg2, mfem::Vector & arg3, mfem::DenseMatrix & arg4)->int { return a->GetFaceValues(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetFaceValues", [](mfem::GridFunction const* a, int arg0, int arg1, const mfem::IntegrationRule & arg2, mfem::Vector & arg3, mfem::DenseMatrix & arg4, int arg5)->int { return a->GetFaceValues(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for int mfem::GridFunction::GetFaceVectorValues(int, int, const mfem::IntegrationRule &, mfem::DenseMatrix &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: int mfem::GridFunction::GetFaceVectorValues(int, int, const mfem::IntegrationRule &, mfem::DenseMatrix &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:280:8
    t.method("GetFaceVectorValues", [](mfem::GridFunction const& a, int arg0, int arg1, const mfem::IntegrationRule & arg2, mfem::DenseMatrix & arg3, mfem::DenseMatrix & arg4)->int { return a.GetFaceVectorValues(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetFaceVectorValues", [](mfem::GridFunction const* a, int arg0, int arg1, const mfem::IntegrationRule & arg2, mfem::DenseMatrix & arg3, mfem::DenseMatrix & arg4)->int { return a->GetFaceVectorValues(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetLaplacians(int, const mfem::IntegrationRule &, mfem::Vector &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetLaplacians(int, const mfem::IntegrationRule &, mfem::Vector &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:284:9
    t.method("GetLaplacians", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2)->void { a.GetLaplacians(arg0, arg1, arg2); });
    t.method("GetLaplacians", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, int arg3)->void { a.GetLaplacians(arg0, arg1, arg2, arg3); });
    t.method("GetLaplacians", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2)->void { a->GetLaplacians(arg0, arg1, arg2); });
    t.method("GetLaplacians", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, int arg3)->void { a->GetLaplacians(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetLaplacians(int, const mfem::IntegrationRule &, mfem::Vector &, mfem::DenseMatrix &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetLaplacians(int, const mfem::IntegrationRule &, mfem::Vector &, mfem::DenseMatrix &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:287:9
    t.method("GetLaplacians", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, mfem::DenseMatrix & arg3)->void { a.GetLaplacians(arg0, arg1, arg2, arg3); });
    t.method("GetLaplacians", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, mfem::DenseMatrix & arg3, int arg4)->void { a.GetLaplacians(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetLaplacians", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, mfem::DenseMatrix & arg3)->void { a->GetLaplacians(arg0, arg1, arg2, arg3); });
    t.method("GetLaplacians", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::Vector & arg2, mfem::DenseMatrix & arg3, int arg4)->void { a->GetLaplacians(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetHessians(int, const mfem::IntegrationRule &, mfem::DenseMatrix &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetHessians(int, const mfem::IntegrationRule &, mfem::DenseMatrix &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:290:9
    t.method("GetHessians", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2)->void { a.GetHessians(arg0, arg1, arg2); });
    t.method("GetHessians", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, int arg3)->void { a.GetHessians(arg0, arg1, arg2, arg3); });
    t.method("GetHessians", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2)->void { a->GetHessians(arg0, arg1, arg2); });
    t.method("GetHessians", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, int arg3)->void { a->GetHessians(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetHessians(int, const mfem::IntegrationRule &, mfem::DenseMatrix &, mfem::DenseMatrix &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetHessians(int, const mfem::IntegrationRule &, mfem::DenseMatrix &, mfem::DenseMatrix &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:293:9
    t.method("GetHessians", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix & arg3)->void { a.GetHessians(arg0, arg1, arg2, arg3); });
    t.method("GetHessians", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix & arg3, int arg4)->void { a.GetHessians(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetHessians", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix & arg3)->void { a->GetHessians(arg0, arg1, arg2, arg3); });
    t.method("GetHessians", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix & arg3, int arg4)->void { a->GetHessians(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetValuesFrom(const mfem::GridFunction &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetValuesFrom(const mfem::GridFunction &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:296:9
    t.method("GetValuesFrom", [](mfem::GridFunction& a, const mfem::GridFunction & arg0)->void { a.GetValuesFrom(arg0); });
    t.method("GetValuesFrom", [](mfem::GridFunction* a, const mfem::GridFunction & arg0)->void { a->GetValuesFrom(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetBdrValuesFrom(const mfem::GridFunction &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetBdrValuesFrom(const mfem::GridFunction &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:298:9
    t.method("GetBdrValuesFrom", [](mfem::GridFunction& a, const mfem::GridFunction & arg0)->void { a.GetBdrValuesFrom(arg0); });
    t.method("GetBdrValuesFrom", [](mfem::GridFunction* a, const mfem::GridFunction & arg0)->void { a->GetBdrValuesFrom(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetVectorFieldValues(int, const mfem::IntegrationRule &, mfem::DenseMatrix &, mfem::DenseMatrix &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetVectorFieldValues(int, const mfem::IntegrationRule &, mfem::DenseMatrix &, mfem::DenseMatrix &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:300:9
    t.method("GetVectorFieldValues", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix & arg3)->void { a.GetVectorFieldValues(arg0, arg1, arg2, arg3); });
    t.method("GetVectorFieldValues", [](mfem::GridFunction const& a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix & arg3, int arg4)->void { a.GetVectorFieldValues(arg0, arg1, arg2, arg3, arg4); });
    t.method("GetVectorFieldValues", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix & arg3)->void { a->GetVectorFieldValues(arg0, arg1, arg2, arg3); });
    t.method("GetVectorFieldValues", [](mfem::GridFunction const* a, int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2, mfem::DenseMatrix & arg3, int arg4)->void { a->GetVectorFieldValues(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ReorderByNodes() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ReorderByNodes()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:305:9
    t.method("ReorderByNodes", [](mfem::GridFunction& a)->void { a.ReorderByNodes(); });
    t.method("ReorderByNodes", [](mfem::GridFunction* a)->void { a->ReorderByNodes(); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetNodalValues(mfem::Vector &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetNodalValues(mfem::Vector &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:308:9
    t.method("GetNodalValues", [](mfem::GridFunction const& a, mfem::Vector & arg0)->void { a.GetNodalValues(arg0); });
    t.method("GetNodalValues", [](mfem::GridFunction const& a, mfem::Vector & arg0, int arg1)->void { a.GetNodalValues(arg0, arg1); });
    t.method("GetNodalValues", [](mfem::GridFunction const* a, mfem::Vector & arg0)->void { a->GetNodalValues(arg0); });
    t.method("GetNodalValues", [](mfem::GridFunction const* a, mfem::Vector & arg0, int arg1)->void { a->GetNodalValues(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetVectorFieldNodalValues(mfem::Vector &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetVectorFieldNodalValues(mfem::Vector &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:310:9
    t.method("GetVectorFieldNodalValues", [](mfem::GridFunction const& a, mfem::Vector & arg0, int arg1)->void { a.GetVectorFieldNodalValues(arg0, arg1); });
    t.method("GetVectorFieldNodalValues", [](mfem::GridFunction const* a, mfem::Vector & arg0, int arg1)->void { a->GetVectorFieldNodalValues(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectVectorFieldOn(mfem::GridFunction &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectVectorFieldOn(mfem::GridFunction &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:312:9
    t.method("ProjectVectorFieldOn", [](mfem::GridFunction& a, mfem::GridFunction & arg0)->void { a.ProjectVectorFieldOn(arg0); });
    t.method("ProjectVectorFieldOn", [](mfem::GridFunction& a, mfem::GridFunction & arg0, int arg1)->void { a.ProjectVectorFieldOn(arg0, arg1); });
    t.method("ProjectVectorFieldOn", [](mfem::GridFunction* a, mfem::GridFunction & arg0)->void { a->ProjectVectorFieldOn(arg0); });
    t.method("ProjectVectorFieldOn", [](mfem::GridFunction* a, mfem::GridFunction & arg0, int arg1)->void { a->ProjectVectorFieldOn(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetDerivative(int, int, mfem::GridFunction &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetDerivative(int, int, mfem::GridFunction &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:324:9
    t.method("GetDerivative", [](mfem::GridFunction& a, int arg0, int arg1, mfem::GridFunction & arg2)->void { a.GetDerivative(arg0, arg1, arg2); });
    t.method("GetDerivative", [](mfem::GridFunction* a, int arg0, int arg1, mfem::GridFunction & arg2)->void { a->GetDerivative(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for double mfem::GridFunction::GetDivergence(mfem::ElementTransformation &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::GridFunction::GetDivergence(mfem::ElementTransformation &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:326:11
    t.method("GetDivergence", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0)->double { return a.GetDivergence(arg0); });
    t.method("GetDivergence", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0)->double { return a->GetDivergence(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetCurl(mfem::ElementTransformation &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetCurl(mfem::ElementTransformation &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:328:9
    t.method("GetCurl", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, mfem::Vector & arg1)->void { a.GetCurl(arg0, arg1); });
    t.method("GetCurl", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, mfem::Vector & arg1)->void { a->GetCurl(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetGradient(mfem::ElementTransformation &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetGradient(mfem::ElementTransformation &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:330:9
    t.method("GetGradient", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, mfem::Vector & arg1)->void { a.GetGradient(arg0, arg1); });
    t.method("GetGradient", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, mfem::Vector & arg1)->void { a->GetGradient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetGradients(mfem::ElementTransformation &, const mfem::IntegrationRule &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetGradients(mfem::ElementTransformation &, const mfem::IntegrationRule &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:332:9
    t.method("GetGradients", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2)->void { a.GetGradients(arg0, arg1, arg2); });
    t.method("GetGradients", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2)->void { a->GetGradients(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetGradients(const int, const mfem::IntegrationRule &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetGradients(const int, const mfem::IntegrationRule &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:335:9
    t.method("GetGradients", [](mfem::GridFunction const& a, const int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2)->void { a.GetGradients(arg0, arg1, arg2); });
    t.method("GetGradients", [](mfem::GridFunction const* a, const int arg0, const mfem::IntegrationRule & arg1, mfem::DenseMatrix & arg2)->void { a->GetGradients(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetVectorGradient(mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetVectorGradient(mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:339:9
    t.method("GetVectorGradient", [](mfem::GridFunction const& a, mfem::ElementTransformation & arg0, mfem::DenseMatrix & arg1)->void { a.GetVectorGradient(arg0, arg1); });
    t.method("GetVectorGradient", [](mfem::GridFunction const* a, mfem::ElementTransformation & arg0, mfem::DenseMatrix & arg1)->void { a->GetVectorGradient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetElementAverages(mfem::GridFunction &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetElementAverages(mfem::GridFunction &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:344:9
    t.method("GetElementAverages", [](mfem::GridFunction const& a, mfem::GridFunction & arg0)->void { a.GetElementAverages(arg0); });
    t.method("GetElementAverages", [](mfem::GridFunction const* a, mfem::GridFunction & arg0)->void { a->GetElementAverages(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::GetElementDofValues(int, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::GetElementDofValues(int, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:348:17
    t.method("GetElementDofValues", [](mfem::GridFunction const& a, int arg0, mfem::Vector & arg1)->void { a.GetElementDofValues(arg0, arg1); });
    t.method("GetElementDofValues", [](mfem::GridFunction const* a, int arg0, mfem::Vector & arg1)->void { a->GetElementDofValues(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ImposeBounds(int, const mfem::Vector &, const mfem::Vector &, const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ImposeBounds(int, const mfem::Vector &, const mfem::Vector &, const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:354:9
    t.method("ImposeBounds", [](mfem::GridFunction& a, int arg0, const mfem::Vector & arg1, const mfem::Vector & arg2, const mfem::Vector & arg3)->void { a.ImposeBounds(arg0, arg1, arg2, arg3); });
    t.method("ImposeBounds", [](mfem::GridFunction* a, int arg0, const mfem::Vector & arg1, const mfem::Vector & arg2, const mfem::Vector & arg3)->void { a->ImposeBounds(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ImposeBounds(int, const mfem::Vector &, double, double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ImposeBounds(int, const mfem::Vector &, double, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:356:9
    t.method("ImposeBounds", [](mfem::GridFunction& a, int arg0, const mfem::Vector & arg1)->void { a.ImposeBounds(arg0, arg1); });
    t.method("ImposeBounds", [](mfem::GridFunction& a, int arg0, const mfem::Vector & arg1, double arg2)->void { a.ImposeBounds(arg0, arg1, arg2); });
    t.method("ImposeBounds", [](mfem::GridFunction& a, int arg0, const mfem::Vector & arg1, double arg2, double arg3)->void { a.ImposeBounds(arg0, arg1, arg2, arg3); });
    t.method("ImposeBounds", [](mfem::GridFunction* a, int arg0, const mfem::Vector & arg1)->void { a->ImposeBounds(arg0, arg1); });
    t.method("ImposeBounds", [](mfem::GridFunction* a, int arg0, const mfem::Vector & arg1, double arg2)->void { a->ImposeBounds(arg0, arg1, arg2); });
    t.method("ImposeBounds", [](mfem::GridFunction* a, int arg0, const mfem::Vector & arg1, double arg2, double arg3)->void { a->ImposeBounds(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::RestrictConforming() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::RestrictConforming()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:362:9
    t.method("RestrictConforming", [](mfem::GridFunction& a)->void { a.RestrictConforming(); });
    t.method("RestrictConforming", [](mfem::GridFunction* a)->void { a->RestrictConforming(); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectGridFunction(const mfem::GridFunction &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectGridFunction(const mfem::GridFunction &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:368:9
    t.method("ProjectGridFunction", [](mfem::GridFunction& a, const mfem::GridFunction & arg0)->void { a.ProjectGridFunction(arg0); });
    t.method("ProjectGridFunction", [](mfem::GridFunction* a, const mfem::GridFunction & arg0)->void { a->ProjectGridFunction(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectCoefficient(mfem::Coefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectCoefficient(mfem::Coefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:374:17
    t.method("ProjectCoefficient", [](mfem::GridFunction& a, mfem::Coefficient & arg0)->void { a.ProjectCoefficient(arg0); });
    t.method("ProjectCoefficient", [](mfem::GridFunction* a, mfem::Coefficient & arg0)->void { a->ProjectCoefficient(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectCoefficient(mfem::Coefficient &, mfem::Array<int> &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectCoefficient(mfem::Coefficient &, mfem::Array<int> &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:379:9
    t.method("ProjectCoefficient", [](mfem::GridFunction& a, mfem::Coefficient & arg0, mfem::Array<int> & arg1)->void { a.ProjectCoefficient(arg0, arg1); });
    t.method("ProjectCoefficient", [](mfem::GridFunction& a, mfem::Coefficient & arg0, mfem::Array<int> & arg1, int arg2)->void { a.ProjectCoefficient(arg0, arg1, arg2); });
    t.method("ProjectCoefficient", [](mfem::GridFunction* a, mfem::Coefficient & arg0, mfem::Array<int> & arg1)->void { a->ProjectCoefficient(arg0, arg1); });
    t.method("ProjectCoefficient", [](mfem::GridFunction* a, mfem::Coefficient & arg0, mfem::Array<int> & arg1, int arg2)->void { a->ProjectCoefficient(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectCoefficient(mfem::VectorCoefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectCoefficient(mfem::VectorCoefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:385:9
    t.method("ProjectCoefficient", [](mfem::GridFunction& a, mfem::VectorCoefficient & arg0)->void { a.ProjectCoefficient(arg0); });
    t.method("ProjectCoefficient", [](mfem::GridFunction* a, mfem::VectorCoefficient & arg0)->void { a->ProjectCoefficient(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectCoefficient(mfem::VectorCoefficient &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectCoefficient(mfem::VectorCoefficient &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:390:9
    t.method("ProjectCoefficient", [](mfem::GridFunction& a, mfem::VectorCoefficient & arg0, mfem::Array<int> & arg1)->void { a.ProjectCoefficient(arg0, arg1); });
    t.method("ProjectCoefficient", [](mfem::GridFunction* a, mfem::VectorCoefficient & arg0, mfem::Array<int> & arg1)->void { a->ProjectCoefficient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectCoefficient(mfem::VectorCoefficient &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectCoefficient(mfem::VectorCoefficient &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:394:9
    t.method("ProjectCoefficient", [](mfem::GridFunction& a, mfem::VectorCoefficient & arg0, int arg1)->void { a.ProjectCoefficient(arg0, arg1); });
    t.method("ProjectCoefficient", [](mfem::GridFunction* a, mfem::VectorCoefficient & arg0, int arg1)->void { a->ProjectCoefficient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectDiscCoefficient(mfem::VectorCoefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectDiscCoefficient(mfem::VectorCoefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:403:17
    t.method("ProjectDiscCoefficient", [](mfem::GridFunction& a, mfem::VectorCoefficient & arg0)->void { a.ProjectDiscCoefficient(arg0); });
    t.method("ProjectDiscCoefficient", [](mfem::GridFunction* a, mfem::VectorCoefficient & arg0)->void { a->ProjectDiscCoefficient(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectDiscCoefficient(mfem::Coefficient &, mfem::GridFunction::AvgType) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectDiscCoefficient(mfem::Coefficient &, mfem::GridFunction::AvgType)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:408:17
    t.method("ProjectDiscCoefficient", [](mfem::GridFunction& a, mfem::Coefficient & arg0, mfem::GridFunction::AvgType arg1)->void { a.ProjectDiscCoefficient(arg0, arg1); });
    t.method("ProjectDiscCoefficient", [](mfem::GridFunction* a, mfem::Coefficient & arg0, mfem::GridFunction::AvgType arg1)->void { a->ProjectDiscCoefficient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectDiscCoefficient(mfem::VectorCoefficient &, mfem::GridFunction::AvgType) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectDiscCoefficient(mfem::VectorCoefficient &, mfem::GridFunction::AvgType)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:412:17
    t.method("ProjectDiscCoefficient", [](mfem::GridFunction& a, mfem::VectorCoefficient & arg0, mfem::GridFunction::AvgType arg1)->void { a.ProjectDiscCoefficient(arg0, arg1); });
    t.method("ProjectDiscCoefficient", [](mfem::GridFunction* a, mfem::VectorCoefficient & arg0, mfem::GridFunction::AvgType arg1)->void { a->ProjectDiscCoefficient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectBdrCoefficient(mfem::Coefficient &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectBdrCoefficient(mfem::Coefficient &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:447:9
    t.method("ProjectBdrCoefficient", [](mfem::GridFunction& a, mfem::Coefficient & arg0, mfem::Array<int> & arg1)->void { a.ProjectBdrCoefficient(arg0, arg1); });
    t.method("ProjectBdrCoefficient", [](mfem::GridFunction* a, mfem::Coefficient & arg0, mfem::Array<int> & arg1)->void { a->ProjectBdrCoefficient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectBdrCoefficient(mfem::VectorCoefficient &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectBdrCoefficient(mfem::VectorCoefficient &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:456:17
    t.method("ProjectBdrCoefficient", [](mfem::GridFunction& a, mfem::VectorCoefficient & arg0, mfem::Array<int> & arg1)->void { a.ProjectBdrCoefficient(arg0, arg1); });
    t.method("ProjectBdrCoefficient", [](mfem::GridFunction* a, mfem::VectorCoefficient & arg0, mfem::Array<int> & arg1)->void { a->ProjectBdrCoefficient(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectBdrCoefficientNormal(mfem::VectorCoefficient &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectBdrCoefficientNormal(mfem::VectorCoefficient &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:469:9
    t.method("ProjectBdrCoefficientNormal", [](mfem::GridFunction& a, mfem::VectorCoefficient & arg0, mfem::Array<int> & arg1)->void { a.ProjectBdrCoefficientNormal(arg0, arg1); });
    t.method("ProjectBdrCoefficientNormal", [](mfem::GridFunction* a, mfem::VectorCoefficient & arg0, mfem::Array<int> & arg1)->void { a->ProjectBdrCoefficientNormal(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ProjectBdrCoefficientTangent(mfem::VectorCoefficient &, mfem::Array<int> &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ProjectBdrCoefficientTangent(mfem::VectorCoefficient &, mfem::Array<int> &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:475:17
    t.method("ProjectBdrCoefficientTangent", [](mfem::GridFunction& a, mfem::VectorCoefficient & arg0, mfem::Array<int> & arg1)->void { a.ProjectBdrCoefficientTangent(arg0, arg1); });
    t.method("ProjectBdrCoefficientTangent", [](mfem::GridFunction* a, mfem::VectorCoefficient & arg0, mfem::Array<int> & arg1)->void { a->ProjectBdrCoefficientTangent(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double mfem::GridFunction::ComputeH1Error(mfem::Coefficient *, mfem::VectorCoefficient *, mfem::Coefficient *, double, int) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::GridFunction::ComputeH1Error(mfem::Coefficient *, mfem::VectorCoefficient *, mfem::Coefficient *, double, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:524:19
    t.method("ComputeH1Error", [](mfem::GridFunction const& a, mfem::Coefficient * arg0, mfem::VectorCoefficient * arg1, mfem::Coefficient * arg2, double arg3, int arg4)->double { return a.ComputeH1Error(arg0, arg1, arg2, arg3, arg4); });
    t.method("ComputeH1Error", [](mfem::GridFunction const* a, mfem::Coefficient * arg0, mfem::VectorCoefficient * arg1, mfem::Coefficient * arg2, double arg3, int arg4)->double { return a->ComputeH1Error(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::ComputeFlux(mfem::BilinearFormIntegrator &, mfem::GridFunction &, bool, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::ComputeFlux(mfem::BilinearFormIntegrator &, mfem::GridFunction &, bool, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:637:17
    t.method("ComputeFlux", [](mfem::GridFunction& a, mfem::BilinearFormIntegrator & arg0, mfem::GridFunction & arg1)->void { a.ComputeFlux(arg0, arg1); });
    t.method("ComputeFlux", [](mfem::GridFunction& a, mfem::BilinearFormIntegrator & arg0, mfem::GridFunction & arg1, bool arg2)->void { a.ComputeFlux(arg0, arg1, arg2); });
    t.method("ComputeFlux", [](mfem::GridFunction& a, mfem::BilinearFormIntegrator & arg0, mfem::GridFunction & arg1, bool arg2, int arg3)->void { a.ComputeFlux(arg0, arg1, arg2, arg3); });
    t.method("ComputeFlux", [](mfem::GridFunction* a, mfem::BilinearFormIntegrator & arg0, mfem::GridFunction & arg1)->void { a->ComputeFlux(arg0, arg1); });
    t.method("ComputeFlux", [](mfem::GridFunction* a, mfem::BilinearFormIntegrator & arg0, mfem::GridFunction & arg1, bool arg2)->void { a->ComputeFlux(arg0, arg1, arg2); });
    t.method("ComputeFlux", [](mfem::GridFunction* a, mfem::BilinearFormIntegrator & arg0, mfem::GridFunction & arg1, bool arg2, int arg3)->void { a->ComputeFlux(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for mfem::GridFunction & mfem::GridFunction::operator=(double) (" __HERE__ ")");
    // signature to use in the veto list: mfem::GridFunction & mfem::GridFunction::operator=(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:642:18
    t.method("assign", [](mfem::GridFunction& a, double arg0)->mfem::GridFunction & { return a.operator=(arg0); });
    t.method("assign", [](mfem::GridFunction* a, double arg0)->mfem::GridFunction & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::GridFunction & mfem::GridFunction::operator=(const mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: mfem::GridFunction & mfem::GridFunction::operator=(const mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:647:18
    t.method("assign", [](mfem::GridFunction& a, const mfem::Vector & arg0)->mfem::GridFunction & { return a.operator=(arg0); });
    t.method("assign", [](mfem::GridFunction* a, const mfem::Vector & arg0)->mfem::GridFunction & { return a->operator=(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::Update() (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::Update()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:650:17
    t.method("Update", [](mfem::GridFunction& a)->void { a.Update(); });
    t.method("Update", [](mfem::GridFunction* a)->void { a->Update(); });

    DEBUG_MSG("Adding wrapper for mfem::FiniteElementSpace * mfem::GridFunction::FESpace() (" __HERE__ ")");
    // signature to use in the veto list: mfem::FiniteElementSpace * mfem::GridFunction::FESpace()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:652:24
    t.method("FESpace", [](mfem::GridFunction& a)->mfem::FiniteElementSpace * { return a.FESpace(); });
    t.method("FESpace", [](mfem::GridFunction* a)->mfem::FiniteElementSpace * { return a->FESpace(); });

    DEBUG_MSG("Adding wrapper for const mfem::FiniteElementSpace * mfem::GridFunction::FESpace() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::FiniteElementSpace * mfem::GridFunction::FESpace()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:653:30
    t.method("FESpace", [](mfem::GridFunction const& a)->const mfem::FiniteElementSpace * { return a.FESpace(); });
    t.method("FESpace", [](mfem::GridFunction const* a)->const mfem::FiniteElementSpace * { return a->FESpace(); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::SetSpace(mfem::FiniteElementSpace *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::SetSpace(mfem::FiniteElementSpace *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:657:17
    t.method("SetSpace", [](mfem::GridFunction& a, mfem::FiniteElementSpace * arg0)->void { a.SetSpace(arg0); });
    t.method("SetSpace", [](mfem::GridFunction* a, mfem::FiniteElementSpace * arg0)->void { a->SetSpace(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::MakeRef(mfem::FiniteElementSpace *, double *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::MakeRef(mfem::FiniteElementSpace *, double *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:666:17
    t.method("MakeRef", [](mfem::GridFunction& a, mfem::FiniteElementSpace * arg0, double * arg1)->void { a.MakeRef(arg0, arg1); });
    t.method("MakeRef", [](mfem::GridFunction* a, mfem::FiniteElementSpace * arg0, double * arg1)->void { a->MakeRef(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::MakeRef(mfem::FiniteElementSpace *, mfem::Vector &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::MakeRef(mfem::FiniteElementSpace *, mfem::Vector &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:675:17
    t.method("MakeRef", [](mfem::GridFunction& a, mfem::FiniteElementSpace * arg0, mfem::Vector & arg1, int arg2)->void { a.MakeRef(arg0, arg1, arg2); });
    t.method("MakeRef", [](mfem::GridFunction* a, mfem::FiniteElementSpace * arg0, mfem::Vector & arg1, int arg2)->void { a->MakeRef(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::MakeTRef(mfem::FiniteElementSpace *, double *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::MakeTRef(mfem::FiniteElementSpace *, double *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:684:9
    t.method("MakeTRef", [](mfem::GridFunction& a, mfem::FiniteElementSpace * arg0, double * arg1)->void { a.MakeTRef(arg0, arg1); });
    t.method("MakeTRef", [](mfem::GridFunction* a, mfem::FiniteElementSpace * arg0, double * arg1)->void { a->MakeTRef(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::MakeTRef(mfem::FiniteElementSpace *, mfem::Vector &, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::MakeTRef(mfem::FiniteElementSpace *, mfem::Vector &, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:694:9
    t.method("MakeTRef", [](mfem::GridFunction& a, mfem::FiniteElementSpace * arg0, mfem::Vector & arg1, int arg2)->void { a.MakeTRef(arg0, arg1, arg2); });
    t.method("MakeTRef", [](mfem::GridFunction* a, mfem::FiniteElementSpace * arg0, mfem::Vector & arg1, int arg2)->void { a->MakeTRef(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::GridFunction::Save(const char *, int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::GridFunction::Save(const char *, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/gridfunc.hpp:701:17
    t.method("Save", [](mfem::GridFunction const& a, const char * arg0)->void { a.Save(arg0); });
    t.method("Save", [](mfem::GridFunction const& a, const char * arg0, int arg1)->void { a.Save(arg0, arg1); });
    t.method("Save", [](mfem::GridFunction const* a, const char * arg0)->void { a->Save(arg0); });
    t.method("Save", [](mfem::GridFunction const* a, const char * arg0, int arg1)->void { a->Save(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::GridFunction>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_GridFunction(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_GridFunction(module));
}
