// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::MatrixVectorProductCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::MatrixVectorProductCoefficient> : std::false_type { };
template<> struct SuperType<mfem::MatrixVectorProductCoefficient> { typedef mfem::VectorCoefficient type; };
}

// Class generating the wrapper for type mfem::MatrixVectorProductCoefficient
// signature to use in the veto file: mfem::MatrixVectorProductCoefficient
struct Jlmfem_MatrixVectorProductCoefficient: public Wrapper {

  Jlmfem_MatrixVectorProductCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::MatrixVectorProductCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1758:7
    jlcxx::TypeWrapper<mfem::MatrixVectorProductCoefficient>  t = jlModule.add_type<mfem::MatrixVectorProductCoefficient>("mfem!MatrixVectorProductCoefficient",
      jlcxx::julia_base_type<mfem::VectorCoefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::MatrixVectorProductCoefficient>>(new jlcxx::TypeWrapper<mfem::MatrixVectorProductCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::MatrixVectorProductCoefficient::MatrixVectorProductCoefficient(mfem::MatrixCoefficient &, mfem::VectorCoefficient &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1769:4
    t.constructor<mfem::MatrixCoefficient &, mfem::VectorCoefficient &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::MatrixVectorProductCoefficient::SetTime(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::MatrixVectorProductCoefficient::SetTime(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1772:9
    t.method("SetTime", [](mfem::MatrixVectorProductCoefficient& a, double arg0)->void { a.SetTime(arg0); });
    t.method("SetTime", [](mfem::MatrixVectorProductCoefficient* a, double arg0)->void { a->SetTime(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::MatrixVectorProductCoefficient::SetACoef(mfem::MatrixCoefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::MatrixVectorProductCoefficient::SetACoef(mfem::MatrixCoefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1775:9
    t.method("SetACoef", [](mfem::MatrixVectorProductCoefficient& a, mfem::MatrixCoefficient & arg0)->void { a.SetACoef(arg0); });
    t.method("SetACoef", [](mfem::MatrixVectorProductCoefficient* a, mfem::MatrixCoefficient & arg0)->void { a->SetACoef(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::MatrixCoefficient * mfem::MatrixVectorProductCoefficient::GetACoef() (" __HERE__ ")");
    // signature to use in the veto list: mfem::MatrixCoefficient * mfem::MatrixVectorProductCoefficient::GetACoef()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1777:24
    t.method("GetACoef", [](mfem::MatrixVectorProductCoefficient const& a)->mfem::MatrixCoefficient * { return a.GetACoef(); });
    t.method("GetACoef", [](mfem::MatrixVectorProductCoefficient const* a)->mfem::MatrixCoefficient * { return a->GetACoef(); });

    DEBUG_MSG("Adding wrapper for void mfem::MatrixVectorProductCoefficient::SetBCoef(mfem::VectorCoefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::MatrixVectorProductCoefficient::SetBCoef(mfem::VectorCoefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1780:9
    t.method("SetBCoef", [](mfem::MatrixVectorProductCoefficient& a, mfem::VectorCoefficient & arg0)->void { a.SetBCoef(arg0); });
    t.method("SetBCoef", [](mfem::MatrixVectorProductCoefficient* a, mfem::VectorCoefficient & arg0)->void { a->SetBCoef(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::VectorCoefficient * mfem::MatrixVectorProductCoefficient::GetBCoef() (" __HERE__ ")");
    // signature to use in the veto list: mfem::VectorCoefficient * mfem::MatrixVectorProductCoefficient::GetBCoef()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1782:24
    t.method("GetBCoef", [](mfem::MatrixVectorProductCoefficient const& a)->mfem::VectorCoefficient * { return a.GetBCoef(); });
    t.method("GetBCoef", [](mfem::MatrixVectorProductCoefficient const* a)->mfem::VectorCoefficient * { return a->GetBCoef(); });

    DEBUG_MSG("Adding wrapper for void mfem::MatrixVectorProductCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::MatrixVectorProductCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1785:17
    t.method("Eval", [](mfem::MatrixVectorProductCoefficient& a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::MatrixVectorProductCoefficient* a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->Eval(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::MatrixVectorProductCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_MatrixVectorProductCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_MatrixVectorProductCoefficient(module));
}
