// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::VectorCrossProductCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::VectorCrossProductCoefficient> : std::false_type { };
template<> struct SuperType<mfem::VectorCrossProductCoefficient> { typedef mfem::VectorCoefficient type; };
}

// Class generating the wrapper for type mfem::VectorCrossProductCoefficient
// signature to use in the veto file: mfem::VectorCrossProductCoefficient
struct Jlmfem_VectorCrossProductCoefficient: public Wrapper {

  Jlmfem_VectorCrossProductCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::VectorCrossProductCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1724:7
    jlcxx::TypeWrapper<mfem::VectorCrossProductCoefficient>  t = jlModule.add_type<mfem::VectorCrossProductCoefficient>("mfem!VectorCrossProductCoefficient",
      jlcxx::julia_base_type<mfem::VectorCoefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorCrossProductCoefficient>>(new jlcxx::TypeWrapper<mfem::VectorCrossProductCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::VectorCrossProductCoefficient::VectorCrossProductCoefficient(mfem::VectorCoefficient &, mfem::VectorCoefficient &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1735:4
    t.constructor<mfem::VectorCoefficient &, mfem::VectorCoefficient &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::VectorCrossProductCoefficient::SetTime(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorCrossProductCoefficient::SetTime(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1738:9
    t.method("SetTime", [](mfem::VectorCrossProductCoefficient& a, double arg0)->void { a.SetTime(arg0); });
    t.method("SetTime", [](mfem::VectorCrossProductCoefficient* a, double arg0)->void { a->SetTime(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorCrossProductCoefficient::SetACoef(mfem::VectorCoefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorCrossProductCoefficient::SetACoef(mfem::VectorCoefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1741:9
    t.method("SetACoef", [](mfem::VectorCrossProductCoefficient& a, mfem::VectorCoefficient & arg0)->void { a.SetACoef(arg0); });
    t.method("SetACoef", [](mfem::VectorCrossProductCoefficient* a, mfem::VectorCoefficient & arg0)->void { a->SetACoef(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::VectorCoefficient * mfem::VectorCrossProductCoefficient::GetACoef() (" __HERE__ ")");
    // signature to use in the veto list: mfem::VectorCoefficient * mfem::VectorCrossProductCoefficient::GetACoef()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1743:24
    t.method("GetACoef", [](mfem::VectorCrossProductCoefficient const& a)->mfem::VectorCoefficient * { return a.GetACoef(); });
    t.method("GetACoef", [](mfem::VectorCrossProductCoefficient const* a)->mfem::VectorCoefficient * { return a->GetACoef(); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorCrossProductCoefficient::SetBCoef(mfem::VectorCoefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorCrossProductCoefficient::SetBCoef(mfem::VectorCoefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1746:9
    t.method("SetBCoef", [](mfem::VectorCrossProductCoefficient& a, mfem::VectorCoefficient & arg0)->void { a.SetBCoef(arg0); });
    t.method("SetBCoef", [](mfem::VectorCrossProductCoefficient* a, mfem::VectorCoefficient & arg0)->void { a->SetBCoef(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::VectorCoefficient * mfem::VectorCrossProductCoefficient::GetBCoef() (" __HERE__ ")");
    // signature to use in the veto list: mfem::VectorCoefficient * mfem::VectorCrossProductCoefficient::GetBCoef()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1748:24
    t.method("GetBCoef", [](mfem::VectorCrossProductCoefficient const& a)->mfem::VectorCoefficient * { return a.GetBCoef(); });
    t.method("GetBCoef", [](mfem::VectorCrossProductCoefficient const* a)->mfem::VectorCoefficient * { return a->GetBCoef(); });

    DEBUG_MSG("Adding wrapper for void mfem::VectorCrossProductCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorCrossProductCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1751:17
    t.method("Eval", [](mfem::VectorCrossProductCoefficient& a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::VectorCrossProductCoefficient* a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->Eval(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorCrossProductCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_VectorCrossProductCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_VectorCrossProductCoefficient(module));
}
