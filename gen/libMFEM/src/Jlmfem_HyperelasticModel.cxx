// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::HyperelasticModel> : std::false_type { };
  template<> struct DefaultConstructible<mfem::HyperelasticModel> : std::false_type { };
}

// Class generating the wrapper for type mfem::HyperelasticModel
// signature to use in the veto file: mfem::HyperelasticModel
struct Jlmfem_HyperelasticModel: public Wrapper {

  Jlmfem_HyperelasticModel(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::HyperelasticModel (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:193:7
    jlcxx::TypeWrapper<mfem::HyperelasticModel>  t = jlModule.add_type<mfem::HyperelasticModel>("mfem!HyperelasticModel");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::HyperelasticModel>>(new jlcxx::TypeWrapper<mfem::HyperelasticModel>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for void mfem::HyperelasticModel::SetTransformation(mfem::ElementTransformation &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::HyperelasticModel::SetTransformation(mfem::ElementTransformation &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:207:9
    t.method("SetTransformation", [](mfem::HyperelasticModel& a, mfem::ElementTransformation & arg0)->void { a.SetTransformation(arg0); });
    t.method("SetTransformation", [](mfem::HyperelasticModel* a, mfem::ElementTransformation & arg0)->void { a->SetTransformation(arg0); });

    DEBUG_MSG("Adding wrapper for double mfem::HyperelasticModel::EvalW(const mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::HyperelasticModel::EvalW(const mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:212:19
    t.method("EvalW", [](mfem::HyperelasticModel const& a, const mfem::DenseMatrix & arg0)->double { return a.EvalW(arg0); });
    t.method("EvalW", [](mfem::HyperelasticModel const* a, const mfem::DenseMatrix & arg0)->double { return a->EvalW(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::HyperelasticModel::EvalP(const mfem::DenseMatrix &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::HyperelasticModel::EvalP(const mfem::DenseMatrix &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:218:17
    t.method("EvalP", [](mfem::HyperelasticModel const& a, const mfem::DenseMatrix & arg0, mfem::DenseMatrix & arg1)->void { a.EvalP(arg0, arg1); });
    t.method("EvalP", [](mfem::HyperelasticModel const* a, const mfem::DenseMatrix & arg0, mfem::DenseMatrix & arg1)->void { a->EvalP(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::HyperelasticModel::AssembleH(const mfem::DenseMatrix &, const mfem::DenseMatrix &, const double, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::HyperelasticModel::AssembleH(const mfem::DenseMatrix &, const mfem::DenseMatrix &, const double, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:233:17
    t.method("AssembleH", [](mfem::HyperelasticModel const& a, const mfem::DenseMatrix & arg0, const mfem::DenseMatrix & arg1, const double arg2, mfem::DenseMatrix & arg3)->void { a.AssembleH(arg0, arg1, arg2, arg3); });
    t.method("AssembleH", [](mfem::HyperelasticModel const* a, const mfem::DenseMatrix & arg0, const mfem::DenseMatrix & arg1, const double arg2, mfem::DenseMatrix & arg3)->void { a->AssembleH(arg0, arg1, arg2, arg3); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::HyperelasticModel>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_HyperelasticModel(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_HyperelasticModel(module));
}
