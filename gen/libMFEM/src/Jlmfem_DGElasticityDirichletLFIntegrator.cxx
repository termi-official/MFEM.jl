// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::DGElasticityDirichletLFIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::DGElasticityDirichletLFIntegrator> : std::false_type { };
template<> struct SuperType<mfem::DGElasticityDirichletLFIntegrator> { typedef mfem::LinearFormIntegrator type; };
}

// Class generating the wrapper for type mfem::DGElasticityDirichletLFIntegrator
// signature to use in the veto file: mfem::DGElasticityDirichletLFIntegrator
struct Jlmfem_DGElasticityDirichletLFIntegrator: public Wrapper {

  Jlmfem_DGElasticityDirichletLFIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::DGElasticityDirichletLFIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/lininteg.hpp:486:7
    jlcxx::TypeWrapper<mfem::DGElasticityDirichletLFIntegrator>  t = jlModule.add_type<mfem::DGElasticityDirichletLFIntegrator>("mfem!DGElasticityDirichletLFIntegrator",
      jlcxx::julia_base_type<mfem::LinearFormIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::DGElasticityDirichletLFIntegrator>>(new jlcxx::TypeWrapper<mfem::DGElasticityDirichletLFIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::DGElasticityDirichletLFIntegrator::DGElasticityDirichletLFIntegrator(mfem::VectorCoefficient &, mfem::Coefficient &, mfem::Coefficient &, double, double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/lininteg.hpp:505:4
    t.constructor<mfem::VectorCoefficient &, mfem::Coefficient &, mfem::Coefficient &, double, double>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::DGElasticityDirichletLFIntegrator::AssembleRHSElementVect(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DGElasticityDirichletLFIntegrator::AssembleRHSElementVect(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/lininteg.hpp:510:17
    t.method("AssembleRHSElementVect", [](mfem::DGElasticityDirichletLFIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2)->void { a.AssembleRHSElementVect(arg0, arg1, arg2); });
    t.method("AssembleRHSElementVect", [](mfem::DGElasticityDirichletLFIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2)->void { a->AssembleRHSElementVect(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::DGElasticityDirichletLFIntegrator::AssembleRHSElementVect(const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DGElasticityDirichletLFIntegrator::AssembleRHSElementVect(const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/lininteg.hpp:513:17
    t.method("AssembleRHSElementVect", [](mfem::DGElasticityDirichletLFIntegrator& a, const mfem::FiniteElement & arg0, mfem::FaceElementTransformations & arg1, mfem::Vector & arg2)->void { a.AssembleRHSElementVect(arg0, arg1, arg2); });
    t.method("AssembleRHSElementVect", [](mfem::DGElasticityDirichletLFIntegrator* a, const mfem::FiniteElement & arg0, mfem::FaceElementTransformations & arg1, mfem::Vector & arg2)->void { a->AssembleRHSElementVect(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::DGElasticityDirichletLFIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_DGElasticityDirichletLFIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_DGElasticityDirichletLFIntegrator(module));
}
