// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::DeterminantCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::DeterminantCoefficient> : std::false_type { };
template<> struct SuperType<mfem::DeterminantCoefficient> { typedef mfem::Coefficient type; };
}

// Class generating the wrapper for type mfem::DeterminantCoefficient
// signature to use in the veto file: mfem::DeterminantCoefficient
struct Jlmfem_DeterminantCoefficient: public Wrapper {

  Jlmfem_DeterminantCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::DeterminantCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1547:7
    jlcxx::TypeWrapper<mfem::DeterminantCoefficient>  t = jlModule.add_type<mfem::DeterminantCoefficient>("mfem!DeterminantCoefficient",
      jlcxx::julia_base_type<mfem::Coefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::DeterminantCoefficient>>(new jlcxx::TypeWrapper<mfem::DeterminantCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::DeterminantCoefficient::DeterminantCoefficient(mfem::MatrixCoefficient &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1556:4
    t.constructor<mfem::MatrixCoefficient &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::DeterminantCoefficient::SetTime(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DeterminantCoefficient::SetTime(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1559:9
    t.method("SetTime", [](mfem::DeterminantCoefficient& a, double arg0)->void { a.SetTime(arg0); });
    t.method("SetTime", [](mfem::DeterminantCoefficient* a, double arg0)->void { a->SetTime(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::DeterminantCoefficient::SetACoef(mfem::MatrixCoefficient &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DeterminantCoefficient::SetACoef(mfem::MatrixCoefficient &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1562:9
    t.method("SetACoef", [](mfem::DeterminantCoefficient& a, mfem::MatrixCoefficient & arg0)->void { a.SetACoef(arg0); });
    t.method("SetACoef", [](mfem::DeterminantCoefficient* a, mfem::MatrixCoefficient & arg0)->void { a->SetACoef(arg0); });

    DEBUG_MSG("Adding wrapper for mfem::MatrixCoefficient * mfem::DeterminantCoefficient::GetACoef() (" __HERE__ ")");
    // signature to use in the veto list: mfem::MatrixCoefficient * mfem::DeterminantCoefficient::GetACoef()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1564:24
    t.method("GetACoef", [](mfem::DeterminantCoefficient const& a)->mfem::MatrixCoefficient * { return a.GetACoef(); });
    t.method("GetACoef", [](mfem::DeterminantCoefficient const* a)->mfem::MatrixCoefficient * { return a->GetACoef(); });

    DEBUG_MSG("Adding wrapper for double mfem::DeterminantCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::DeterminantCoefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1567:19
    t.method("Eval", [](mfem::DeterminantCoefficient& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a.Eval(arg0, arg1); });
    t.method("Eval", [](mfem::DeterminantCoefficient* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a->Eval(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::DeterminantCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_DeterminantCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_DeterminantCoefficient(module));
}
