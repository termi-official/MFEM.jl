// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::PowerMethod> : std::false_type { };
  template<> struct DefaultConstructible<mfem::PowerMethod> : std::false_type { };
}

// Class generating the wrapper for type mfem::PowerMethod
// signature to use in the veto file: mfem::PowerMethod
struct Jlmfem_PowerMethod: public Wrapper {

  Jlmfem_PowerMethod(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::PowerMethod (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:953:7
    jlcxx::TypeWrapper<mfem::PowerMethod>  t = jlModule.add_type<mfem::PowerMethod>("mfem!PowerMethod");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::PowerMethod>>(new jlcxx::TypeWrapper<mfem::PowerMethod>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for double mfem::PowerMethod::EstimateLargestEigenvalue(mfem::Operator &, mfem::Vector &, int, double, int) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::PowerMethod::EstimateLargestEigenvalue(mfem::Operator &, mfem::Vector &, int, double, int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/operator.hpp:979:11
    t.method("EstimateLargestEigenvalue", [](mfem::PowerMethod& a, mfem::Operator & arg0, mfem::Vector & arg1)->double { return a.EstimateLargestEigenvalue(arg0, arg1); });
    t.method("EstimateLargestEigenvalue", [](mfem::PowerMethod& a, mfem::Operator & arg0, mfem::Vector & arg1, int arg2)->double { return a.EstimateLargestEigenvalue(arg0, arg1, arg2); });
    t.method("EstimateLargestEigenvalue", [](mfem::PowerMethod& a, mfem::Operator & arg0, mfem::Vector & arg1, int arg2, double arg3)->double { return a.EstimateLargestEigenvalue(arg0, arg1, arg2, arg3); });
    t.method("EstimateLargestEigenvalue", [](mfem::PowerMethod& a, mfem::Operator & arg0, mfem::Vector & arg1, int arg2, double arg3, int arg4)->double { return a.EstimateLargestEigenvalue(arg0, arg1, arg2, arg3, arg4); });
    t.method("EstimateLargestEigenvalue", [](mfem::PowerMethod* a, mfem::Operator & arg0, mfem::Vector & arg1)->double { return a->EstimateLargestEigenvalue(arg0, arg1); });
    t.method("EstimateLargestEigenvalue", [](mfem::PowerMethod* a, mfem::Operator & arg0, mfem::Vector & arg1, int arg2)->double { return a->EstimateLargestEigenvalue(arg0, arg1, arg2); });
    t.method("EstimateLargestEigenvalue", [](mfem::PowerMethod* a, mfem::Operator & arg0, mfem::Vector & arg1, int arg2, double arg3)->double { return a->EstimateLargestEigenvalue(arg0, arg1, arg2, arg3); });
    t.method("EstimateLargestEigenvalue", [](mfem::PowerMethod* a, mfem::Operator & arg0, mfem::Vector & arg1, int arg2, double arg3, int arg4)->double { return a->EstimateLargestEigenvalue(arg0, arg1, arg2, arg3, arg4); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::PowerMethod>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_PowerMethod(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_PowerMethod(module));
}
