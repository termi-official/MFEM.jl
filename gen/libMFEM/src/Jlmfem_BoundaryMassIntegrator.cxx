// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::BoundaryMassIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::BoundaryMassIntegrator> : std::false_type { };
template<> struct SuperType<mfem::BoundaryMassIntegrator> { typedef mfem::MassIntegrator type; };
}

// Class generating the wrapper for type mfem::BoundaryMassIntegrator
// signature to use in the veto file: mfem::BoundaryMassIntegrator
struct Jlmfem_BoundaryMassIntegrator: public Wrapper {

  Jlmfem_BoundaryMassIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::BoundaryMassIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2229:7
    jlcxx::TypeWrapper<mfem::BoundaryMassIntegrator>  t = jlModule.add_type<mfem::BoundaryMassIntegrator>("mfem!BoundaryMassIntegrator",
      jlcxx::julia_base_type<mfem::MassIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::BoundaryMassIntegrator>>(new jlcxx::TypeWrapper<mfem::BoundaryMassIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::BoundaryMassIntegrator::BoundaryMassIntegrator(mfem::Coefficient &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2232:4
    t.constructor<mfem::Coefficient &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::BoundaryMassIntegrator::AssembleFaceMatrix(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::BoundaryMassIntegrator::AssembleFaceMatrix(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2236:17
    t.method("AssembleFaceMatrix", [](mfem::BoundaryMassIntegrator& a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::FaceElementTransformations & arg2, mfem::DenseMatrix & arg3)->void { a.AssembleFaceMatrix(arg0, arg1, arg2, arg3); });
    t.method("AssembleFaceMatrix", [](mfem::BoundaryMassIntegrator* a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::FaceElementTransformations & arg2, mfem::DenseMatrix & arg3)->void { a->AssembleFaceMatrix(arg0, arg1, arg2, arg3); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::BoundaryMassIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_BoundaryMassIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_BoundaryMassIntegrator(module));
}
