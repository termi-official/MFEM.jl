// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::ceed::Operator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::ceed::Operator> : std::false_type { };
template<> struct SuperType<mfem::ceed::Operator> { typedef mfem::Operator type; };
}

// Class generating the wrapper for type mfem::ceed::Operator
// signature to use in the veto file: mfem::ceed::Operator
struct Jlmfem_ceed_Operator: public Wrapper {

  Jlmfem_ceed_Operator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::ceed::Operator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/ceed/operator.hpp:25:7
    jlcxx::TypeWrapper<mfem::ceed::Operator>  t = jlModule.add_type<mfem::ceed::Operator>("mfem!ceed!Operator",
      jlcxx::julia_base_type<mfem::Operator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::ceed::Operator>>(new jlcxx::TypeWrapper<mfem::ceed::Operator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::ceed::Operator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_ceed_Operator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_ceed_Operator(module));
}
