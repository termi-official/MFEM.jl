// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::VectorConstantCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::VectorConstantCoefficient> : std::false_type { };
template<> struct SuperType<mfem::VectorConstantCoefficient> { typedef mfem::VectorCoefficient type; };
}

// Class generating the wrapper for type mfem::VectorConstantCoefficient
// signature to use in the veto file: mfem::VectorConstantCoefficient
struct Jlmfem_VectorConstantCoefficient: public Wrapper {

  Jlmfem_VectorConstantCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::VectorConstantCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:479:7
    jlcxx::TypeWrapper<mfem::VectorConstantCoefficient>  t = jlModule.add_type<mfem::VectorConstantCoefficient>("mfem!VectorConstantCoefficient",
      jlcxx::julia_base_type<mfem::VectorCoefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorConstantCoefficient>>(new jlcxx::TypeWrapper<mfem::VectorConstantCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::VectorConstantCoefficient::VectorConstantCoefficient(const mfem::Vector &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:485:4
    t.constructor<const mfem::Vector &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::VectorConstantCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::VectorConstantCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:490:17
    t.method("Eval", [](mfem::VectorConstantCoefficient& a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::VectorConstantCoefficient* a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->Eval(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for const mfem::Vector & mfem::VectorConstantCoefficient::GetVec() (" __HERE__ ")");
    // signature to use in the veto list: const mfem::Vector & mfem::VectorConstantCoefficient::GetVec()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:494:18
    t.method("GetVec", [](mfem::VectorConstantCoefficient& a)->const mfem::Vector & { return a.GetVec(); });
    t.method("GetVec", [](mfem::VectorConstantCoefficient* a)->const mfem::Vector & { return a->GetVec(); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::VectorConstantCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_VectorConstantCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_VectorConstantCoefficient(module));
}
