// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::NeoHookeanModel> : std::false_type { };
  template<> struct DefaultConstructible<mfem::NeoHookeanModel> : std::false_type { };
template<> struct SuperType<mfem::NeoHookeanModel> { typedef mfem::HyperelasticModel type; };
}

// Class generating the wrapper for type mfem::NeoHookeanModel
// signature to use in the veto file: mfem::NeoHookeanModel
struct Jlmfem_NeoHookeanModel: public Wrapper {

  Jlmfem_NeoHookeanModel(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::NeoHookeanModel (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:262:7
    jlcxx::TypeWrapper<mfem::NeoHookeanModel>  t = jlModule.add_type<mfem::NeoHookeanModel>("mfem!NeoHookeanModel",
      jlcxx::julia_base_type<mfem::HyperelasticModel>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::NeoHookeanModel>>(new jlcxx::TypeWrapper<mfem::NeoHookeanModel>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::NeoHookeanModel::NeoHookeanModel(double, double, double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:275:4
    t.constructor<double, double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<double, double, double>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::NeoHookeanModel::NeoHookeanModel(mfem::Coefficient &, mfem::Coefficient &, mfem::Coefficient *) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:278:4
    t.constructor<mfem::Coefficient &, mfem::Coefficient &>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<mfem::Coefficient &, mfem::Coefficient &, mfem::Coefficient *>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for double mfem::NeoHookeanModel::EvalW(const mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::NeoHookeanModel::EvalW(const mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:282:19
    t.method("EvalW", [](mfem::NeoHookeanModel const& a, const mfem::DenseMatrix & arg0)->double { return a.EvalW(arg0); });
    t.method("EvalW", [](mfem::NeoHookeanModel const* a, const mfem::DenseMatrix & arg0)->double { return a->EvalW(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::NeoHookeanModel::EvalP(const mfem::DenseMatrix &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::NeoHookeanModel::EvalP(const mfem::DenseMatrix &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:284:17
    t.method("EvalP", [](mfem::NeoHookeanModel const& a, const mfem::DenseMatrix & arg0, mfem::DenseMatrix & arg1)->void { a.EvalP(arg0, arg1); });
    t.method("EvalP", [](mfem::NeoHookeanModel const* a, const mfem::DenseMatrix & arg0, mfem::DenseMatrix & arg1)->void { a->EvalP(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::NeoHookeanModel::AssembleH(const mfem::DenseMatrix &, const mfem::DenseMatrix &, const double, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::NeoHookeanModel::AssembleH(const mfem::DenseMatrix &, const mfem::DenseMatrix &, const double, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/nonlininteg.hpp:286:17
    t.method("AssembleH", [](mfem::NeoHookeanModel const& a, const mfem::DenseMatrix & arg0, const mfem::DenseMatrix & arg1, const double arg2, mfem::DenseMatrix & arg3)->void { a.AssembleH(arg0, arg1, arg2, arg3); });
    t.method("AssembleH", [](mfem::NeoHookeanModel const* a, const mfem::DenseMatrix & arg0, const mfem::DenseMatrix & arg1, const double arg2, mfem::DenseMatrix & arg3)->void { a->AssembleH(arg0, arg1, arg2, arg3); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::NeoHookeanModel>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_NeoHookeanModel(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_NeoHookeanModel(module));
}
