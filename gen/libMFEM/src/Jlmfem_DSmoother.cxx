// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::DSmoother> : std::false_type { };
  template<> struct DefaultConstructible<mfem::DSmoother> : std::false_type { };
template<> struct SuperType<mfem::DSmoother> { typedef mfem::SparseSmoother type; };
}

// Class generating the wrapper for type mfem::DSmoother
// signature to use in the veto file: mfem::DSmoother
struct Jlmfem_DSmoother: public Wrapper {

  Jlmfem_DSmoother(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::DSmoother (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsesmoothers.hpp:55:7
    jlcxx::TypeWrapper<mfem::DSmoother>  t = jlModule.add_type<mfem::DSmoother>("mfem!DSmoother",
      jlcxx::julia_base_type<mfem::SparseSmoother>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::DSmoother>>(new jlcxx::TypeWrapper<mfem::DSmoother>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::DSmoother::DSmoother(int, double, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsesmoothers.hpp:68:4
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<int, double, int>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::DSmoother::DSmoother(const mfem::SparseMatrix &, int, double, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsesmoothers.hpp:72:4
    t.constructor<const mfem::SparseMatrix &>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const mfem::SparseMatrix &, int>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const mfem::SparseMatrix &, int, double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const mfem::SparseMatrix &, int, double, int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::DSmoother::SetPositiveDiagonal(bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DSmoother::SetPositiveDiagonal(bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsesmoothers.hpp:75:9
    t.method("SetPositiveDiagonal", [](mfem::DSmoother& a)->void { a.SetPositiveDiagonal(); });
    t.method("SetPositiveDiagonal", [](mfem::DSmoother& a, bool arg0)->void { a.SetPositiveDiagonal(arg0); });
    t.method("SetPositiveDiagonal", [](mfem::DSmoother* a)->void { a->SetPositiveDiagonal(); });
    t.method("SetPositiveDiagonal", [](mfem::DSmoother* a, bool arg0)->void { a->SetPositiveDiagonal(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::DSmoother::Mult(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::DSmoother::Mult(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/sparsesmoothers.hpp:78:17
    t.method("Mult", [](mfem::DSmoother const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.Mult(arg0, arg1); });
    t.method("Mult", [](mfem::DSmoother const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->Mult(arg0, arg1); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::DSmoother>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_DSmoother(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_DSmoother(module));
}
