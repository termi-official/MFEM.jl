// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::SymmetricMatrixConstantCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::SymmetricMatrixConstantCoefficient> : std::false_type { };
template<> struct SuperType<mfem::SymmetricMatrixConstantCoefficient> { typedef mfem::SymmetricMatrixCoefficient type; };
}

// Class generating the wrapper for type mfem::SymmetricMatrixConstantCoefficient
// signature to use in the veto file: mfem::SymmetricMatrixConstantCoefficient
struct Jlmfem_SymmetricMatrixConstantCoefficient: public Wrapper {

  Jlmfem_SymmetricMatrixConstantCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::SymmetricMatrixConstantCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1283:7
    jlcxx::TypeWrapper<mfem::SymmetricMatrixConstantCoefficient>  t = jlModule.add_type<mfem::SymmetricMatrixConstantCoefficient>("mfem!SymmetricMatrixConstantCoefficient",
      jlcxx::julia_base_type<mfem::SymmetricMatrixCoefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::SymmetricMatrixConstantCoefficient>>(new jlcxx::TypeWrapper<mfem::SymmetricMatrixConstantCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::SymmetricMatrixConstantCoefficient::SymmetricMatrixConstantCoefficient(const mfem::DenseSymmetricMatrix &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1290:4
    t.constructor<const mfem::DenseSymmetricMatrix &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::SymmetricMatrixConstantCoefficient::Eval(mfem::DenseSymmetricMatrix &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SymmetricMatrixConstantCoefficient::Eval(mfem::DenseSymmetricMatrix &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:1294:17
    t.method("Eval", [](mfem::SymmetricMatrixConstantCoefficient& a, mfem::DenseSymmetricMatrix & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::SymmetricMatrixConstantCoefficient* a, mfem::DenseSymmetricMatrix & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->Eval(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::SymmetricMatrixConstantCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_SymmetricMatrixConstantCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_SymmetricMatrixConstantCoefficient(module));
}
