// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::QuadratureFunctions1D> : std::false_type { };
  template<> struct DefaultConstructible<mfem::QuadratureFunctions1D> : std::false_type { };
}

// Class generating the wrapper for type mfem::QuadratureFunctions1D
// signature to use in the veto file: mfem::QuadratureFunctions1D
struct Jlmfem_QuadratureFunctions1D: public Wrapper {

  Jlmfem_QuadratureFunctions1D(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::QuadratureFunctions1D (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:265:7
    jlcxx::TypeWrapper<mfem::QuadratureFunctions1D>  t = jlModule.add_type<mfem::QuadratureFunctions1D>("mfem!QuadratureFunctions1D");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::QuadratureFunctions1D>>(new jlcxx::TypeWrapper<mfem::QuadratureFunctions1D>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::QuadratureFunctions1D::GaussLegendre(const int, mfem::IntegrationRule *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::QuadratureFunctions1D::GaussLegendre(const int, mfem::IntegrationRule *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:272:16
    module_.method("mfem!QuadratureFunctions1D!GaussLegendre", [](const int arg0, mfem::IntegrationRule * arg1)->void { mfem::QuadratureFunctions1D::GaussLegendre(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::QuadratureFunctions1D::GaussLobatto(const int, mfem::IntegrationRule *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::QuadratureFunctions1D::GaussLobatto(const int, mfem::IntegrationRule *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:273:16
    module_.method("mfem!QuadratureFunctions1D!GaussLobatto", [](const int arg0, mfem::IntegrationRule * arg1)->void { mfem::QuadratureFunctions1D::GaussLobatto(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::QuadratureFunctions1D::OpenUniform(const int, mfem::IntegrationRule *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::QuadratureFunctions1D::OpenUniform(const int, mfem::IntegrationRule *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:274:16
    module_.method("mfem!QuadratureFunctions1D!OpenUniform", [](const int arg0, mfem::IntegrationRule * arg1)->void { mfem::QuadratureFunctions1D::OpenUniform(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::QuadratureFunctions1D::ClosedUniform(const int, mfem::IntegrationRule *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::QuadratureFunctions1D::ClosedUniform(const int, mfem::IntegrationRule *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:275:16
    module_.method("mfem!QuadratureFunctions1D!ClosedUniform", [](const int arg0, mfem::IntegrationRule * arg1)->void { mfem::QuadratureFunctions1D::ClosedUniform(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::QuadratureFunctions1D::OpenHalfUniform(const int, mfem::IntegrationRule *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::QuadratureFunctions1D::OpenHalfUniform(const int, mfem::IntegrationRule *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:276:16
    module_.method("mfem!QuadratureFunctions1D!OpenHalfUniform", [](const int arg0, mfem::IntegrationRule * arg1)->void { mfem::QuadratureFunctions1D::OpenHalfUniform(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::QuadratureFunctions1D::ClosedGL(const int, mfem::IntegrationRule *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::QuadratureFunctions1D::ClosedGL(const int, mfem::IntegrationRule *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:277:16
    module_.method("mfem!QuadratureFunctions1D!ClosedGL", [](const int arg0, mfem::IntegrationRule * arg1)->void { mfem::QuadratureFunctions1D::ClosedGL(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::QuadratureFunctions1D::GivePolyPoints(const int, double *, const int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::QuadratureFunctions1D::GivePolyPoints(const int, double *, const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/intrules.hpp:282:16
    module_.method("mfem!QuadratureFunctions1D!GivePolyPoints", [](const int arg0, double * arg1, const int arg2)->void { mfem::QuadratureFunctions1D::GivePolyPoints(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::QuadratureFunctions1D>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_QuadratureFunctions1D(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_QuadratureFunctions1D(module));
}
