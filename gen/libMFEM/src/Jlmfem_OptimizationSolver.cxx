// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::OptimizationSolver> : std::false_type { };
  template<> struct DefaultConstructible<mfem::OptimizationSolver> : std::false_type { };
template<> struct SuperType<mfem::OptimizationSolver> { typedef mfem::IterativeSolver type; };
}

// Class generating the wrapper for type mfem::OptimizationSolver
// signature to use in the veto file: mfem::OptimizationSolver
struct Jlmfem_OptimizationSolver: public Wrapper {

  Jlmfem_OptimizationSolver(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::OptimizationSolver (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:820:7
    jlcxx::TypeWrapper<mfem::OptimizationSolver>  t = jlModule.add_type<mfem::OptimizationSolver>("mfem!OptimizationSolver",
      jlcxx::julia_base_type<mfem::IterativeSolver>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::OptimizationSolver>>(new jlcxx::TypeWrapper<mfem::OptimizationSolver>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for void mfem::OptimizationSolver::SetOptimizationProblem(const mfem::OptimizationProblem &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OptimizationSolver::SetOptimizationProblem(const mfem::OptimizationProblem &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:834:17
    t.method("SetOptimizationProblem", [](mfem::OptimizationSolver& a, const mfem::OptimizationProblem & arg0)->void { a.SetOptimizationProblem(arg0); });
    t.method("SetOptimizationProblem", [](mfem::OptimizationSolver* a, const mfem::OptimizationProblem & arg0)->void { a->SetOptimizationProblem(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::OptimizationSolver::Mult(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OptimizationSolver::Mult(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:837:17
    t.method("Mult", [](mfem::OptimizationSolver const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.Mult(arg0, arg1); });
    t.method("Mult", [](mfem::OptimizationSolver const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->Mult(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::OptimizationSolver::SetPreconditioner(mfem::Solver &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OptimizationSolver::SetPreconditioner(mfem::Solver &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:839:17
    t.method("SetPreconditioner", [](mfem::OptimizationSolver& a, mfem::Solver & arg0)->void { a.SetPreconditioner(arg0); });
    t.method("SetPreconditioner", [](mfem::OptimizationSolver* a, mfem::Solver & arg0)->void { a->SetPreconditioner(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::OptimizationSolver::SetOperator(const mfem::Operator &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::OptimizationSolver::SetOperator(const mfem::Operator &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:841:17
    t.method("SetOperator", [](mfem::OptimizationSolver& a, const mfem::Operator & arg0)->void { a.SetOperator(arg0); });
    t.method("SetOperator", [](mfem::OptimizationSolver* a, const mfem::Operator & arg0)->void { a->SetOperator(arg0); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::OptimizationSolver>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_OptimizationSolver(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_OptimizationSolver(module));
}
