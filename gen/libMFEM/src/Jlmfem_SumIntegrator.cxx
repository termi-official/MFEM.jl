// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::SumIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::SumIntegrator> : std::false_type { };
template<> struct SuperType<mfem::SumIntegrator> { typedef mfem::BilinearFormIntegrator type; };
}

// Class generating the wrapper for type mfem::SumIntegrator
// signature to use in the veto file: mfem::SumIntegrator
struct Jlmfem_SumIntegrator: public Wrapper {

  Jlmfem_SumIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::SumIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:363:7
    jlcxx::TypeWrapper<mfem::SumIntegrator>  t = jlModule.add_type<mfem::SumIntegrator>("mfem!SumIntegrator",
      jlcxx::julia_base_type<mfem::BilinearFormIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::SumIntegrator>>(new jlcxx::TypeWrapper<mfem::SumIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::SumIntegrator(int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:371:4
    t.constructor<int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::SetIntRule(const mfem::IntegrationRule *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::SetIntRule(const mfem::IntegrationRule *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:373:17
    t.method("SetIntRule", [](mfem::SumIntegrator& a, const mfem::IntegrationRule * arg0)->void { a.SetIntRule(arg0); });
    t.method("SetIntRule", [](mfem::SumIntegrator* a, const mfem::IntegrationRule * arg0)->void { a->SetIntRule(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AddIntegrator(mfem::BilinearFormIntegrator *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AddIntegrator(mfem::BilinearFormIntegrator *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:375:9
    t.method("AddIntegrator", [](mfem::SumIntegrator& a, mfem::BilinearFormIntegrator * arg0)->void { a.AddIntegrator(arg0); });
    t.method("AddIntegrator", [](mfem::SumIntegrator* a, mfem::BilinearFormIntegrator * arg0)->void { a->AddIntegrator(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssembleElementMatrix(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssembleElementMatrix(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:378:17
    t.method("AssembleElementMatrix", [](mfem::SumIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a.AssembleElementMatrix(arg0, arg1, arg2); });
    t.method("AssembleElementMatrix", [](mfem::SumIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a->AssembleElementMatrix(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssembleElementMatrix2(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssembleElementMatrix2(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:381:17
    t.method("AssembleElementMatrix2", [](mfem::SumIntegrator& a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::ElementTransformation & arg2, mfem::DenseMatrix & arg3)->void { a.AssembleElementMatrix2(arg0, arg1, arg2, arg3); });
    t.method("AssembleElementMatrix2", [](mfem::SumIntegrator* a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::ElementTransformation & arg2, mfem::DenseMatrix & arg3)->void { a->AssembleElementMatrix2(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssembleFaceMatrix(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssembleFaceMatrix(const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:387:17
    t.method("AssembleFaceMatrix", [](mfem::SumIntegrator& a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::FaceElementTransformations & arg2, mfem::DenseMatrix & arg3)->void { a.AssembleFaceMatrix(arg0, arg1, arg2, arg3); });
    t.method("AssembleFaceMatrix", [](mfem::SumIntegrator* a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, mfem::FaceElementTransformations & arg2, mfem::DenseMatrix & arg3)->void { a->AssembleFaceMatrix(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssembleFaceMatrix(const mfem::FiniteElement &, const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssembleFaceMatrix(const mfem::FiniteElement &, const mfem::FiniteElement &, const mfem::FiniteElement &, mfem::FaceElementTransformations &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:392:17
    t.method("AssembleFaceMatrix", [](mfem::SumIntegrator& a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, const mfem::FiniteElement & arg2, mfem::FaceElementTransformations & arg3, mfem::DenseMatrix & arg4)->void { a.AssembleFaceMatrix(arg0, arg1, arg2, arg3, arg4); });
    t.method("AssembleFaceMatrix", [](mfem::SumIntegrator* a, const mfem::FiniteElement & arg0, const mfem::FiniteElement & arg1, const mfem::FiniteElement & arg2, mfem::FaceElementTransformations & arg3, mfem::DenseMatrix & arg4)->void { a->AssembleFaceMatrix(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssemblePA(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssemblePA(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:399:17
    t.method("AssemblePA", [](mfem::SumIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssemblePA(arg0); });
    t.method("AssemblePA", [](mfem::SumIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssemblePA(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssembleDiagonalPA(mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssembleDiagonalPA(mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:401:17
    t.method("AssembleDiagonalPA", [](mfem::SumIntegrator& a, mfem::Vector & arg0)->void { a.AssembleDiagonalPA(arg0); });
    t.method("AssembleDiagonalPA", [](mfem::SumIntegrator* a, mfem::Vector & arg0)->void { a->AssembleDiagonalPA(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssemblePAInteriorFaces(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssemblePAInteriorFaces(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:403:17
    t.method("AssemblePAInteriorFaces", [](mfem::SumIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssemblePAInteriorFaces(arg0); });
    t.method("AssemblePAInteriorFaces", [](mfem::SumIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssemblePAInteriorFaces(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssemblePABoundaryFaces(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssemblePABoundaryFaces(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:405:17
    t.method("AssemblePABoundaryFaces", [](mfem::SumIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssemblePABoundaryFaces(arg0); });
    t.method("AssemblePABoundaryFaces", [](mfem::SumIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssemblePABoundaryFaces(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AddMultTransposePA(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AddMultTransposePA(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:407:17
    t.method("AddMultTransposePA", [](mfem::SumIntegrator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultTransposePA(arg0, arg1); });
    t.method("AddMultTransposePA", [](mfem::SumIntegrator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultTransposePA(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AddMultPA(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AddMultPA(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:409:17
    t.method("AddMultPA", [](mfem::SumIntegrator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultPA(arg0, arg1); });
    t.method("AddMultPA", [](mfem::SumIntegrator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultPA(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssembleMF(const mfem::FiniteElementSpace &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssembleMF(const mfem::FiniteElementSpace &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:411:17
    t.method("AssembleMF", [](mfem::SumIntegrator& a, const mfem::FiniteElementSpace & arg0)->void { a.AssembleMF(arg0); });
    t.method("AssembleMF", [](mfem::SumIntegrator* a, const mfem::FiniteElementSpace & arg0)->void { a->AssembleMF(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AddMultMF(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AddMultMF(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:413:17
    t.method("AddMultMF", [](mfem::SumIntegrator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultMF(arg0, arg1); });
    t.method("AddMultMF", [](mfem::SumIntegrator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultMF(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AddMultTransposeMF(const mfem::Vector &, mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AddMultTransposeMF(const mfem::Vector &, mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:415:17
    t.method("AddMultTransposeMF", [](mfem::SumIntegrator const& a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a.AddMultTransposeMF(arg0, arg1); });
    t.method("AddMultTransposeMF", [](mfem::SumIntegrator const* a, const mfem::Vector & arg0, mfem::Vector & arg1)->void { a->AddMultTransposeMF(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssembleDiagonalMF(mfem::Vector &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssembleDiagonalMF(mfem::Vector &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:417:17
    t.method("AssembleDiagonalMF", [](mfem::SumIntegrator& a, mfem::Vector & arg0)->void { a.AssembleDiagonalMF(arg0); });
    t.method("AssembleDiagonalMF", [](mfem::SumIntegrator* a, mfem::Vector & arg0)->void { a->AssembleDiagonalMF(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssembleEA(const mfem::FiniteElementSpace &, mfem::Vector &, const bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssembleEA(const mfem::FiniteElementSpace &, mfem::Vector &, const bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:419:17
    t.method("AssembleEA", [](mfem::SumIntegrator& a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, const bool arg2)->void { a.AssembleEA(arg0, arg1, arg2); });
    t.method("AssembleEA", [](mfem::SumIntegrator* a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, const bool arg2)->void { a->AssembleEA(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssembleEAInteriorFaces(const mfem::FiniteElementSpace &, mfem::Vector &, mfem::Vector &, const bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssembleEAInteriorFaces(const mfem::FiniteElementSpace &, mfem::Vector &, mfem::Vector &, const bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:422:17
    t.method("AssembleEAInteriorFaces", [](mfem::SumIntegrator& a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, mfem::Vector & arg2, const bool arg3)->void { a.AssembleEAInteriorFaces(arg0, arg1, arg2, arg3); });
    t.method("AssembleEAInteriorFaces", [](mfem::SumIntegrator* a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, mfem::Vector & arg2, const bool arg3)->void { a->AssembleEAInteriorFaces(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void mfem::SumIntegrator::AssembleEABoundaryFaces(const mfem::FiniteElementSpace &, mfem::Vector &, const bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::SumIntegrator::AssembleEABoundaryFaces(const mfem::FiniteElementSpace &, mfem::Vector &, const bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:427:17
    t.method("AssembleEABoundaryFaces", [](mfem::SumIntegrator& a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, const bool arg2)->void { a.AssembleEABoundaryFaces(arg0, arg1, arg2); });
    t.method("AssembleEABoundaryFaces", [](mfem::SumIntegrator* a, const mfem::FiniteElementSpace & arg0, mfem::Vector & arg1, const bool arg2)->void { a->AssembleEABoundaryFaces(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::SumIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_SumIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_SumIntegrator(module));
}
