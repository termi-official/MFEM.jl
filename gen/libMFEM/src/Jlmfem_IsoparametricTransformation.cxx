// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::IsoparametricTransformation> : std::false_type { };
  template<> struct DefaultConstructible<mfem::IsoparametricTransformation> : std::false_type { };
template<> struct SuperType<mfem::IsoparametricTransformation> { typedef mfem::ElementTransformation type; };
}

// Class generating the wrapper for type mfem::IsoparametricTransformation
// signature to use in the veto file: mfem::IsoparametricTransformation
struct Jlmfem_IsoparametricTransformation: public Wrapper {

  Jlmfem_IsoparametricTransformation(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::IsoparametricTransformation (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/eltrans.hpp:361:7
    jlcxx::TypeWrapper<mfem::IsoparametricTransformation>  t = jlModule.add_type<mfem::IsoparametricTransformation>("mfem!IsoparametricTransformation",
      jlcxx::julia_base_type<mfem::ElementTransformation>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::IsoparametricTransformation>>(new jlcxx::TypeWrapper<mfem::IsoparametricTransformation>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::IsoparametricTransformation>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_IsoparametricTransformation(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_IsoparametricTransformation(module));
}
