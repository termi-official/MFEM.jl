// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::ElasticityIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::ElasticityIntegrator> : std::false_type { };
template<> struct SuperType<mfem::ElasticityIntegrator> { typedef mfem::BilinearFormIntegrator type; };
}

// Class generating the wrapper for type mfem::ElasticityIntegrator
// signature to use in the veto file: mfem::ElasticityIntegrator
struct Jlmfem_ElasticityIntegrator: public Wrapper {

  Jlmfem_ElasticityIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::ElasticityIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2846:7
    jlcxx::TypeWrapper<mfem::ElasticityIntegrator>  t = jlModule.add_type<mfem::ElasticityIntegrator>("mfem!ElasticityIntegrator",
      jlcxx::julia_base_type<mfem::BilinearFormIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::ElasticityIntegrator>>(new jlcxx::TypeWrapper<mfem::ElasticityIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::ElasticityIntegrator::ElasticityIntegrator(mfem::Coefficient &, mfem::Coefficient &) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2860:4
    t.constructor<mfem::Coefficient &, mfem::Coefficient &>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void mfem::ElasticityIntegrator::ElasticityIntegrator(mfem::Coefficient &, double, double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2864:4
    t.constructor<mfem::Coefficient &, double, double>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::ElasticityIntegrator::AssembleElementMatrix(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::ElasticityIntegrator::AssembleElementMatrix(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2867:17
    t.method("AssembleElementMatrix", [](mfem::ElasticityIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a.AssembleElementMatrix(arg0, arg1, arg2); });
    t.method("AssembleElementMatrix", [](mfem::ElasticityIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a->AssembleElementMatrix(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void mfem::ElasticityIntegrator::ComputeElementFlux(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::Vector &, const mfem::FiniteElement &, mfem::Vector &, bool) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::ElasticityIntegrator::ComputeElementFlux(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::Vector &, const mfem::FiniteElement &, mfem::Vector &, bool)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2879:17
    t.method("ComputeElementFlux", [](mfem::ElasticityIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2, const mfem::FiniteElement & arg3, mfem::Vector & arg4)->void { a.ComputeElementFlux(arg0, arg1, arg2, arg3, arg4); });
    t.method("ComputeElementFlux", [](mfem::ElasticityIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2, const mfem::FiniteElement & arg3, mfem::Vector & arg4, bool arg5)->void { a.ComputeElementFlux(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("ComputeElementFlux", [](mfem::ElasticityIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2, const mfem::FiniteElement & arg3, mfem::Vector & arg4)->void { a->ComputeElementFlux(arg0, arg1, arg2, arg3, arg4); });
    t.method("ComputeElementFlux", [](mfem::ElasticityIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2, const mfem::FiniteElement & arg3, mfem::Vector & arg4, bool arg5)->void { a->ComputeElementFlux(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for double mfem::ElasticityIntegrator::ComputeFluxEnergy(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::Vector &, mfem::Vector *) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::ElasticityIntegrator::ComputeFluxEnergy(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::Vector &, mfem::Vector *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:2894:19
    t.method("ComputeFluxEnergy", [](mfem::ElasticityIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2)->double { return a.ComputeFluxEnergy(arg0, arg1, arg2); });
    t.method("ComputeFluxEnergy", [](mfem::ElasticityIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2, mfem::Vector * arg3)->double { return a.ComputeFluxEnergy(arg0, arg1, arg2, arg3); });
    t.method("ComputeFluxEnergy", [](mfem::ElasticityIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2)->double { return a->ComputeFluxEnergy(arg0, arg1, arg2); });
    t.method("ComputeFluxEnergy", [](mfem::ElasticityIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::Vector & arg2, mfem::Vector * arg3)->double { return a->ComputeFluxEnergy(arg0, arg1, arg2, arg3); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::ElasticityIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_ElasticityIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_ElasticityIntegrator(module));
}
