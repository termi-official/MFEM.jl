// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::LumpedIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<mfem::LumpedIntegrator> : std::false_type { };
template<> struct SuperType<mfem::LumpedIntegrator> { typedef mfem::BilinearFormIntegrator type; };
}

// Class generating the wrapper for type mfem::LumpedIntegrator
// signature to use in the veto file: mfem::LumpedIntegrator
struct Jlmfem_LumpedIntegrator: public Wrapper {

  Jlmfem_LumpedIntegrator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::LumpedIntegrator (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:323:7
    jlcxx::TypeWrapper<mfem::LumpedIntegrator>  t = jlModule.add_type<mfem::LumpedIntegrator>("mfem!LumpedIntegrator",
      jlcxx::julia_base_type<mfem::BilinearFormIntegrator>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::LumpedIntegrator>>(new jlcxx::TypeWrapper<mfem::LumpedIntegrator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::LumpedIntegrator::LumpedIntegrator(mfem::BilinearFormIntegrator *, int) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:330:4
    t.constructor<mfem::BilinearFormIntegrator *>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<mfem::BilinearFormIntegrator *, int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::LumpedIntegrator::SetIntRule(const mfem::IntegrationRule *) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::LumpedIntegrator::SetIntRule(const mfem::IntegrationRule *)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:333:17
    t.method("SetIntRule", [](mfem::LumpedIntegrator& a, const mfem::IntegrationRule * arg0)->void { a.SetIntRule(arg0); });
    t.method("SetIntRule", [](mfem::LumpedIntegrator* a, const mfem::IntegrationRule * arg0)->void { a->SetIntRule(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::LumpedIntegrator::AssembleElementMatrix(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::LumpedIntegrator::AssembleElementMatrix(const mfem::FiniteElement &, mfem::ElementTransformation &, mfem::DenseMatrix &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/bilininteg.hpp:335:17
    t.method("AssembleElementMatrix", [](mfem::LumpedIntegrator& a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a.AssembleElementMatrix(arg0, arg1, arg2); });
    t.method("AssembleElementMatrix", [](mfem::LumpedIntegrator* a, const mfem::FiniteElement & arg0, mfem::ElementTransformation & arg1, mfem::DenseMatrix & arg2)->void { a->AssembleElementMatrix(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::LumpedIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_LumpedIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_LumpedIntegrator(module));
}
