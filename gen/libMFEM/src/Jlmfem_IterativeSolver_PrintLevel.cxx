// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::IterativeSolver::PrintLevel> : std::false_type { };
  template<> struct DefaultConstructible<mfem::IterativeSolver::PrintLevel> : std::false_type { };
}

// Class generating the wrapper for type mfem::IterativeSolver::PrintLevel
// signature to use in the veto file: mfem::IterativeSolver::PrintLevel
struct Jlmfem_IterativeSolver_PrintLevel: public Wrapper {

  Jlmfem_IterativeSolver_PrintLevel(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::IterativeSolver::PrintLevel (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:78:11
    jlcxx::TypeWrapper<mfem::IterativeSolver::PrintLevel>  t = jlModule.add_type<mfem::IterativeSolver::PrintLevel>("mfem!IterativeSolver!PrintLevel");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::IterativeSolver::PrintLevel>>(new jlcxx::TypeWrapper<mfem::IterativeSolver::PrintLevel>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::None() (" __HERE__ ")");
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::None()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:103:19
    t.method("None", [](mfem::IterativeSolver::PrintLevel& a)->mfem::IterativeSolver::PrintLevel & { return a.None(); });
    t.method("None", [](mfem::IterativeSolver::PrintLevel* a)->mfem::IterativeSolver::PrintLevel & { return a->None(); });

    DEBUG_MSG("Adding wrapper for mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::Warnings() (" __HERE__ ")");
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::Warnings()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:104:19
    t.method("Warnings", [](mfem::IterativeSolver::PrintLevel& a)->mfem::IterativeSolver::PrintLevel & { return a.Warnings(); });
    t.method("Warnings", [](mfem::IterativeSolver::PrintLevel* a)->mfem::IterativeSolver::PrintLevel & { return a->Warnings(); });

    DEBUG_MSG("Adding wrapper for mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::Errors() (" __HERE__ ")");
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::Errors()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:105:19
    t.method("Errors", [](mfem::IterativeSolver::PrintLevel& a)->mfem::IterativeSolver::PrintLevel & { return a.Errors(); });
    t.method("Errors", [](mfem::IterativeSolver::PrintLevel* a)->mfem::IterativeSolver::PrintLevel & { return a->Errors(); });

    DEBUG_MSG("Adding wrapper for mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::Iterations() (" __HERE__ ")");
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::Iterations()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:106:19
    t.method("Iterations", [](mfem::IterativeSolver::PrintLevel& a)->mfem::IterativeSolver::PrintLevel & { return a.Iterations(); });
    t.method("Iterations", [](mfem::IterativeSolver::PrintLevel* a)->mfem::IterativeSolver::PrintLevel & { return a->Iterations(); });

    DEBUG_MSG("Adding wrapper for mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::FirstAndLast() (" __HERE__ ")");
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::FirstAndLast()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:107:19
    t.method("FirstAndLast", [](mfem::IterativeSolver::PrintLevel& a)->mfem::IterativeSolver::PrintLevel & { return a.FirstAndLast(); });
    t.method("FirstAndLast", [](mfem::IterativeSolver::PrintLevel* a)->mfem::IterativeSolver::PrintLevel & { return a->FirstAndLast(); });

    DEBUG_MSG("Adding wrapper for mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::Summary() (" __HERE__ ")");
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::Summary()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:108:19
    t.method("Summary", [](mfem::IterativeSolver::PrintLevel& a)->mfem::IterativeSolver::PrintLevel & { return a.Summary(); });
    t.method("Summary", [](mfem::IterativeSolver::PrintLevel* a)->mfem::IterativeSolver::PrintLevel & { return a->Summary(); });

    DEBUG_MSG("Adding wrapper for mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::All() (" __HERE__ ")");
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel & mfem::IterativeSolver::PrintLevel::All()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:109:19
    t.method("All", [](mfem::IterativeSolver::PrintLevel& a)->mfem::IterativeSolver::PrintLevel & { return a.All(); });
    t.method("All", [](mfem::IterativeSolver::PrintLevel* a)->mfem::IterativeSolver::PrintLevel & { return a->All(); });

    DEBUG_MSG("Adding errors methods  to provide read access to the field errors (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:82:12
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel::errors
    t.method("errors", [](const mfem::IterativeSolver::PrintLevel& a) -> bool { return a.errors; });
    t.method("errors", [](mfem::IterativeSolver::PrintLevel& a) -> bool { return a.errors; });
    t.method("errors", [](const mfem::IterativeSolver::PrintLevel* a) -> bool { return a->errors; });
    t.method("errors", [](mfem::IterativeSolver::PrintLevel* a) -> bool { return a->errors; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:82:12
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel::errors
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding errors! methods to provide write access to the field errors (" __HERE__ ")");
    t.method("errors!", [](mfem::IterativeSolver::PrintLevel& a, bool val) -> bool { return a.errors = val; });

    DEBUG_MSG("Adding errors! methods to provide write access to the field errors (" __HERE__ ")");
    t.method("errors!", [](mfem::IterativeSolver::PrintLevel* a, bool val) -> bool { return a->errors = val; });

    DEBUG_MSG("Adding warnings methods  to provide read access to the field warnings (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:85:12
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel::warnings
    t.method("warnings", [](const mfem::IterativeSolver::PrintLevel& a) -> bool { return a.warnings; });
    t.method("warnings", [](mfem::IterativeSolver::PrintLevel& a) -> bool { return a.warnings; });
    t.method("warnings", [](const mfem::IterativeSolver::PrintLevel* a) -> bool { return a->warnings; });
    t.method("warnings", [](mfem::IterativeSolver::PrintLevel* a) -> bool { return a->warnings; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:85:12
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel::warnings
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding warnings! methods to provide write access to the field warnings (" __HERE__ ")");
    t.method("warnings!", [](mfem::IterativeSolver::PrintLevel& a, bool val) -> bool { return a.warnings = val; });

    DEBUG_MSG("Adding warnings! methods to provide write access to the field warnings (" __HERE__ ")");
    t.method("warnings!", [](mfem::IterativeSolver::PrintLevel* a, bool val) -> bool { return a->warnings = val; });

    DEBUG_MSG("Adding iterations methods  to provide read access to the field iterations (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:88:12
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel::iterations
    t.method("iterations", [](const mfem::IterativeSolver::PrintLevel& a) -> bool { return a.iterations; });
    t.method("iterations", [](mfem::IterativeSolver::PrintLevel& a) -> bool { return a.iterations; });
    t.method("iterations", [](const mfem::IterativeSolver::PrintLevel* a) -> bool { return a->iterations; });
    t.method("iterations", [](mfem::IterativeSolver::PrintLevel* a) -> bool { return a->iterations; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:88:12
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel::iterations
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding iterations! methods to provide write access to the field iterations (" __HERE__ ")");
    t.method("iterations!", [](mfem::IterativeSolver::PrintLevel& a, bool val) -> bool { return a.iterations = val; });

    DEBUG_MSG("Adding iterations! methods to provide write access to the field iterations (" __HERE__ ")");
    t.method("iterations!", [](mfem::IterativeSolver::PrintLevel* a, bool val) -> bool { return a->iterations = val; });

    DEBUG_MSG("Adding summary methods  to provide read access to the field summary (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:91:12
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel::summary
    t.method("summary", [](const mfem::IterativeSolver::PrintLevel& a) -> bool { return a.summary; });
    t.method("summary", [](mfem::IterativeSolver::PrintLevel& a) -> bool { return a.summary; });
    t.method("summary", [](const mfem::IterativeSolver::PrintLevel* a) -> bool { return a->summary; });
    t.method("summary", [](mfem::IterativeSolver::PrintLevel* a) -> bool { return a->summary; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:91:12
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel::summary
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding summary! methods to provide write access to the field summary (" __HERE__ ")");
    t.method("summary!", [](mfem::IterativeSolver::PrintLevel& a, bool val) -> bool { return a.summary = val; });

    DEBUG_MSG("Adding summary! methods to provide write access to the field summary (" __HERE__ ")");
    t.method("summary!", [](mfem::IterativeSolver::PrintLevel* a, bool val) -> bool { return a->summary = val; });

    DEBUG_MSG("Adding first_and_last methods  to provide read access to the field first_and_last (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:94:12
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel::first_and_last
    t.method("first_and_last", [](const mfem::IterativeSolver::PrintLevel& a) -> bool { return a.first_and_last; });
    t.method("first_and_last", [](mfem::IterativeSolver::PrintLevel& a) -> bool { return a.first_and_last; });
    t.method("first_and_last", [](const mfem::IterativeSolver::PrintLevel* a) -> bool { return a->first_and_last; });
    t.method("first_and_last", [](mfem::IterativeSolver::PrintLevel* a) -> bool { return a->first_and_last; });
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/linalg/solvers.hpp:94:12
    // signature to use in the veto list: mfem::IterativeSolver::PrintLevel::first_and_last
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding first_and_last! methods to provide write access to the field first_and_last (" __HERE__ ")");
    t.method("first_and_last!", [](mfem::IterativeSolver::PrintLevel& a, bool val) -> bool { return a.first_and_last = val; });

    DEBUG_MSG("Adding first_and_last! methods to provide write access to the field first_and_last (" __HERE__ ")");
    t.method("first_and_last!", [](mfem::IterativeSolver::PrintLevel* a, bool val) -> bool { return a->first_and_last = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::IterativeSolver::PrintLevel>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_IterativeSolver_PrintLevel(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_IterativeSolver_PrintLevel(module));
}
