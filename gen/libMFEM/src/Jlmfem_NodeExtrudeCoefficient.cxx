// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::NodeExtrudeCoefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::NodeExtrudeCoefficient> : std::false_type { };
template<> struct SuperType<mfem::NodeExtrudeCoefficient> { typedef mfem::VectorCoefficient type; };
}

// Class generating the wrapper for type mfem::NodeExtrudeCoefficient
// signature to use in the veto file: mfem::NodeExtrudeCoefficient
struct Jlmfem_NodeExtrudeCoefficient: public Wrapper {

  Jlmfem_NodeExtrudeCoefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::NodeExtrudeCoefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1919:7
    jlcxx::TypeWrapper<mfem::NodeExtrudeCoefficient>  t = jlModule.add_type<mfem::NodeExtrudeCoefficient>("mfem!NodeExtrudeCoefficient",
      jlcxx::julia_base_type<mfem::VectorCoefficient>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::NodeExtrudeCoefficient>>(new jlcxx::TypeWrapper<mfem::NodeExtrudeCoefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void mfem::NodeExtrudeCoefficient::NodeExtrudeCoefficient(const int, const int, const double) (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1926:4
    t.constructor<const int, const int, const double>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void mfem::NodeExtrudeCoefficient::SetLayer(const int) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::NodeExtrudeCoefficient::SetLayer(const int)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1927:9
    t.method("SetLayer", [](mfem::NodeExtrudeCoefficient& a, const int arg0)->void { a.SetLayer(arg0); });
    t.method("SetLayer", [](mfem::NodeExtrudeCoefficient* a, const int arg0)->void { a->SetLayer(arg0); });

    DEBUG_MSG("Adding wrapper for void mfem::NodeExtrudeCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::NodeExtrudeCoefficient::Eval(mfem::Vector &, mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/mesh.hpp:1929:17
    t.method("Eval", [](mfem::NodeExtrudeCoefficient& a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::NodeExtrudeCoefficient* a, mfem::Vector & arg0, mfem::ElementTransformation & arg1, const mfem::IntegrationPoint & arg2)->void { a->Eval(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::NodeExtrudeCoefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_NodeExtrudeCoefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_NodeExtrudeCoefficient(module));
}
