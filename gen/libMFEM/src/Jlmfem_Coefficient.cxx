// this file was auto-generated by wrapit v1.5.0
#include "Wrapper.h"

#include "jllibMFEM.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<mfem::Coefficient> : std::false_type { };
  template<> struct DefaultConstructible<mfem::Coefficient> : std::false_type { };
}

// Class generating the wrapper for type mfem::Coefficient
// signature to use in the veto file: mfem::Coefficient
struct Jlmfem_Coefficient: public Wrapper {

  Jlmfem_Coefficient(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type mfem::Coefficient (" __HERE__ ")");
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:39:7
    jlcxx::TypeWrapper<mfem::Coefficient>  t = jlModule.add_type<mfem::Coefficient>("mfem!Coefficient");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<mfem::Coefficient>>(new jlcxx::TypeWrapper<mfem::Coefficient>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for void mfem::Coefficient::SetTime(double) (" __HERE__ ")");
    // signature to use in the veto list: void mfem::Coefficient::SetTime(double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:48:17
    t.method("SetTime", [](mfem::Coefficient& a, double arg0)->void { a.SetTime(arg0); });
    t.method("SetTime", [](mfem::Coefficient* a, double arg0)->void { a->SetTime(arg0); });

    DEBUG_MSG("Adding wrapper for double mfem::Coefficient::GetTime() (" __HERE__ ")");
    // signature to use in the veto list: double mfem::Coefficient::GetTime()
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:51:11
    t.method("GetTime", [](mfem::Coefficient& a)->double { return a.GetTime(); });
    t.method("GetTime", [](mfem::Coefficient* a)->double { return a->GetTime(); });

    DEBUG_MSG("Adding wrapper for double mfem::Coefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::Coefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:58:19
    t.method("Eval", [](mfem::Coefficient& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a.Eval(arg0, arg1); });
    t.method("Eval", [](mfem::Coefficient* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1)->double { return a->Eval(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double mfem::Coefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &, double) (" __HERE__ ")");
    // signature to use in the veto list: double mfem::Coefficient::Eval(mfem::ElementTransformation &, const mfem::IntegrationPoint &, double)
    // defined in /home/dogiermann/.julia/artifacts/820df874853553756f46ac6dc23173c05d8db01a/include/mfem/mesh/../fem/coefficient.hpp:66:11
    t.method("Eval", [](mfem::Coefficient& a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1, double arg2)->double { return a.Eval(arg0, arg1, arg2); });
    t.method("Eval", [](mfem::Coefficient* a, mfem::ElementTransformation & arg0, const mfem::IntegrationPoint & arg1, double arg2)->double { return a->Eval(arg0, arg1, arg2); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<mfem::Coefficient>> type_;
};
std::shared_ptr<Wrapper> newJlmfem_Coefficient(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jlmfem_Coefficient(module));
}
